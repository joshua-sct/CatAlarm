
CatAlarm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009020  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  080090d8  080090d8  000190d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009224  08009224  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08009224  08009224  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009224  08009224  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08009224  08009224  00019224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800922c  0800922c  0001922c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08009230  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007bc  20000090  080092c0  00020090  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000084c  080092c0  0002084c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c279  00000000  00000000  000200fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000468c  00000000  00000000  0003c374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001500  00000000  00000000  00040a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001069  00000000  00000000  00041f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001aa3f  00000000  00000000  00042f69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ff15  00000000  00000000  0005d9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000992cd  00000000  00000000  0007d8bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000514c  00000000  00000000  00116b8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0011bcd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000090 	.word	0x20000090
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080090c0 	.word	0x080090c0

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000094 	.word	0x20000094
 80000fc:	080090c0 	.word	0x080090c0

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <__aeabi_cdrcmple>:
 80003ec:	4684      	mov	ip, r0
 80003ee:	0010      	movs	r0, r2
 80003f0:	4662      	mov	r2, ip
 80003f2:	468c      	mov	ip, r1
 80003f4:	0019      	movs	r1, r3
 80003f6:	4663      	mov	r3, ip
 80003f8:	e000      	b.n	80003fc <__aeabi_cdcmpeq>
 80003fa:	46c0      	nop			; (mov r8, r8)

080003fc <__aeabi_cdcmpeq>:
 80003fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003fe:	f001 fe23 	bl	8002048 <__ledf2>
 8000402:	2800      	cmp	r0, #0
 8000404:	d401      	bmi.n	800040a <__aeabi_cdcmpeq+0xe>
 8000406:	2100      	movs	r1, #0
 8000408:	42c8      	cmn	r0, r1
 800040a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800040c <__aeabi_dcmpeq>:
 800040c:	b510      	push	{r4, lr}
 800040e:	f001 fd73 	bl	8001ef8 <__eqdf2>
 8000412:	4240      	negs	r0, r0
 8000414:	3001      	adds	r0, #1
 8000416:	bd10      	pop	{r4, pc}

08000418 <__aeabi_dcmplt>:
 8000418:	b510      	push	{r4, lr}
 800041a:	f001 fe15 	bl	8002048 <__ledf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	db01      	blt.n	8000426 <__aeabi_dcmplt+0xe>
 8000422:	2000      	movs	r0, #0
 8000424:	bd10      	pop	{r4, pc}
 8000426:	2001      	movs	r0, #1
 8000428:	bd10      	pop	{r4, pc}
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_dcmple>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f001 fe0b 	bl	8002048 <__ledf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	dd01      	ble.n	800043a <__aeabi_dcmple+0xe>
 8000436:	2000      	movs	r0, #0
 8000438:	bd10      	pop	{r4, pc}
 800043a:	2001      	movs	r0, #1
 800043c:	bd10      	pop	{r4, pc}
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_dcmpgt>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f001 fd9b 	bl	8001f7c <__gedf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	dc01      	bgt.n	800044e <__aeabi_dcmpgt+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__aeabi_dcmpge>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 fd91 	bl	8001f7c <__gedf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	da01      	bge.n	8000462 <__aeabi_dcmpge+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_cfrcmple>:
 8000468:	4684      	mov	ip, r0
 800046a:	0008      	movs	r0, r1
 800046c:	4661      	mov	r1, ip
 800046e:	e7ff      	b.n	8000470 <__aeabi_cfcmpeq>

08000470 <__aeabi_cfcmpeq>:
 8000470:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000472:	f000 fb59 	bl	8000b28 <__lesf2>
 8000476:	2800      	cmp	r0, #0
 8000478:	d401      	bmi.n	800047e <__aeabi_cfcmpeq+0xe>
 800047a:	2100      	movs	r1, #0
 800047c:	42c8      	cmn	r0, r1
 800047e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000480 <__aeabi_fcmpeq>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 fae5 	bl	8000a50 <__eqsf2>
 8000486:	4240      	negs	r0, r0
 8000488:	3001      	adds	r0, #1
 800048a:	bd10      	pop	{r4, pc}

0800048c <__aeabi_fcmplt>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f000 fb4b 	bl	8000b28 <__lesf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	db01      	blt.n	800049a <__aeabi_fcmplt+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			; (mov r8, r8)

080004a0 <__aeabi_fcmple>:
 80004a0:	b510      	push	{r4, lr}
 80004a2:	f000 fb41 	bl	8000b28 <__lesf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	dd01      	ble.n	80004ae <__aeabi_fcmple+0xe>
 80004aa:	2000      	movs	r0, #0
 80004ac:	bd10      	pop	{r4, pc}
 80004ae:	2001      	movs	r0, #1
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	46c0      	nop			; (mov r8, r8)

080004b4 <__aeabi_fcmpgt>:
 80004b4:	b510      	push	{r4, lr}
 80004b6:	f000 faf1 	bl	8000a9c <__gesf2>
 80004ba:	2800      	cmp	r0, #0
 80004bc:	dc01      	bgt.n	80004c2 <__aeabi_fcmpgt+0xe>
 80004be:	2000      	movs	r0, #0
 80004c0:	bd10      	pop	{r4, pc}
 80004c2:	2001      	movs	r0, #1
 80004c4:	bd10      	pop	{r4, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)

080004c8 <__aeabi_fcmpge>:
 80004c8:	b510      	push	{r4, lr}
 80004ca:	f000 fae7 	bl	8000a9c <__gesf2>
 80004ce:	2800      	cmp	r0, #0
 80004d0:	da01      	bge.n	80004d6 <__aeabi_fcmpge+0xe>
 80004d2:	2000      	movs	r0, #0
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	2001      	movs	r0, #1
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	46c0      	nop			; (mov r8, r8)

080004dc <__aeabi_fadd>:
 80004dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004de:	4647      	mov	r7, r8
 80004e0:	46ce      	mov	lr, r9
 80004e2:	024a      	lsls	r2, r1, #9
 80004e4:	0243      	lsls	r3, r0, #9
 80004e6:	0045      	lsls	r5, r0, #1
 80004e8:	0fc4      	lsrs	r4, r0, #31
 80004ea:	0a50      	lsrs	r0, r2, #9
 80004ec:	4680      	mov	r8, r0
 80004ee:	0048      	lsls	r0, r1, #1
 80004f0:	0a5b      	lsrs	r3, r3, #9
 80004f2:	0e00      	lsrs	r0, r0, #24
 80004f4:	0992      	lsrs	r2, r2, #6
 80004f6:	4694      	mov	ip, r2
 80004f8:	b580      	push	{r7, lr}
 80004fa:	001e      	movs	r6, r3
 80004fc:	4681      	mov	r9, r0
 80004fe:	0002      	movs	r2, r0
 8000500:	0e2d      	lsrs	r5, r5, #24
 8000502:	00df      	lsls	r7, r3, #3
 8000504:	0fc9      	lsrs	r1, r1, #31
 8000506:	428c      	cmp	r4, r1
 8000508:	d024      	beq.n	8000554 <__aeabi_fadd+0x78>
 800050a:	1a28      	subs	r0, r5, r0
 800050c:	2800      	cmp	r0, #0
 800050e:	dd0e      	ble.n	800052e <__aeabi_fadd+0x52>
 8000510:	2a00      	cmp	r2, #0
 8000512:	d13e      	bne.n	8000592 <__aeabi_fadd+0xb6>
 8000514:	4662      	mov	r2, ip
 8000516:	2a00      	cmp	r2, #0
 8000518:	d100      	bne.n	800051c <__aeabi_fadd+0x40>
 800051a:	e0fd      	b.n	8000718 <__aeabi_fadd+0x23c>
 800051c:	1e42      	subs	r2, r0, #1
 800051e:	2801      	cmp	r0, #1
 8000520:	d100      	bne.n	8000524 <__aeabi_fadd+0x48>
 8000522:	e137      	b.n	8000794 <__aeabi_fadd+0x2b8>
 8000524:	28ff      	cmp	r0, #255	; 0xff
 8000526:	d100      	bne.n	800052a <__aeabi_fadd+0x4e>
 8000528:	e0a9      	b.n	800067e <__aeabi_fadd+0x1a2>
 800052a:	0010      	movs	r0, r2
 800052c:	e039      	b.n	80005a2 <__aeabi_fadd+0xc6>
 800052e:	2800      	cmp	r0, #0
 8000530:	d063      	beq.n	80005fa <__aeabi_fadd+0x11e>
 8000532:	464b      	mov	r3, r9
 8000534:	1b52      	subs	r2, r2, r5
 8000536:	2d00      	cmp	r5, #0
 8000538:	d000      	beq.n	800053c <__aeabi_fadd+0x60>
 800053a:	e0e0      	b.n	80006fe <__aeabi_fadd+0x222>
 800053c:	2f00      	cmp	r7, #0
 800053e:	d100      	bne.n	8000542 <__aeabi_fadd+0x66>
 8000540:	e0ce      	b.n	80006e0 <__aeabi_fadd+0x204>
 8000542:	1e53      	subs	r3, r2, #1
 8000544:	2a01      	cmp	r2, #1
 8000546:	d100      	bne.n	800054a <__aeabi_fadd+0x6e>
 8000548:	e155      	b.n	80007f6 <__aeabi_fadd+0x31a>
 800054a:	2aff      	cmp	r2, #255	; 0xff
 800054c:	d100      	bne.n	8000550 <__aeabi_fadd+0x74>
 800054e:	e094      	b.n	800067a <__aeabi_fadd+0x19e>
 8000550:	001a      	movs	r2, r3
 8000552:	e0d9      	b.n	8000708 <__aeabi_fadd+0x22c>
 8000554:	1a2a      	subs	r2, r5, r0
 8000556:	2a00      	cmp	r2, #0
 8000558:	dc00      	bgt.n	800055c <__aeabi_fadd+0x80>
 800055a:	e099      	b.n	8000690 <__aeabi_fadd+0x1b4>
 800055c:	2800      	cmp	r0, #0
 800055e:	d062      	beq.n	8000626 <__aeabi_fadd+0x14a>
 8000560:	2dff      	cmp	r5, #255	; 0xff
 8000562:	d100      	bne.n	8000566 <__aeabi_fadd+0x8a>
 8000564:	e08b      	b.n	800067e <__aeabi_fadd+0x1a2>
 8000566:	2380      	movs	r3, #128	; 0x80
 8000568:	4661      	mov	r1, ip
 800056a:	04db      	lsls	r3, r3, #19
 800056c:	4319      	orrs	r1, r3
 800056e:	468c      	mov	ip, r1
 8000570:	2a1b      	cmp	r2, #27
 8000572:	dc00      	bgt.n	8000576 <__aeabi_fadd+0x9a>
 8000574:	e0d2      	b.n	800071c <__aeabi_fadd+0x240>
 8000576:	2301      	movs	r3, #1
 8000578:	19db      	adds	r3, r3, r7
 800057a:	015a      	lsls	r2, r3, #5
 800057c:	d56a      	bpl.n	8000654 <__aeabi_fadd+0x178>
 800057e:	3501      	adds	r5, #1
 8000580:	2dff      	cmp	r5, #255	; 0xff
 8000582:	d05b      	beq.n	800063c <__aeabi_fadd+0x160>
 8000584:	2201      	movs	r2, #1
 8000586:	49a3      	ldr	r1, [pc, #652]	; (8000814 <__aeabi_fadd+0x338>)
 8000588:	401a      	ands	r2, r3
 800058a:	085b      	lsrs	r3, r3, #1
 800058c:	400b      	ands	r3, r1
 800058e:	4313      	orrs	r3, r2
 8000590:	e01c      	b.n	80005cc <__aeabi_fadd+0xf0>
 8000592:	2dff      	cmp	r5, #255	; 0xff
 8000594:	d100      	bne.n	8000598 <__aeabi_fadd+0xbc>
 8000596:	e072      	b.n	800067e <__aeabi_fadd+0x1a2>
 8000598:	2380      	movs	r3, #128	; 0x80
 800059a:	4662      	mov	r2, ip
 800059c:	04db      	lsls	r3, r3, #19
 800059e:	431a      	orrs	r2, r3
 80005a0:	4694      	mov	ip, r2
 80005a2:	281b      	cmp	r0, #27
 80005a4:	dc00      	bgt.n	80005a8 <__aeabi_fadd+0xcc>
 80005a6:	e090      	b.n	80006ca <__aeabi_fadd+0x1ee>
 80005a8:	2301      	movs	r3, #1
 80005aa:	1afb      	subs	r3, r7, r3
 80005ac:	015a      	lsls	r2, r3, #5
 80005ae:	d551      	bpl.n	8000654 <__aeabi_fadd+0x178>
 80005b0:	019b      	lsls	r3, r3, #6
 80005b2:	099e      	lsrs	r6, r3, #6
 80005b4:	0030      	movs	r0, r6
 80005b6:	f002 fcdb 	bl	8002f70 <__clzsi2>
 80005ba:	0033      	movs	r3, r6
 80005bc:	3805      	subs	r0, #5
 80005be:	4083      	lsls	r3, r0
 80005c0:	4285      	cmp	r5, r0
 80005c2:	dc00      	bgt.n	80005c6 <__aeabi_fadd+0xea>
 80005c4:	e075      	b.n	80006b2 <__aeabi_fadd+0x1d6>
 80005c6:	4a94      	ldr	r2, [pc, #592]	; (8000818 <__aeabi_fadd+0x33c>)
 80005c8:	1a2d      	subs	r5, r5, r0
 80005ca:	4013      	ands	r3, r2
 80005cc:	075a      	lsls	r2, r3, #29
 80005ce:	d004      	beq.n	80005da <__aeabi_fadd+0xfe>
 80005d0:	220f      	movs	r2, #15
 80005d2:	401a      	ands	r2, r3
 80005d4:	2a04      	cmp	r2, #4
 80005d6:	d000      	beq.n	80005da <__aeabi_fadd+0xfe>
 80005d8:	3304      	adds	r3, #4
 80005da:	015a      	lsls	r2, r3, #5
 80005dc:	d53c      	bpl.n	8000658 <__aeabi_fadd+0x17c>
 80005de:	1c68      	adds	r0, r5, #1
 80005e0:	2dfe      	cmp	r5, #254	; 0xfe
 80005e2:	d02b      	beq.n	800063c <__aeabi_fadd+0x160>
 80005e4:	019b      	lsls	r3, r3, #6
 80005e6:	0a5e      	lsrs	r6, r3, #9
 80005e8:	b2c0      	uxtb	r0, r0
 80005ea:	05c0      	lsls	r0, r0, #23
 80005ec:	4330      	orrs	r0, r6
 80005ee:	07e4      	lsls	r4, r4, #31
 80005f0:	4320      	orrs	r0, r4
 80005f2:	bcc0      	pop	{r6, r7}
 80005f4:	46b9      	mov	r9, r7
 80005f6:	46b0      	mov	r8, r6
 80005f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80005fa:	20fe      	movs	r0, #254	; 0xfe
 80005fc:	1c6a      	adds	r2, r5, #1
 80005fe:	4210      	tst	r0, r2
 8000600:	d172      	bne.n	80006e8 <__aeabi_fadd+0x20c>
 8000602:	2d00      	cmp	r5, #0
 8000604:	d000      	beq.n	8000608 <__aeabi_fadd+0x12c>
 8000606:	e0ae      	b.n	8000766 <__aeabi_fadd+0x28a>
 8000608:	2f00      	cmp	r7, #0
 800060a:	d100      	bne.n	800060e <__aeabi_fadd+0x132>
 800060c:	e0ec      	b.n	80007e8 <__aeabi_fadd+0x30c>
 800060e:	4663      	mov	r3, ip
 8000610:	2000      	movs	r0, #0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d0e9      	beq.n	80005ea <__aeabi_fadd+0x10e>
 8000616:	1afb      	subs	r3, r7, r3
 8000618:	015a      	lsls	r2, r3, #5
 800061a:	d400      	bmi.n	800061e <__aeabi_fadd+0x142>
 800061c:	e0f3      	b.n	8000806 <__aeabi_fadd+0x32a>
 800061e:	4663      	mov	r3, ip
 8000620:	000c      	movs	r4, r1
 8000622:	1bdb      	subs	r3, r3, r7
 8000624:	e7d2      	b.n	80005cc <__aeabi_fadd+0xf0>
 8000626:	4661      	mov	r1, ip
 8000628:	2900      	cmp	r1, #0
 800062a:	d05b      	beq.n	80006e4 <__aeabi_fadd+0x208>
 800062c:	1e51      	subs	r1, r2, #1
 800062e:	2a01      	cmp	r2, #1
 8000630:	d100      	bne.n	8000634 <__aeabi_fadd+0x158>
 8000632:	e0a7      	b.n	8000784 <__aeabi_fadd+0x2a8>
 8000634:	2aff      	cmp	r2, #255	; 0xff
 8000636:	d022      	beq.n	800067e <__aeabi_fadd+0x1a2>
 8000638:	000a      	movs	r2, r1
 800063a:	e799      	b.n	8000570 <__aeabi_fadd+0x94>
 800063c:	20ff      	movs	r0, #255	; 0xff
 800063e:	2600      	movs	r6, #0
 8000640:	e7d3      	b.n	80005ea <__aeabi_fadd+0x10e>
 8000642:	21fe      	movs	r1, #254	; 0xfe
 8000644:	1c6a      	adds	r2, r5, #1
 8000646:	4211      	tst	r1, r2
 8000648:	d073      	beq.n	8000732 <__aeabi_fadd+0x256>
 800064a:	2aff      	cmp	r2, #255	; 0xff
 800064c:	d0f6      	beq.n	800063c <__aeabi_fadd+0x160>
 800064e:	0015      	movs	r5, r2
 8000650:	4467      	add	r7, ip
 8000652:	087b      	lsrs	r3, r7, #1
 8000654:	075a      	lsls	r2, r3, #29
 8000656:	d1bb      	bne.n	80005d0 <__aeabi_fadd+0xf4>
 8000658:	08db      	lsrs	r3, r3, #3
 800065a:	2dff      	cmp	r5, #255	; 0xff
 800065c:	d00f      	beq.n	800067e <__aeabi_fadd+0x1a2>
 800065e:	025b      	lsls	r3, r3, #9
 8000660:	0a5e      	lsrs	r6, r3, #9
 8000662:	b2e8      	uxtb	r0, r5
 8000664:	e7c1      	b.n	80005ea <__aeabi_fadd+0x10e>
 8000666:	4662      	mov	r2, ip
 8000668:	2a00      	cmp	r2, #0
 800066a:	d008      	beq.n	800067e <__aeabi_fadd+0x1a2>
 800066c:	2280      	movs	r2, #128	; 0x80
 800066e:	03d2      	lsls	r2, r2, #15
 8000670:	4213      	tst	r3, r2
 8000672:	d004      	beq.n	800067e <__aeabi_fadd+0x1a2>
 8000674:	4640      	mov	r0, r8
 8000676:	4210      	tst	r0, r2
 8000678:	d101      	bne.n	800067e <__aeabi_fadd+0x1a2>
 800067a:	000c      	movs	r4, r1
 800067c:	4643      	mov	r3, r8
 800067e:	2b00      	cmp	r3, #0
 8000680:	d0dc      	beq.n	800063c <__aeabi_fadd+0x160>
 8000682:	2680      	movs	r6, #128	; 0x80
 8000684:	03f6      	lsls	r6, r6, #15
 8000686:	431e      	orrs	r6, r3
 8000688:	0276      	lsls	r6, r6, #9
 800068a:	20ff      	movs	r0, #255	; 0xff
 800068c:	0a76      	lsrs	r6, r6, #9
 800068e:	e7ac      	b.n	80005ea <__aeabi_fadd+0x10e>
 8000690:	2a00      	cmp	r2, #0
 8000692:	d0d6      	beq.n	8000642 <__aeabi_fadd+0x166>
 8000694:	1b42      	subs	r2, r0, r5
 8000696:	2d00      	cmp	r5, #0
 8000698:	d05c      	beq.n	8000754 <__aeabi_fadd+0x278>
 800069a:	28ff      	cmp	r0, #255	; 0xff
 800069c:	d0ee      	beq.n	800067c <__aeabi_fadd+0x1a0>
 800069e:	2380      	movs	r3, #128	; 0x80
 80006a0:	04db      	lsls	r3, r3, #19
 80006a2:	431f      	orrs	r7, r3
 80006a4:	2a1b      	cmp	r2, #27
 80006a6:	dc00      	bgt.n	80006aa <__aeabi_fadd+0x1ce>
 80006a8:	e082      	b.n	80007b0 <__aeabi_fadd+0x2d4>
 80006aa:	2301      	movs	r3, #1
 80006ac:	464d      	mov	r5, r9
 80006ae:	4463      	add	r3, ip
 80006b0:	e763      	b.n	800057a <__aeabi_fadd+0x9e>
 80006b2:	2220      	movs	r2, #32
 80006b4:	1b40      	subs	r0, r0, r5
 80006b6:	3001      	adds	r0, #1
 80006b8:	1a12      	subs	r2, r2, r0
 80006ba:	0019      	movs	r1, r3
 80006bc:	4093      	lsls	r3, r2
 80006be:	40c1      	lsrs	r1, r0
 80006c0:	1e5a      	subs	r2, r3, #1
 80006c2:	4193      	sbcs	r3, r2
 80006c4:	2500      	movs	r5, #0
 80006c6:	430b      	orrs	r3, r1
 80006c8:	e780      	b.n	80005cc <__aeabi_fadd+0xf0>
 80006ca:	2320      	movs	r3, #32
 80006cc:	4661      	mov	r1, ip
 80006ce:	1a1b      	subs	r3, r3, r0
 80006d0:	4099      	lsls	r1, r3
 80006d2:	4662      	mov	r2, ip
 80006d4:	000b      	movs	r3, r1
 80006d6:	40c2      	lsrs	r2, r0
 80006d8:	1e59      	subs	r1, r3, #1
 80006da:	418b      	sbcs	r3, r1
 80006dc:	4313      	orrs	r3, r2
 80006de:	e764      	b.n	80005aa <__aeabi_fadd+0xce>
 80006e0:	000c      	movs	r4, r1
 80006e2:	4643      	mov	r3, r8
 80006e4:	0015      	movs	r5, r2
 80006e6:	e7b8      	b.n	800065a <__aeabi_fadd+0x17e>
 80006e8:	4663      	mov	r3, ip
 80006ea:	1afe      	subs	r6, r7, r3
 80006ec:	0173      	lsls	r3, r6, #5
 80006ee:	d445      	bmi.n	800077c <__aeabi_fadd+0x2a0>
 80006f0:	2e00      	cmp	r6, #0
 80006f2:	d000      	beq.n	80006f6 <__aeabi_fadd+0x21a>
 80006f4:	e75e      	b.n	80005b4 <__aeabi_fadd+0xd8>
 80006f6:	2400      	movs	r4, #0
 80006f8:	2000      	movs	r0, #0
 80006fa:	2600      	movs	r6, #0
 80006fc:	e775      	b.n	80005ea <__aeabi_fadd+0x10e>
 80006fe:	2bff      	cmp	r3, #255	; 0xff
 8000700:	d0bb      	beq.n	800067a <__aeabi_fadd+0x19e>
 8000702:	2380      	movs	r3, #128	; 0x80
 8000704:	04db      	lsls	r3, r3, #19
 8000706:	431f      	orrs	r7, r3
 8000708:	2a1b      	cmp	r2, #27
 800070a:	dd47      	ble.n	800079c <__aeabi_fadd+0x2c0>
 800070c:	2301      	movs	r3, #1
 800070e:	4662      	mov	r2, ip
 8000710:	000c      	movs	r4, r1
 8000712:	464d      	mov	r5, r9
 8000714:	1ad3      	subs	r3, r2, r3
 8000716:	e749      	b.n	80005ac <__aeabi_fadd+0xd0>
 8000718:	0005      	movs	r5, r0
 800071a:	e79e      	b.n	800065a <__aeabi_fadd+0x17e>
 800071c:	4661      	mov	r1, ip
 800071e:	2320      	movs	r3, #32
 8000720:	40d1      	lsrs	r1, r2
 8000722:	1a9b      	subs	r3, r3, r2
 8000724:	4662      	mov	r2, ip
 8000726:	409a      	lsls	r2, r3
 8000728:	0013      	movs	r3, r2
 800072a:	1e5a      	subs	r2, r3, #1
 800072c:	4193      	sbcs	r3, r2
 800072e:	430b      	orrs	r3, r1
 8000730:	e722      	b.n	8000578 <__aeabi_fadd+0x9c>
 8000732:	2d00      	cmp	r5, #0
 8000734:	d146      	bne.n	80007c4 <__aeabi_fadd+0x2e8>
 8000736:	2f00      	cmp	r7, #0
 8000738:	d062      	beq.n	8000800 <__aeabi_fadd+0x324>
 800073a:	4663      	mov	r3, ip
 800073c:	2000      	movs	r0, #0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d100      	bne.n	8000744 <__aeabi_fadd+0x268>
 8000742:	e752      	b.n	80005ea <__aeabi_fadd+0x10e>
 8000744:	003b      	movs	r3, r7
 8000746:	4463      	add	r3, ip
 8000748:	015a      	lsls	r2, r3, #5
 800074a:	d583      	bpl.n	8000654 <__aeabi_fadd+0x178>
 800074c:	4a32      	ldr	r2, [pc, #200]	; (8000818 <__aeabi_fadd+0x33c>)
 800074e:	3501      	adds	r5, #1
 8000750:	4013      	ands	r3, r2
 8000752:	e77f      	b.n	8000654 <__aeabi_fadd+0x178>
 8000754:	2f00      	cmp	r7, #0
 8000756:	d0c4      	beq.n	80006e2 <__aeabi_fadd+0x206>
 8000758:	1e53      	subs	r3, r2, #1
 800075a:	2a01      	cmp	r2, #1
 800075c:	d012      	beq.n	8000784 <__aeabi_fadd+0x2a8>
 800075e:	2aff      	cmp	r2, #255	; 0xff
 8000760:	d08c      	beq.n	800067c <__aeabi_fadd+0x1a0>
 8000762:	001a      	movs	r2, r3
 8000764:	e79e      	b.n	80006a4 <__aeabi_fadd+0x1c8>
 8000766:	2f00      	cmp	r7, #0
 8000768:	d000      	beq.n	800076c <__aeabi_fadd+0x290>
 800076a:	e77c      	b.n	8000666 <__aeabi_fadd+0x18a>
 800076c:	4663      	mov	r3, ip
 800076e:	2b00      	cmp	r3, #0
 8000770:	d183      	bne.n	800067a <__aeabi_fadd+0x19e>
 8000772:	2680      	movs	r6, #128	; 0x80
 8000774:	2400      	movs	r4, #0
 8000776:	20ff      	movs	r0, #255	; 0xff
 8000778:	03f6      	lsls	r6, r6, #15
 800077a:	e736      	b.n	80005ea <__aeabi_fadd+0x10e>
 800077c:	4663      	mov	r3, ip
 800077e:	000c      	movs	r4, r1
 8000780:	1bde      	subs	r6, r3, r7
 8000782:	e717      	b.n	80005b4 <__aeabi_fadd+0xd8>
 8000784:	003b      	movs	r3, r7
 8000786:	4463      	add	r3, ip
 8000788:	2501      	movs	r5, #1
 800078a:	015a      	lsls	r2, r3, #5
 800078c:	d400      	bmi.n	8000790 <__aeabi_fadd+0x2b4>
 800078e:	e761      	b.n	8000654 <__aeabi_fadd+0x178>
 8000790:	2502      	movs	r5, #2
 8000792:	e6f7      	b.n	8000584 <__aeabi_fadd+0xa8>
 8000794:	4663      	mov	r3, ip
 8000796:	2501      	movs	r5, #1
 8000798:	1afb      	subs	r3, r7, r3
 800079a:	e707      	b.n	80005ac <__aeabi_fadd+0xd0>
 800079c:	2320      	movs	r3, #32
 800079e:	1a9b      	subs	r3, r3, r2
 80007a0:	0038      	movs	r0, r7
 80007a2:	409f      	lsls	r7, r3
 80007a4:	003b      	movs	r3, r7
 80007a6:	40d0      	lsrs	r0, r2
 80007a8:	1e5a      	subs	r2, r3, #1
 80007aa:	4193      	sbcs	r3, r2
 80007ac:	4303      	orrs	r3, r0
 80007ae:	e7ae      	b.n	800070e <__aeabi_fadd+0x232>
 80007b0:	2320      	movs	r3, #32
 80007b2:	1a9b      	subs	r3, r3, r2
 80007b4:	0039      	movs	r1, r7
 80007b6:	409f      	lsls	r7, r3
 80007b8:	003b      	movs	r3, r7
 80007ba:	40d1      	lsrs	r1, r2
 80007bc:	1e5a      	subs	r2, r3, #1
 80007be:	4193      	sbcs	r3, r2
 80007c0:	430b      	orrs	r3, r1
 80007c2:	e773      	b.n	80006ac <__aeabi_fadd+0x1d0>
 80007c4:	2f00      	cmp	r7, #0
 80007c6:	d100      	bne.n	80007ca <__aeabi_fadd+0x2ee>
 80007c8:	e758      	b.n	800067c <__aeabi_fadd+0x1a0>
 80007ca:	4662      	mov	r2, ip
 80007cc:	2a00      	cmp	r2, #0
 80007ce:	d100      	bne.n	80007d2 <__aeabi_fadd+0x2f6>
 80007d0:	e755      	b.n	800067e <__aeabi_fadd+0x1a2>
 80007d2:	2280      	movs	r2, #128	; 0x80
 80007d4:	03d2      	lsls	r2, r2, #15
 80007d6:	4213      	tst	r3, r2
 80007d8:	d100      	bne.n	80007dc <__aeabi_fadd+0x300>
 80007da:	e750      	b.n	800067e <__aeabi_fadd+0x1a2>
 80007dc:	4641      	mov	r1, r8
 80007de:	4211      	tst	r1, r2
 80007e0:	d000      	beq.n	80007e4 <__aeabi_fadd+0x308>
 80007e2:	e74c      	b.n	800067e <__aeabi_fadd+0x1a2>
 80007e4:	4643      	mov	r3, r8
 80007e6:	e74a      	b.n	800067e <__aeabi_fadd+0x1a2>
 80007e8:	4663      	mov	r3, ip
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d083      	beq.n	80006f6 <__aeabi_fadd+0x21a>
 80007ee:	000c      	movs	r4, r1
 80007f0:	4646      	mov	r6, r8
 80007f2:	2000      	movs	r0, #0
 80007f4:	e6f9      	b.n	80005ea <__aeabi_fadd+0x10e>
 80007f6:	4663      	mov	r3, ip
 80007f8:	000c      	movs	r4, r1
 80007fa:	1bdb      	subs	r3, r3, r7
 80007fc:	3501      	adds	r5, #1
 80007fe:	e6d5      	b.n	80005ac <__aeabi_fadd+0xd0>
 8000800:	4646      	mov	r6, r8
 8000802:	2000      	movs	r0, #0
 8000804:	e6f1      	b.n	80005ea <__aeabi_fadd+0x10e>
 8000806:	2b00      	cmp	r3, #0
 8000808:	d000      	beq.n	800080c <__aeabi_fadd+0x330>
 800080a:	e723      	b.n	8000654 <__aeabi_fadd+0x178>
 800080c:	2400      	movs	r4, #0
 800080e:	2600      	movs	r6, #0
 8000810:	e6eb      	b.n	80005ea <__aeabi_fadd+0x10e>
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	7dffffff 	.word	0x7dffffff
 8000818:	fbffffff 	.word	0xfbffffff

0800081c <__aeabi_fdiv>:
 800081c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800081e:	464f      	mov	r7, r9
 8000820:	4646      	mov	r6, r8
 8000822:	46d6      	mov	lr, sl
 8000824:	0245      	lsls	r5, r0, #9
 8000826:	b5c0      	push	{r6, r7, lr}
 8000828:	0047      	lsls	r7, r0, #1
 800082a:	1c0c      	adds	r4, r1, #0
 800082c:	0a6d      	lsrs	r5, r5, #9
 800082e:	0e3f      	lsrs	r7, r7, #24
 8000830:	0fc6      	lsrs	r6, r0, #31
 8000832:	2f00      	cmp	r7, #0
 8000834:	d100      	bne.n	8000838 <__aeabi_fdiv+0x1c>
 8000836:	e06f      	b.n	8000918 <__aeabi_fdiv+0xfc>
 8000838:	2fff      	cmp	r7, #255	; 0xff
 800083a:	d100      	bne.n	800083e <__aeabi_fdiv+0x22>
 800083c:	e074      	b.n	8000928 <__aeabi_fdiv+0x10c>
 800083e:	2300      	movs	r3, #0
 8000840:	2280      	movs	r2, #128	; 0x80
 8000842:	4699      	mov	r9, r3
 8000844:	469a      	mov	sl, r3
 8000846:	00ed      	lsls	r5, r5, #3
 8000848:	04d2      	lsls	r2, r2, #19
 800084a:	4315      	orrs	r5, r2
 800084c:	3f7f      	subs	r7, #127	; 0x7f
 800084e:	0263      	lsls	r3, r4, #9
 8000850:	0a5b      	lsrs	r3, r3, #9
 8000852:	4698      	mov	r8, r3
 8000854:	0063      	lsls	r3, r4, #1
 8000856:	0e1b      	lsrs	r3, r3, #24
 8000858:	0fe4      	lsrs	r4, r4, #31
 800085a:	2b00      	cmp	r3, #0
 800085c:	d04d      	beq.n	80008fa <__aeabi_fdiv+0xde>
 800085e:	2bff      	cmp	r3, #255	; 0xff
 8000860:	d045      	beq.n	80008ee <__aeabi_fdiv+0xd2>
 8000862:	4642      	mov	r2, r8
 8000864:	2180      	movs	r1, #128	; 0x80
 8000866:	00d2      	lsls	r2, r2, #3
 8000868:	04c9      	lsls	r1, r1, #19
 800086a:	4311      	orrs	r1, r2
 800086c:	4688      	mov	r8, r1
 800086e:	2200      	movs	r2, #0
 8000870:	3b7f      	subs	r3, #127	; 0x7f
 8000872:	0031      	movs	r1, r6
 8000874:	1aff      	subs	r7, r7, r3
 8000876:	464b      	mov	r3, r9
 8000878:	4061      	eors	r1, r4
 800087a:	b2c9      	uxtb	r1, r1
 800087c:	2b0f      	cmp	r3, #15
 800087e:	d900      	bls.n	8000882 <__aeabi_fdiv+0x66>
 8000880:	e0b8      	b.n	80009f4 <__aeabi_fdiv+0x1d8>
 8000882:	4870      	ldr	r0, [pc, #448]	; (8000a44 <__aeabi_fdiv+0x228>)
 8000884:	009b      	lsls	r3, r3, #2
 8000886:	58c3      	ldr	r3, [r0, r3]
 8000888:	469f      	mov	pc, r3
 800088a:	2300      	movs	r3, #0
 800088c:	4698      	mov	r8, r3
 800088e:	0026      	movs	r6, r4
 8000890:	4645      	mov	r5, r8
 8000892:	4692      	mov	sl, r2
 8000894:	4653      	mov	r3, sl
 8000896:	2b02      	cmp	r3, #2
 8000898:	d100      	bne.n	800089c <__aeabi_fdiv+0x80>
 800089a:	e08d      	b.n	80009b8 <__aeabi_fdiv+0x19c>
 800089c:	2b03      	cmp	r3, #3
 800089e:	d100      	bne.n	80008a2 <__aeabi_fdiv+0x86>
 80008a0:	e0a1      	b.n	80009e6 <__aeabi_fdiv+0x1ca>
 80008a2:	2b01      	cmp	r3, #1
 80008a4:	d018      	beq.n	80008d8 <__aeabi_fdiv+0xbc>
 80008a6:	003b      	movs	r3, r7
 80008a8:	337f      	adds	r3, #127	; 0x7f
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	dd6d      	ble.n	800098a <__aeabi_fdiv+0x16e>
 80008ae:	076a      	lsls	r2, r5, #29
 80008b0:	d004      	beq.n	80008bc <__aeabi_fdiv+0xa0>
 80008b2:	220f      	movs	r2, #15
 80008b4:	402a      	ands	r2, r5
 80008b6:	2a04      	cmp	r2, #4
 80008b8:	d000      	beq.n	80008bc <__aeabi_fdiv+0xa0>
 80008ba:	3504      	adds	r5, #4
 80008bc:	012a      	lsls	r2, r5, #4
 80008be:	d503      	bpl.n	80008c8 <__aeabi_fdiv+0xac>
 80008c0:	4b61      	ldr	r3, [pc, #388]	; (8000a48 <__aeabi_fdiv+0x22c>)
 80008c2:	401d      	ands	r5, r3
 80008c4:	003b      	movs	r3, r7
 80008c6:	3380      	adds	r3, #128	; 0x80
 80008c8:	2bfe      	cmp	r3, #254	; 0xfe
 80008ca:	dd00      	ble.n	80008ce <__aeabi_fdiv+0xb2>
 80008cc:	e074      	b.n	80009b8 <__aeabi_fdiv+0x19c>
 80008ce:	01aa      	lsls	r2, r5, #6
 80008d0:	0a52      	lsrs	r2, r2, #9
 80008d2:	b2d8      	uxtb	r0, r3
 80008d4:	e002      	b.n	80008dc <__aeabi_fdiv+0xc0>
 80008d6:	000e      	movs	r6, r1
 80008d8:	2000      	movs	r0, #0
 80008da:	2200      	movs	r2, #0
 80008dc:	05c0      	lsls	r0, r0, #23
 80008de:	07f6      	lsls	r6, r6, #31
 80008e0:	4310      	orrs	r0, r2
 80008e2:	4330      	orrs	r0, r6
 80008e4:	bce0      	pop	{r5, r6, r7}
 80008e6:	46ba      	mov	sl, r7
 80008e8:	46b1      	mov	r9, r6
 80008ea:	46a8      	mov	r8, r5
 80008ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008ee:	4643      	mov	r3, r8
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d13f      	bne.n	8000974 <__aeabi_fdiv+0x158>
 80008f4:	2202      	movs	r2, #2
 80008f6:	3fff      	subs	r7, #255	; 0xff
 80008f8:	e003      	b.n	8000902 <__aeabi_fdiv+0xe6>
 80008fa:	4643      	mov	r3, r8
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d12d      	bne.n	800095c <__aeabi_fdiv+0x140>
 8000900:	2201      	movs	r2, #1
 8000902:	0031      	movs	r1, r6
 8000904:	464b      	mov	r3, r9
 8000906:	4061      	eors	r1, r4
 8000908:	b2c9      	uxtb	r1, r1
 800090a:	4313      	orrs	r3, r2
 800090c:	2b0f      	cmp	r3, #15
 800090e:	d838      	bhi.n	8000982 <__aeabi_fdiv+0x166>
 8000910:	484e      	ldr	r0, [pc, #312]	; (8000a4c <__aeabi_fdiv+0x230>)
 8000912:	009b      	lsls	r3, r3, #2
 8000914:	58c3      	ldr	r3, [r0, r3]
 8000916:	469f      	mov	pc, r3
 8000918:	2d00      	cmp	r5, #0
 800091a:	d113      	bne.n	8000944 <__aeabi_fdiv+0x128>
 800091c:	2304      	movs	r3, #4
 800091e:	4699      	mov	r9, r3
 8000920:	3b03      	subs	r3, #3
 8000922:	2700      	movs	r7, #0
 8000924:	469a      	mov	sl, r3
 8000926:	e792      	b.n	800084e <__aeabi_fdiv+0x32>
 8000928:	2d00      	cmp	r5, #0
 800092a:	d105      	bne.n	8000938 <__aeabi_fdiv+0x11c>
 800092c:	2308      	movs	r3, #8
 800092e:	4699      	mov	r9, r3
 8000930:	3b06      	subs	r3, #6
 8000932:	27ff      	movs	r7, #255	; 0xff
 8000934:	469a      	mov	sl, r3
 8000936:	e78a      	b.n	800084e <__aeabi_fdiv+0x32>
 8000938:	230c      	movs	r3, #12
 800093a:	4699      	mov	r9, r3
 800093c:	3b09      	subs	r3, #9
 800093e:	27ff      	movs	r7, #255	; 0xff
 8000940:	469a      	mov	sl, r3
 8000942:	e784      	b.n	800084e <__aeabi_fdiv+0x32>
 8000944:	0028      	movs	r0, r5
 8000946:	f002 fb13 	bl	8002f70 <__clzsi2>
 800094a:	2776      	movs	r7, #118	; 0x76
 800094c:	1f43      	subs	r3, r0, #5
 800094e:	409d      	lsls	r5, r3
 8000950:	2300      	movs	r3, #0
 8000952:	427f      	negs	r7, r7
 8000954:	4699      	mov	r9, r3
 8000956:	469a      	mov	sl, r3
 8000958:	1a3f      	subs	r7, r7, r0
 800095a:	e778      	b.n	800084e <__aeabi_fdiv+0x32>
 800095c:	4640      	mov	r0, r8
 800095e:	f002 fb07 	bl	8002f70 <__clzsi2>
 8000962:	4642      	mov	r2, r8
 8000964:	1f43      	subs	r3, r0, #5
 8000966:	409a      	lsls	r2, r3
 8000968:	2376      	movs	r3, #118	; 0x76
 800096a:	425b      	negs	r3, r3
 800096c:	4690      	mov	r8, r2
 800096e:	1a1b      	subs	r3, r3, r0
 8000970:	2200      	movs	r2, #0
 8000972:	e77e      	b.n	8000872 <__aeabi_fdiv+0x56>
 8000974:	2303      	movs	r3, #3
 8000976:	464a      	mov	r2, r9
 8000978:	431a      	orrs	r2, r3
 800097a:	4691      	mov	r9, r2
 800097c:	33fc      	adds	r3, #252	; 0xfc
 800097e:	2203      	movs	r2, #3
 8000980:	e777      	b.n	8000872 <__aeabi_fdiv+0x56>
 8000982:	000e      	movs	r6, r1
 8000984:	20ff      	movs	r0, #255	; 0xff
 8000986:	2200      	movs	r2, #0
 8000988:	e7a8      	b.n	80008dc <__aeabi_fdiv+0xc0>
 800098a:	2201      	movs	r2, #1
 800098c:	1ad3      	subs	r3, r2, r3
 800098e:	2b1b      	cmp	r3, #27
 8000990:	dca2      	bgt.n	80008d8 <__aeabi_fdiv+0xbc>
 8000992:	379e      	adds	r7, #158	; 0x9e
 8000994:	002a      	movs	r2, r5
 8000996:	40bd      	lsls	r5, r7
 8000998:	40da      	lsrs	r2, r3
 800099a:	1e6b      	subs	r3, r5, #1
 800099c:	419d      	sbcs	r5, r3
 800099e:	4315      	orrs	r5, r2
 80009a0:	076a      	lsls	r2, r5, #29
 80009a2:	d004      	beq.n	80009ae <__aeabi_fdiv+0x192>
 80009a4:	220f      	movs	r2, #15
 80009a6:	402a      	ands	r2, r5
 80009a8:	2a04      	cmp	r2, #4
 80009aa:	d000      	beq.n	80009ae <__aeabi_fdiv+0x192>
 80009ac:	3504      	adds	r5, #4
 80009ae:	016a      	lsls	r2, r5, #5
 80009b0:	d544      	bpl.n	8000a3c <__aeabi_fdiv+0x220>
 80009b2:	2001      	movs	r0, #1
 80009b4:	2200      	movs	r2, #0
 80009b6:	e791      	b.n	80008dc <__aeabi_fdiv+0xc0>
 80009b8:	20ff      	movs	r0, #255	; 0xff
 80009ba:	2200      	movs	r2, #0
 80009bc:	e78e      	b.n	80008dc <__aeabi_fdiv+0xc0>
 80009be:	2280      	movs	r2, #128	; 0x80
 80009c0:	2600      	movs	r6, #0
 80009c2:	20ff      	movs	r0, #255	; 0xff
 80009c4:	03d2      	lsls	r2, r2, #15
 80009c6:	e789      	b.n	80008dc <__aeabi_fdiv+0xc0>
 80009c8:	2300      	movs	r3, #0
 80009ca:	4698      	mov	r8, r3
 80009cc:	2280      	movs	r2, #128	; 0x80
 80009ce:	03d2      	lsls	r2, r2, #15
 80009d0:	4215      	tst	r5, r2
 80009d2:	d008      	beq.n	80009e6 <__aeabi_fdiv+0x1ca>
 80009d4:	4643      	mov	r3, r8
 80009d6:	4213      	tst	r3, r2
 80009d8:	d105      	bne.n	80009e6 <__aeabi_fdiv+0x1ca>
 80009da:	431a      	orrs	r2, r3
 80009dc:	0252      	lsls	r2, r2, #9
 80009de:	0026      	movs	r6, r4
 80009e0:	20ff      	movs	r0, #255	; 0xff
 80009e2:	0a52      	lsrs	r2, r2, #9
 80009e4:	e77a      	b.n	80008dc <__aeabi_fdiv+0xc0>
 80009e6:	2280      	movs	r2, #128	; 0x80
 80009e8:	03d2      	lsls	r2, r2, #15
 80009ea:	432a      	orrs	r2, r5
 80009ec:	0252      	lsls	r2, r2, #9
 80009ee:	20ff      	movs	r0, #255	; 0xff
 80009f0:	0a52      	lsrs	r2, r2, #9
 80009f2:	e773      	b.n	80008dc <__aeabi_fdiv+0xc0>
 80009f4:	4642      	mov	r2, r8
 80009f6:	016b      	lsls	r3, r5, #5
 80009f8:	0155      	lsls	r5, r2, #5
 80009fa:	42ab      	cmp	r3, r5
 80009fc:	d21a      	bcs.n	8000a34 <__aeabi_fdiv+0x218>
 80009fe:	201b      	movs	r0, #27
 8000a00:	2200      	movs	r2, #0
 8000a02:	3f01      	subs	r7, #1
 8000a04:	2601      	movs	r6, #1
 8000a06:	001c      	movs	r4, r3
 8000a08:	0052      	lsls	r2, r2, #1
 8000a0a:	005b      	lsls	r3, r3, #1
 8000a0c:	2c00      	cmp	r4, #0
 8000a0e:	db01      	blt.n	8000a14 <__aeabi_fdiv+0x1f8>
 8000a10:	429d      	cmp	r5, r3
 8000a12:	d801      	bhi.n	8000a18 <__aeabi_fdiv+0x1fc>
 8000a14:	1b5b      	subs	r3, r3, r5
 8000a16:	4332      	orrs	r2, r6
 8000a18:	3801      	subs	r0, #1
 8000a1a:	2800      	cmp	r0, #0
 8000a1c:	d1f3      	bne.n	8000a06 <__aeabi_fdiv+0x1ea>
 8000a1e:	1e58      	subs	r0, r3, #1
 8000a20:	4183      	sbcs	r3, r0
 8000a22:	4313      	orrs	r3, r2
 8000a24:	001d      	movs	r5, r3
 8000a26:	003b      	movs	r3, r7
 8000a28:	337f      	adds	r3, #127	; 0x7f
 8000a2a:	000e      	movs	r6, r1
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	dd00      	ble.n	8000a32 <__aeabi_fdiv+0x216>
 8000a30:	e73d      	b.n	80008ae <__aeabi_fdiv+0x92>
 8000a32:	e7aa      	b.n	800098a <__aeabi_fdiv+0x16e>
 8000a34:	201a      	movs	r0, #26
 8000a36:	2201      	movs	r2, #1
 8000a38:	1b5b      	subs	r3, r3, r5
 8000a3a:	e7e3      	b.n	8000a04 <__aeabi_fdiv+0x1e8>
 8000a3c:	01aa      	lsls	r2, r5, #6
 8000a3e:	2000      	movs	r0, #0
 8000a40:	0a52      	lsrs	r2, r2, #9
 8000a42:	e74b      	b.n	80008dc <__aeabi_fdiv+0xc0>
 8000a44:	080090d8 	.word	0x080090d8
 8000a48:	f7ffffff 	.word	0xf7ffffff
 8000a4c:	08009118 	.word	0x08009118

08000a50 <__eqsf2>:
 8000a50:	b570      	push	{r4, r5, r6, lr}
 8000a52:	0042      	lsls	r2, r0, #1
 8000a54:	0245      	lsls	r5, r0, #9
 8000a56:	024e      	lsls	r6, r1, #9
 8000a58:	004c      	lsls	r4, r1, #1
 8000a5a:	0fc3      	lsrs	r3, r0, #31
 8000a5c:	0a6d      	lsrs	r5, r5, #9
 8000a5e:	2001      	movs	r0, #1
 8000a60:	0e12      	lsrs	r2, r2, #24
 8000a62:	0a76      	lsrs	r6, r6, #9
 8000a64:	0e24      	lsrs	r4, r4, #24
 8000a66:	0fc9      	lsrs	r1, r1, #31
 8000a68:	2aff      	cmp	r2, #255	; 0xff
 8000a6a:	d006      	beq.n	8000a7a <__eqsf2+0x2a>
 8000a6c:	2cff      	cmp	r4, #255	; 0xff
 8000a6e:	d003      	beq.n	8000a78 <__eqsf2+0x28>
 8000a70:	42a2      	cmp	r2, r4
 8000a72:	d101      	bne.n	8000a78 <__eqsf2+0x28>
 8000a74:	42b5      	cmp	r5, r6
 8000a76:	d006      	beq.n	8000a86 <__eqsf2+0x36>
 8000a78:	bd70      	pop	{r4, r5, r6, pc}
 8000a7a:	2d00      	cmp	r5, #0
 8000a7c:	d1fc      	bne.n	8000a78 <__eqsf2+0x28>
 8000a7e:	2cff      	cmp	r4, #255	; 0xff
 8000a80:	d1fa      	bne.n	8000a78 <__eqsf2+0x28>
 8000a82:	2e00      	cmp	r6, #0
 8000a84:	d1f8      	bne.n	8000a78 <__eqsf2+0x28>
 8000a86:	428b      	cmp	r3, r1
 8000a88:	d006      	beq.n	8000a98 <__eqsf2+0x48>
 8000a8a:	2001      	movs	r0, #1
 8000a8c:	2a00      	cmp	r2, #0
 8000a8e:	d1f3      	bne.n	8000a78 <__eqsf2+0x28>
 8000a90:	0028      	movs	r0, r5
 8000a92:	1e43      	subs	r3, r0, #1
 8000a94:	4198      	sbcs	r0, r3
 8000a96:	e7ef      	b.n	8000a78 <__eqsf2+0x28>
 8000a98:	2000      	movs	r0, #0
 8000a9a:	e7ed      	b.n	8000a78 <__eqsf2+0x28>

08000a9c <__gesf2>:
 8000a9c:	b570      	push	{r4, r5, r6, lr}
 8000a9e:	0042      	lsls	r2, r0, #1
 8000aa0:	0245      	lsls	r5, r0, #9
 8000aa2:	024e      	lsls	r6, r1, #9
 8000aa4:	004c      	lsls	r4, r1, #1
 8000aa6:	0fc3      	lsrs	r3, r0, #31
 8000aa8:	0a6d      	lsrs	r5, r5, #9
 8000aaa:	0e12      	lsrs	r2, r2, #24
 8000aac:	0a76      	lsrs	r6, r6, #9
 8000aae:	0e24      	lsrs	r4, r4, #24
 8000ab0:	0fc8      	lsrs	r0, r1, #31
 8000ab2:	2aff      	cmp	r2, #255	; 0xff
 8000ab4:	d01b      	beq.n	8000aee <__gesf2+0x52>
 8000ab6:	2cff      	cmp	r4, #255	; 0xff
 8000ab8:	d00e      	beq.n	8000ad8 <__gesf2+0x3c>
 8000aba:	2a00      	cmp	r2, #0
 8000abc:	d11b      	bne.n	8000af6 <__gesf2+0x5a>
 8000abe:	2c00      	cmp	r4, #0
 8000ac0:	d101      	bne.n	8000ac6 <__gesf2+0x2a>
 8000ac2:	2e00      	cmp	r6, #0
 8000ac4:	d01c      	beq.n	8000b00 <__gesf2+0x64>
 8000ac6:	2d00      	cmp	r5, #0
 8000ac8:	d00c      	beq.n	8000ae4 <__gesf2+0x48>
 8000aca:	4283      	cmp	r3, r0
 8000acc:	d01c      	beq.n	8000b08 <__gesf2+0x6c>
 8000ace:	2102      	movs	r1, #2
 8000ad0:	1e58      	subs	r0, r3, #1
 8000ad2:	4008      	ands	r0, r1
 8000ad4:	3801      	subs	r0, #1
 8000ad6:	bd70      	pop	{r4, r5, r6, pc}
 8000ad8:	2e00      	cmp	r6, #0
 8000ada:	d122      	bne.n	8000b22 <__gesf2+0x86>
 8000adc:	2a00      	cmp	r2, #0
 8000ade:	d1f4      	bne.n	8000aca <__gesf2+0x2e>
 8000ae0:	2d00      	cmp	r5, #0
 8000ae2:	d1f2      	bne.n	8000aca <__gesf2+0x2e>
 8000ae4:	2800      	cmp	r0, #0
 8000ae6:	d1f6      	bne.n	8000ad6 <__gesf2+0x3a>
 8000ae8:	2001      	movs	r0, #1
 8000aea:	4240      	negs	r0, r0
 8000aec:	e7f3      	b.n	8000ad6 <__gesf2+0x3a>
 8000aee:	2d00      	cmp	r5, #0
 8000af0:	d117      	bne.n	8000b22 <__gesf2+0x86>
 8000af2:	2cff      	cmp	r4, #255	; 0xff
 8000af4:	d0f0      	beq.n	8000ad8 <__gesf2+0x3c>
 8000af6:	2c00      	cmp	r4, #0
 8000af8:	d1e7      	bne.n	8000aca <__gesf2+0x2e>
 8000afa:	2e00      	cmp	r6, #0
 8000afc:	d1e5      	bne.n	8000aca <__gesf2+0x2e>
 8000afe:	e7e6      	b.n	8000ace <__gesf2+0x32>
 8000b00:	2000      	movs	r0, #0
 8000b02:	2d00      	cmp	r5, #0
 8000b04:	d0e7      	beq.n	8000ad6 <__gesf2+0x3a>
 8000b06:	e7e2      	b.n	8000ace <__gesf2+0x32>
 8000b08:	42a2      	cmp	r2, r4
 8000b0a:	dc05      	bgt.n	8000b18 <__gesf2+0x7c>
 8000b0c:	dbea      	blt.n	8000ae4 <__gesf2+0x48>
 8000b0e:	42b5      	cmp	r5, r6
 8000b10:	d802      	bhi.n	8000b18 <__gesf2+0x7c>
 8000b12:	d3e7      	bcc.n	8000ae4 <__gesf2+0x48>
 8000b14:	2000      	movs	r0, #0
 8000b16:	e7de      	b.n	8000ad6 <__gesf2+0x3a>
 8000b18:	4243      	negs	r3, r0
 8000b1a:	4158      	adcs	r0, r3
 8000b1c:	0040      	lsls	r0, r0, #1
 8000b1e:	3801      	subs	r0, #1
 8000b20:	e7d9      	b.n	8000ad6 <__gesf2+0x3a>
 8000b22:	2002      	movs	r0, #2
 8000b24:	4240      	negs	r0, r0
 8000b26:	e7d6      	b.n	8000ad6 <__gesf2+0x3a>

08000b28 <__lesf2>:
 8000b28:	b570      	push	{r4, r5, r6, lr}
 8000b2a:	0042      	lsls	r2, r0, #1
 8000b2c:	0245      	lsls	r5, r0, #9
 8000b2e:	024e      	lsls	r6, r1, #9
 8000b30:	004c      	lsls	r4, r1, #1
 8000b32:	0fc3      	lsrs	r3, r0, #31
 8000b34:	0a6d      	lsrs	r5, r5, #9
 8000b36:	0e12      	lsrs	r2, r2, #24
 8000b38:	0a76      	lsrs	r6, r6, #9
 8000b3a:	0e24      	lsrs	r4, r4, #24
 8000b3c:	0fc8      	lsrs	r0, r1, #31
 8000b3e:	2aff      	cmp	r2, #255	; 0xff
 8000b40:	d00b      	beq.n	8000b5a <__lesf2+0x32>
 8000b42:	2cff      	cmp	r4, #255	; 0xff
 8000b44:	d00d      	beq.n	8000b62 <__lesf2+0x3a>
 8000b46:	2a00      	cmp	r2, #0
 8000b48:	d11f      	bne.n	8000b8a <__lesf2+0x62>
 8000b4a:	2c00      	cmp	r4, #0
 8000b4c:	d116      	bne.n	8000b7c <__lesf2+0x54>
 8000b4e:	2e00      	cmp	r6, #0
 8000b50:	d114      	bne.n	8000b7c <__lesf2+0x54>
 8000b52:	2000      	movs	r0, #0
 8000b54:	2d00      	cmp	r5, #0
 8000b56:	d010      	beq.n	8000b7a <__lesf2+0x52>
 8000b58:	e009      	b.n	8000b6e <__lesf2+0x46>
 8000b5a:	2d00      	cmp	r5, #0
 8000b5c:	d10c      	bne.n	8000b78 <__lesf2+0x50>
 8000b5e:	2cff      	cmp	r4, #255	; 0xff
 8000b60:	d113      	bne.n	8000b8a <__lesf2+0x62>
 8000b62:	2e00      	cmp	r6, #0
 8000b64:	d108      	bne.n	8000b78 <__lesf2+0x50>
 8000b66:	2a00      	cmp	r2, #0
 8000b68:	d008      	beq.n	8000b7c <__lesf2+0x54>
 8000b6a:	4283      	cmp	r3, r0
 8000b6c:	d012      	beq.n	8000b94 <__lesf2+0x6c>
 8000b6e:	2102      	movs	r1, #2
 8000b70:	1e58      	subs	r0, r3, #1
 8000b72:	4008      	ands	r0, r1
 8000b74:	3801      	subs	r0, #1
 8000b76:	e000      	b.n	8000b7a <__lesf2+0x52>
 8000b78:	2002      	movs	r0, #2
 8000b7a:	bd70      	pop	{r4, r5, r6, pc}
 8000b7c:	2d00      	cmp	r5, #0
 8000b7e:	d1f4      	bne.n	8000b6a <__lesf2+0x42>
 8000b80:	2800      	cmp	r0, #0
 8000b82:	d1fa      	bne.n	8000b7a <__lesf2+0x52>
 8000b84:	2001      	movs	r0, #1
 8000b86:	4240      	negs	r0, r0
 8000b88:	e7f7      	b.n	8000b7a <__lesf2+0x52>
 8000b8a:	2c00      	cmp	r4, #0
 8000b8c:	d1ed      	bne.n	8000b6a <__lesf2+0x42>
 8000b8e:	2e00      	cmp	r6, #0
 8000b90:	d1eb      	bne.n	8000b6a <__lesf2+0x42>
 8000b92:	e7ec      	b.n	8000b6e <__lesf2+0x46>
 8000b94:	42a2      	cmp	r2, r4
 8000b96:	dc05      	bgt.n	8000ba4 <__lesf2+0x7c>
 8000b98:	dbf2      	blt.n	8000b80 <__lesf2+0x58>
 8000b9a:	42b5      	cmp	r5, r6
 8000b9c:	d802      	bhi.n	8000ba4 <__lesf2+0x7c>
 8000b9e:	d3ef      	bcc.n	8000b80 <__lesf2+0x58>
 8000ba0:	2000      	movs	r0, #0
 8000ba2:	e7ea      	b.n	8000b7a <__lesf2+0x52>
 8000ba4:	4243      	negs	r3, r0
 8000ba6:	4158      	adcs	r0, r3
 8000ba8:	0040      	lsls	r0, r0, #1
 8000baa:	3801      	subs	r0, #1
 8000bac:	e7e5      	b.n	8000b7a <__lesf2+0x52>
 8000bae:	46c0      	nop			; (mov r8, r8)

08000bb0 <__aeabi_fmul>:
 8000bb0:	0243      	lsls	r3, r0, #9
 8000bb2:	0a5b      	lsrs	r3, r3, #9
 8000bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bb6:	464f      	mov	r7, r9
 8000bb8:	4646      	mov	r6, r8
 8000bba:	4699      	mov	r9, r3
 8000bbc:	46d6      	mov	lr, sl
 8000bbe:	0fc3      	lsrs	r3, r0, #31
 8000bc0:	0045      	lsls	r5, r0, #1
 8000bc2:	4698      	mov	r8, r3
 8000bc4:	b5c0      	push	{r6, r7, lr}
 8000bc6:	464b      	mov	r3, r9
 8000bc8:	1c0f      	adds	r7, r1, #0
 8000bca:	0e2d      	lsrs	r5, r5, #24
 8000bcc:	d100      	bne.n	8000bd0 <__aeabi_fmul+0x20>
 8000bce:	e0cb      	b.n	8000d68 <__aeabi_fmul+0x1b8>
 8000bd0:	2dff      	cmp	r5, #255	; 0xff
 8000bd2:	d100      	bne.n	8000bd6 <__aeabi_fmul+0x26>
 8000bd4:	e0cf      	b.n	8000d76 <__aeabi_fmul+0x1c6>
 8000bd6:	2280      	movs	r2, #128	; 0x80
 8000bd8:	00db      	lsls	r3, r3, #3
 8000bda:	04d2      	lsls	r2, r2, #19
 8000bdc:	431a      	orrs	r2, r3
 8000bde:	2300      	movs	r3, #0
 8000be0:	4691      	mov	r9, r2
 8000be2:	2600      	movs	r6, #0
 8000be4:	469a      	mov	sl, r3
 8000be6:	3d7f      	subs	r5, #127	; 0x7f
 8000be8:	027c      	lsls	r4, r7, #9
 8000bea:	007b      	lsls	r3, r7, #1
 8000bec:	0a64      	lsrs	r4, r4, #9
 8000bee:	0e1b      	lsrs	r3, r3, #24
 8000bf0:	0fff      	lsrs	r7, r7, #31
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d100      	bne.n	8000bf8 <__aeabi_fmul+0x48>
 8000bf6:	e0a9      	b.n	8000d4c <__aeabi_fmul+0x19c>
 8000bf8:	2bff      	cmp	r3, #255	; 0xff
 8000bfa:	d011      	beq.n	8000c20 <__aeabi_fmul+0x70>
 8000bfc:	2280      	movs	r2, #128	; 0x80
 8000bfe:	00e4      	lsls	r4, r4, #3
 8000c00:	04d2      	lsls	r2, r2, #19
 8000c02:	4314      	orrs	r4, r2
 8000c04:	4642      	mov	r2, r8
 8000c06:	3b7f      	subs	r3, #127	; 0x7f
 8000c08:	195b      	adds	r3, r3, r5
 8000c0a:	407a      	eors	r2, r7
 8000c0c:	2000      	movs	r0, #0
 8000c0e:	b2d2      	uxtb	r2, r2
 8000c10:	1c5d      	adds	r5, r3, #1
 8000c12:	2e0a      	cmp	r6, #10
 8000c14:	dd13      	ble.n	8000c3e <__aeabi_fmul+0x8e>
 8000c16:	003a      	movs	r2, r7
 8000c18:	2e0b      	cmp	r6, #11
 8000c1a:	d047      	beq.n	8000cac <__aeabi_fmul+0xfc>
 8000c1c:	4647      	mov	r7, r8
 8000c1e:	e03f      	b.n	8000ca0 <__aeabi_fmul+0xf0>
 8000c20:	002b      	movs	r3, r5
 8000c22:	33ff      	adds	r3, #255	; 0xff
 8000c24:	2c00      	cmp	r4, #0
 8000c26:	d11e      	bne.n	8000c66 <__aeabi_fmul+0xb6>
 8000c28:	2202      	movs	r2, #2
 8000c2a:	4316      	orrs	r6, r2
 8000c2c:	4642      	mov	r2, r8
 8000c2e:	3501      	adds	r5, #1
 8000c30:	407a      	eors	r2, r7
 8000c32:	b2d2      	uxtb	r2, r2
 8000c34:	35ff      	adds	r5, #255	; 0xff
 8000c36:	2e0a      	cmp	r6, #10
 8000c38:	dd00      	ble.n	8000c3c <__aeabi_fmul+0x8c>
 8000c3a:	e0e4      	b.n	8000e06 <__aeabi_fmul+0x256>
 8000c3c:	2002      	movs	r0, #2
 8000c3e:	2e02      	cmp	r6, #2
 8000c40:	dc1c      	bgt.n	8000c7c <__aeabi_fmul+0xcc>
 8000c42:	3e01      	subs	r6, #1
 8000c44:	2e01      	cmp	r6, #1
 8000c46:	d842      	bhi.n	8000cce <__aeabi_fmul+0x11e>
 8000c48:	2802      	cmp	r0, #2
 8000c4a:	d03d      	beq.n	8000cc8 <__aeabi_fmul+0x118>
 8000c4c:	2801      	cmp	r0, #1
 8000c4e:	d166      	bne.n	8000d1e <__aeabi_fmul+0x16e>
 8000c50:	2000      	movs	r0, #0
 8000c52:	2100      	movs	r1, #0
 8000c54:	05c0      	lsls	r0, r0, #23
 8000c56:	4308      	orrs	r0, r1
 8000c58:	07d2      	lsls	r2, r2, #31
 8000c5a:	4310      	orrs	r0, r2
 8000c5c:	bce0      	pop	{r5, r6, r7}
 8000c5e:	46ba      	mov	sl, r7
 8000c60:	46b1      	mov	r9, r6
 8000c62:	46a8      	mov	r8, r5
 8000c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c66:	2203      	movs	r2, #3
 8000c68:	4316      	orrs	r6, r2
 8000c6a:	4642      	mov	r2, r8
 8000c6c:	3501      	adds	r5, #1
 8000c6e:	407a      	eors	r2, r7
 8000c70:	b2d2      	uxtb	r2, r2
 8000c72:	35ff      	adds	r5, #255	; 0xff
 8000c74:	2e0a      	cmp	r6, #10
 8000c76:	dd00      	ble.n	8000c7a <__aeabi_fmul+0xca>
 8000c78:	e0e4      	b.n	8000e44 <__aeabi_fmul+0x294>
 8000c7a:	2003      	movs	r0, #3
 8000c7c:	2101      	movs	r1, #1
 8000c7e:	40b1      	lsls	r1, r6
 8000c80:	26a6      	movs	r6, #166	; 0xa6
 8000c82:	00f6      	lsls	r6, r6, #3
 8000c84:	4231      	tst	r1, r6
 8000c86:	d10a      	bne.n	8000c9e <__aeabi_fmul+0xee>
 8000c88:	2690      	movs	r6, #144	; 0x90
 8000c8a:	00b6      	lsls	r6, r6, #2
 8000c8c:	4231      	tst	r1, r6
 8000c8e:	d116      	bne.n	8000cbe <__aeabi_fmul+0x10e>
 8000c90:	3eb9      	subs	r6, #185	; 0xb9
 8000c92:	3eff      	subs	r6, #255	; 0xff
 8000c94:	420e      	tst	r6, r1
 8000c96:	d01a      	beq.n	8000cce <__aeabi_fmul+0x11e>
 8000c98:	46a1      	mov	r9, r4
 8000c9a:	4682      	mov	sl, r0
 8000c9c:	e000      	b.n	8000ca0 <__aeabi_fmul+0xf0>
 8000c9e:	0017      	movs	r7, r2
 8000ca0:	4653      	mov	r3, sl
 8000ca2:	003a      	movs	r2, r7
 8000ca4:	2b02      	cmp	r3, #2
 8000ca6:	d00f      	beq.n	8000cc8 <__aeabi_fmul+0x118>
 8000ca8:	464c      	mov	r4, r9
 8000caa:	4650      	mov	r0, sl
 8000cac:	2803      	cmp	r0, #3
 8000cae:	d1cd      	bne.n	8000c4c <__aeabi_fmul+0x9c>
 8000cb0:	2180      	movs	r1, #128	; 0x80
 8000cb2:	03c9      	lsls	r1, r1, #15
 8000cb4:	4321      	orrs	r1, r4
 8000cb6:	0249      	lsls	r1, r1, #9
 8000cb8:	20ff      	movs	r0, #255	; 0xff
 8000cba:	0a49      	lsrs	r1, r1, #9
 8000cbc:	e7ca      	b.n	8000c54 <__aeabi_fmul+0xa4>
 8000cbe:	2180      	movs	r1, #128	; 0x80
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	20ff      	movs	r0, #255	; 0xff
 8000cc4:	03c9      	lsls	r1, r1, #15
 8000cc6:	e7c5      	b.n	8000c54 <__aeabi_fmul+0xa4>
 8000cc8:	20ff      	movs	r0, #255	; 0xff
 8000cca:	2100      	movs	r1, #0
 8000ccc:	e7c2      	b.n	8000c54 <__aeabi_fmul+0xa4>
 8000cce:	0c20      	lsrs	r0, r4, #16
 8000cd0:	4649      	mov	r1, r9
 8000cd2:	0424      	lsls	r4, r4, #16
 8000cd4:	0c24      	lsrs	r4, r4, #16
 8000cd6:	0027      	movs	r7, r4
 8000cd8:	0c0e      	lsrs	r6, r1, #16
 8000cda:	0409      	lsls	r1, r1, #16
 8000cdc:	0c09      	lsrs	r1, r1, #16
 8000cde:	4374      	muls	r4, r6
 8000ce0:	434f      	muls	r7, r1
 8000ce2:	4346      	muls	r6, r0
 8000ce4:	4348      	muls	r0, r1
 8000ce6:	0c39      	lsrs	r1, r7, #16
 8000ce8:	1900      	adds	r0, r0, r4
 8000cea:	1809      	adds	r1, r1, r0
 8000cec:	428c      	cmp	r4, r1
 8000cee:	d903      	bls.n	8000cf8 <__aeabi_fmul+0x148>
 8000cf0:	2080      	movs	r0, #128	; 0x80
 8000cf2:	0240      	lsls	r0, r0, #9
 8000cf4:	4684      	mov	ip, r0
 8000cf6:	4466      	add	r6, ip
 8000cf8:	043f      	lsls	r7, r7, #16
 8000cfa:	0408      	lsls	r0, r1, #16
 8000cfc:	0c3f      	lsrs	r7, r7, #16
 8000cfe:	19c0      	adds	r0, r0, r7
 8000d00:	0184      	lsls	r4, r0, #6
 8000d02:	1e67      	subs	r7, r4, #1
 8000d04:	41bc      	sbcs	r4, r7
 8000d06:	0c09      	lsrs	r1, r1, #16
 8000d08:	0e80      	lsrs	r0, r0, #26
 8000d0a:	1989      	adds	r1, r1, r6
 8000d0c:	4304      	orrs	r4, r0
 8000d0e:	0189      	lsls	r1, r1, #6
 8000d10:	430c      	orrs	r4, r1
 8000d12:	0109      	lsls	r1, r1, #4
 8000d14:	d571      	bpl.n	8000dfa <__aeabi_fmul+0x24a>
 8000d16:	2301      	movs	r3, #1
 8000d18:	0861      	lsrs	r1, r4, #1
 8000d1a:	401c      	ands	r4, r3
 8000d1c:	430c      	orrs	r4, r1
 8000d1e:	002b      	movs	r3, r5
 8000d20:	337f      	adds	r3, #127	; 0x7f
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	dd51      	ble.n	8000dca <__aeabi_fmul+0x21a>
 8000d26:	0761      	lsls	r1, r4, #29
 8000d28:	d004      	beq.n	8000d34 <__aeabi_fmul+0x184>
 8000d2a:	210f      	movs	r1, #15
 8000d2c:	4021      	ands	r1, r4
 8000d2e:	2904      	cmp	r1, #4
 8000d30:	d000      	beq.n	8000d34 <__aeabi_fmul+0x184>
 8000d32:	3404      	adds	r4, #4
 8000d34:	0121      	lsls	r1, r4, #4
 8000d36:	d503      	bpl.n	8000d40 <__aeabi_fmul+0x190>
 8000d38:	4b43      	ldr	r3, [pc, #268]	; (8000e48 <__aeabi_fmul+0x298>)
 8000d3a:	401c      	ands	r4, r3
 8000d3c:	002b      	movs	r3, r5
 8000d3e:	3380      	adds	r3, #128	; 0x80
 8000d40:	2bfe      	cmp	r3, #254	; 0xfe
 8000d42:	dcc1      	bgt.n	8000cc8 <__aeabi_fmul+0x118>
 8000d44:	01a1      	lsls	r1, r4, #6
 8000d46:	0a49      	lsrs	r1, r1, #9
 8000d48:	b2d8      	uxtb	r0, r3
 8000d4a:	e783      	b.n	8000c54 <__aeabi_fmul+0xa4>
 8000d4c:	2c00      	cmp	r4, #0
 8000d4e:	d12c      	bne.n	8000daa <__aeabi_fmul+0x1fa>
 8000d50:	2301      	movs	r3, #1
 8000d52:	4642      	mov	r2, r8
 8000d54:	431e      	orrs	r6, r3
 8000d56:	002b      	movs	r3, r5
 8000d58:	407a      	eors	r2, r7
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	b2d2      	uxtb	r2, r2
 8000d5e:	1c5d      	adds	r5, r3, #1
 8000d60:	2e0a      	cmp	r6, #10
 8000d62:	dd00      	ble.n	8000d66 <__aeabi_fmul+0x1b6>
 8000d64:	e757      	b.n	8000c16 <__aeabi_fmul+0x66>
 8000d66:	e76a      	b.n	8000c3e <__aeabi_fmul+0x8e>
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d110      	bne.n	8000d8e <__aeabi_fmul+0x1de>
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	2604      	movs	r6, #4
 8000d70:	2500      	movs	r5, #0
 8000d72:	469a      	mov	sl, r3
 8000d74:	e738      	b.n	8000be8 <__aeabi_fmul+0x38>
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d104      	bne.n	8000d84 <__aeabi_fmul+0x1d4>
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	2608      	movs	r6, #8
 8000d7e:	25ff      	movs	r5, #255	; 0xff
 8000d80:	469a      	mov	sl, r3
 8000d82:	e731      	b.n	8000be8 <__aeabi_fmul+0x38>
 8000d84:	2303      	movs	r3, #3
 8000d86:	260c      	movs	r6, #12
 8000d88:	25ff      	movs	r5, #255	; 0xff
 8000d8a:	469a      	mov	sl, r3
 8000d8c:	e72c      	b.n	8000be8 <__aeabi_fmul+0x38>
 8000d8e:	4648      	mov	r0, r9
 8000d90:	f002 f8ee 	bl	8002f70 <__clzsi2>
 8000d94:	464a      	mov	r2, r9
 8000d96:	1f43      	subs	r3, r0, #5
 8000d98:	2576      	movs	r5, #118	; 0x76
 8000d9a:	409a      	lsls	r2, r3
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	426d      	negs	r5, r5
 8000da0:	4691      	mov	r9, r2
 8000da2:	2600      	movs	r6, #0
 8000da4:	469a      	mov	sl, r3
 8000da6:	1a2d      	subs	r5, r5, r0
 8000da8:	e71e      	b.n	8000be8 <__aeabi_fmul+0x38>
 8000daa:	0020      	movs	r0, r4
 8000dac:	f002 f8e0 	bl	8002f70 <__clzsi2>
 8000db0:	4642      	mov	r2, r8
 8000db2:	1f43      	subs	r3, r0, #5
 8000db4:	409c      	lsls	r4, r3
 8000db6:	1a2b      	subs	r3, r5, r0
 8000db8:	3b76      	subs	r3, #118	; 0x76
 8000dba:	407a      	eors	r2, r7
 8000dbc:	2000      	movs	r0, #0
 8000dbe:	b2d2      	uxtb	r2, r2
 8000dc0:	1c5d      	adds	r5, r3, #1
 8000dc2:	2e0a      	cmp	r6, #10
 8000dc4:	dd00      	ble.n	8000dc8 <__aeabi_fmul+0x218>
 8000dc6:	e726      	b.n	8000c16 <__aeabi_fmul+0x66>
 8000dc8:	e739      	b.n	8000c3e <__aeabi_fmul+0x8e>
 8000dca:	2101      	movs	r1, #1
 8000dcc:	1acb      	subs	r3, r1, r3
 8000dce:	2b1b      	cmp	r3, #27
 8000dd0:	dd00      	ble.n	8000dd4 <__aeabi_fmul+0x224>
 8000dd2:	e73d      	b.n	8000c50 <__aeabi_fmul+0xa0>
 8000dd4:	359e      	adds	r5, #158	; 0x9e
 8000dd6:	0021      	movs	r1, r4
 8000dd8:	40ac      	lsls	r4, r5
 8000dda:	40d9      	lsrs	r1, r3
 8000ddc:	1e63      	subs	r3, r4, #1
 8000dde:	419c      	sbcs	r4, r3
 8000de0:	4321      	orrs	r1, r4
 8000de2:	074b      	lsls	r3, r1, #29
 8000de4:	d004      	beq.n	8000df0 <__aeabi_fmul+0x240>
 8000de6:	230f      	movs	r3, #15
 8000de8:	400b      	ands	r3, r1
 8000dea:	2b04      	cmp	r3, #4
 8000dec:	d000      	beq.n	8000df0 <__aeabi_fmul+0x240>
 8000dee:	3104      	adds	r1, #4
 8000df0:	014b      	lsls	r3, r1, #5
 8000df2:	d504      	bpl.n	8000dfe <__aeabi_fmul+0x24e>
 8000df4:	2001      	movs	r0, #1
 8000df6:	2100      	movs	r1, #0
 8000df8:	e72c      	b.n	8000c54 <__aeabi_fmul+0xa4>
 8000dfa:	001d      	movs	r5, r3
 8000dfc:	e78f      	b.n	8000d1e <__aeabi_fmul+0x16e>
 8000dfe:	0189      	lsls	r1, r1, #6
 8000e00:	2000      	movs	r0, #0
 8000e02:	0a49      	lsrs	r1, r1, #9
 8000e04:	e726      	b.n	8000c54 <__aeabi_fmul+0xa4>
 8000e06:	2302      	movs	r3, #2
 8000e08:	2e0f      	cmp	r6, #15
 8000e0a:	d10c      	bne.n	8000e26 <__aeabi_fmul+0x276>
 8000e0c:	2180      	movs	r1, #128	; 0x80
 8000e0e:	464b      	mov	r3, r9
 8000e10:	03c9      	lsls	r1, r1, #15
 8000e12:	420b      	tst	r3, r1
 8000e14:	d00d      	beq.n	8000e32 <__aeabi_fmul+0x282>
 8000e16:	420c      	tst	r4, r1
 8000e18:	d10b      	bne.n	8000e32 <__aeabi_fmul+0x282>
 8000e1a:	4321      	orrs	r1, r4
 8000e1c:	0249      	lsls	r1, r1, #9
 8000e1e:	003a      	movs	r2, r7
 8000e20:	20ff      	movs	r0, #255	; 0xff
 8000e22:	0a49      	lsrs	r1, r1, #9
 8000e24:	e716      	b.n	8000c54 <__aeabi_fmul+0xa4>
 8000e26:	2e0b      	cmp	r6, #11
 8000e28:	d000      	beq.n	8000e2c <__aeabi_fmul+0x27c>
 8000e2a:	e6f7      	b.n	8000c1c <__aeabi_fmul+0x6c>
 8000e2c:	46a1      	mov	r9, r4
 8000e2e:	469a      	mov	sl, r3
 8000e30:	e736      	b.n	8000ca0 <__aeabi_fmul+0xf0>
 8000e32:	2180      	movs	r1, #128	; 0x80
 8000e34:	464b      	mov	r3, r9
 8000e36:	03c9      	lsls	r1, r1, #15
 8000e38:	4319      	orrs	r1, r3
 8000e3a:	0249      	lsls	r1, r1, #9
 8000e3c:	4642      	mov	r2, r8
 8000e3e:	20ff      	movs	r0, #255	; 0xff
 8000e40:	0a49      	lsrs	r1, r1, #9
 8000e42:	e707      	b.n	8000c54 <__aeabi_fmul+0xa4>
 8000e44:	2303      	movs	r3, #3
 8000e46:	e7df      	b.n	8000e08 <__aeabi_fmul+0x258>
 8000e48:	f7ffffff 	.word	0xf7ffffff

08000e4c <__aeabi_fsub>:
 8000e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e4e:	46c6      	mov	lr, r8
 8000e50:	0243      	lsls	r3, r0, #9
 8000e52:	0a5b      	lsrs	r3, r3, #9
 8000e54:	0045      	lsls	r5, r0, #1
 8000e56:	00da      	lsls	r2, r3, #3
 8000e58:	0fc4      	lsrs	r4, r0, #31
 8000e5a:	0248      	lsls	r0, r1, #9
 8000e5c:	004f      	lsls	r7, r1, #1
 8000e5e:	4694      	mov	ip, r2
 8000e60:	0a42      	lsrs	r2, r0, #9
 8000e62:	001e      	movs	r6, r3
 8000e64:	4690      	mov	r8, r2
 8000e66:	b500      	push	{lr}
 8000e68:	0e2d      	lsrs	r5, r5, #24
 8000e6a:	0e3f      	lsrs	r7, r7, #24
 8000e6c:	0fc9      	lsrs	r1, r1, #31
 8000e6e:	0980      	lsrs	r0, r0, #6
 8000e70:	2fff      	cmp	r7, #255	; 0xff
 8000e72:	d059      	beq.n	8000f28 <__aeabi_fsub+0xdc>
 8000e74:	2201      	movs	r2, #1
 8000e76:	4051      	eors	r1, r2
 8000e78:	428c      	cmp	r4, r1
 8000e7a:	d039      	beq.n	8000ef0 <__aeabi_fsub+0xa4>
 8000e7c:	1bea      	subs	r2, r5, r7
 8000e7e:	2a00      	cmp	r2, #0
 8000e80:	dd58      	ble.n	8000f34 <__aeabi_fsub+0xe8>
 8000e82:	2f00      	cmp	r7, #0
 8000e84:	d068      	beq.n	8000f58 <__aeabi_fsub+0x10c>
 8000e86:	2dff      	cmp	r5, #255	; 0xff
 8000e88:	d100      	bne.n	8000e8c <__aeabi_fsub+0x40>
 8000e8a:	e0d1      	b.n	8001030 <__aeabi_fsub+0x1e4>
 8000e8c:	2380      	movs	r3, #128	; 0x80
 8000e8e:	04db      	lsls	r3, r3, #19
 8000e90:	4318      	orrs	r0, r3
 8000e92:	2a1b      	cmp	r2, #27
 8000e94:	dc00      	bgt.n	8000e98 <__aeabi_fsub+0x4c>
 8000e96:	e0e3      	b.n	8001060 <__aeabi_fsub+0x214>
 8000e98:	2301      	movs	r3, #1
 8000e9a:	4662      	mov	r2, ip
 8000e9c:	1ad3      	subs	r3, r2, r3
 8000e9e:	015a      	lsls	r2, r3, #5
 8000ea0:	d400      	bmi.n	8000ea4 <__aeabi_fsub+0x58>
 8000ea2:	e0ac      	b.n	8000ffe <__aeabi_fsub+0x1b2>
 8000ea4:	019b      	lsls	r3, r3, #6
 8000ea6:	099e      	lsrs	r6, r3, #6
 8000ea8:	0030      	movs	r0, r6
 8000eaa:	f002 f861 	bl	8002f70 <__clzsi2>
 8000eae:	0033      	movs	r3, r6
 8000eb0:	3805      	subs	r0, #5
 8000eb2:	4083      	lsls	r3, r0
 8000eb4:	4285      	cmp	r5, r0
 8000eb6:	dc00      	bgt.n	8000eba <__aeabi_fsub+0x6e>
 8000eb8:	e0c6      	b.n	8001048 <__aeabi_fsub+0x1fc>
 8000eba:	4ab2      	ldr	r2, [pc, #712]	; (8001184 <__aeabi_fsub+0x338>)
 8000ebc:	1a2d      	subs	r5, r5, r0
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	075a      	lsls	r2, r3, #29
 8000ec2:	d004      	beq.n	8000ece <__aeabi_fsub+0x82>
 8000ec4:	220f      	movs	r2, #15
 8000ec6:	401a      	ands	r2, r3
 8000ec8:	2a04      	cmp	r2, #4
 8000eca:	d000      	beq.n	8000ece <__aeabi_fsub+0x82>
 8000ecc:	3304      	adds	r3, #4
 8000ece:	015a      	lsls	r2, r3, #5
 8000ed0:	d400      	bmi.n	8000ed4 <__aeabi_fsub+0x88>
 8000ed2:	e097      	b.n	8001004 <__aeabi_fsub+0x1b8>
 8000ed4:	1c6a      	adds	r2, r5, #1
 8000ed6:	2dfe      	cmp	r5, #254	; 0xfe
 8000ed8:	d100      	bne.n	8000edc <__aeabi_fsub+0x90>
 8000eda:	e084      	b.n	8000fe6 <__aeabi_fsub+0x19a>
 8000edc:	019b      	lsls	r3, r3, #6
 8000ede:	0a5e      	lsrs	r6, r3, #9
 8000ee0:	b2d2      	uxtb	r2, r2
 8000ee2:	05d0      	lsls	r0, r2, #23
 8000ee4:	4330      	orrs	r0, r6
 8000ee6:	07e4      	lsls	r4, r4, #31
 8000ee8:	4320      	orrs	r0, r4
 8000eea:	bc80      	pop	{r7}
 8000eec:	46b8      	mov	r8, r7
 8000eee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ef0:	1bea      	subs	r2, r5, r7
 8000ef2:	2a00      	cmp	r2, #0
 8000ef4:	dd41      	ble.n	8000f7a <__aeabi_fsub+0x12e>
 8000ef6:	2f00      	cmp	r7, #0
 8000ef8:	d06b      	beq.n	8000fd2 <__aeabi_fsub+0x186>
 8000efa:	2dff      	cmp	r5, #255	; 0xff
 8000efc:	d100      	bne.n	8000f00 <__aeabi_fsub+0xb4>
 8000efe:	e097      	b.n	8001030 <__aeabi_fsub+0x1e4>
 8000f00:	2380      	movs	r3, #128	; 0x80
 8000f02:	04db      	lsls	r3, r3, #19
 8000f04:	4318      	orrs	r0, r3
 8000f06:	2a1b      	cmp	r2, #27
 8000f08:	dc00      	bgt.n	8000f0c <__aeabi_fsub+0xc0>
 8000f0a:	e0cc      	b.n	80010a6 <__aeabi_fsub+0x25a>
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	4463      	add	r3, ip
 8000f10:	015a      	lsls	r2, r3, #5
 8000f12:	d574      	bpl.n	8000ffe <__aeabi_fsub+0x1b2>
 8000f14:	3501      	adds	r5, #1
 8000f16:	2dff      	cmp	r5, #255	; 0xff
 8000f18:	d065      	beq.n	8000fe6 <__aeabi_fsub+0x19a>
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	499a      	ldr	r1, [pc, #616]	; (8001188 <__aeabi_fsub+0x33c>)
 8000f1e:	401a      	ands	r2, r3
 8000f20:	085b      	lsrs	r3, r3, #1
 8000f22:	400b      	ands	r3, r1
 8000f24:	4313      	orrs	r3, r2
 8000f26:	e7cb      	b.n	8000ec0 <__aeabi_fsub+0x74>
 8000f28:	2800      	cmp	r0, #0
 8000f2a:	d01f      	beq.n	8000f6c <__aeabi_fsub+0x120>
 8000f2c:	428c      	cmp	r4, r1
 8000f2e:	d022      	beq.n	8000f76 <__aeabi_fsub+0x12a>
 8000f30:	002a      	movs	r2, r5
 8000f32:	3aff      	subs	r2, #255	; 0xff
 8000f34:	2a00      	cmp	r2, #0
 8000f36:	d035      	beq.n	8000fa4 <__aeabi_fsub+0x158>
 8000f38:	1b7a      	subs	r2, r7, r5
 8000f3a:	2d00      	cmp	r5, #0
 8000f3c:	d000      	beq.n	8000f40 <__aeabi_fsub+0xf4>
 8000f3e:	e099      	b.n	8001074 <__aeabi_fsub+0x228>
 8000f40:	4663      	mov	r3, ip
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d100      	bne.n	8000f48 <__aeabi_fsub+0xfc>
 8000f46:	e0dd      	b.n	8001104 <__aeabi_fsub+0x2b8>
 8000f48:	1e53      	subs	r3, r2, #1
 8000f4a:	2a01      	cmp	r2, #1
 8000f4c:	d100      	bne.n	8000f50 <__aeabi_fsub+0x104>
 8000f4e:	e105      	b.n	800115c <__aeabi_fsub+0x310>
 8000f50:	2aff      	cmp	r2, #255	; 0xff
 8000f52:	d06b      	beq.n	800102c <__aeabi_fsub+0x1e0>
 8000f54:	001a      	movs	r2, r3
 8000f56:	e094      	b.n	8001082 <__aeabi_fsub+0x236>
 8000f58:	2800      	cmp	r0, #0
 8000f5a:	d073      	beq.n	8001044 <__aeabi_fsub+0x1f8>
 8000f5c:	1e51      	subs	r1, r2, #1
 8000f5e:	2a01      	cmp	r2, #1
 8000f60:	d100      	bne.n	8000f64 <__aeabi_fsub+0x118>
 8000f62:	e0df      	b.n	8001124 <__aeabi_fsub+0x2d8>
 8000f64:	2aff      	cmp	r2, #255	; 0xff
 8000f66:	d063      	beq.n	8001030 <__aeabi_fsub+0x1e4>
 8000f68:	000a      	movs	r2, r1
 8000f6a:	e792      	b.n	8000e92 <__aeabi_fsub+0x46>
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	4051      	eors	r1, r2
 8000f70:	42a1      	cmp	r1, r4
 8000f72:	d000      	beq.n	8000f76 <__aeabi_fsub+0x12a>
 8000f74:	e782      	b.n	8000e7c <__aeabi_fsub+0x30>
 8000f76:	002a      	movs	r2, r5
 8000f78:	3aff      	subs	r2, #255	; 0xff
 8000f7a:	2a00      	cmp	r2, #0
 8000f7c:	d036      	beq.n	8000fec <__aeabi_fsub+0x1a0>
 8000f7e:	1b7a      	subs	r2, r7, r5
 8000f80:	2d00      	cmp	r5, #0
 8000f82:	d100      	bne.n	8000f86 <__aeabi_fsub+0x13a>
 8000f84:	e0aa      	b.n	80010dc <__aeabi_fsub+0x290>
 8000f86:	2fff      	cmp	r7, #255	; 0xff
 8000f88:	d100      	bne.n	8000f8c <__aeabi_fsub+0x140>
 8000f8a:	e0da      	b.n	8001142 <__aeabi_fsub+0x2f6>
 8000f8c:	2380      	movs	r3, #128	; 0x80
 8000f8e:	4661      	mov	r1, ip
 8000f90:	04db      	lsls	r3, r3, #19
 8000f92:	4319      	orrs	r1, r3
 8000f94:	468c      	mov	ip, r1
 8000f96:	2a1b      	cmp	r2, #27
 8000f98:	dc00      	bgt.n	8000f9c <__aeabi_fsub+0x150>
 8000f9a:	e0d4      	b.n	8001146 <__aeabi_fsub+0x2fa>
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	003d      	movs	r5, r7
 8000fa0:	181b      	adds	r3, r3, r0
 8000fa2:	e7b5      	b.n	8000f10 <__aeabi_fsub+0xc4>
 8000fa4:	27fe      	movs	r7, #254	; 0xfe
 8000fa6:	1c6a      	adds	r2, r5, #1
 8000fa8:	4217      	tst	r7, r2
 8000faa:	d171      	bne.n	8001090 <__aeabi_fsub+0x244>
 8000fac:	2d00      	cmp	r5, #0
 8000fae:	d000      	beq.n	8000fb2 <__aeabi_fsub+0x166>
 8000fb0:	e09e      	b.n	80010f0 <__aeabi_fsub+0x2a4>
 8000fb2:	4663      	mov	r3, ip
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d100      	bne.n	8000fba <__aeabi_fsub+0x16e>
 8000fb8:	e0d5      	b.n	8001166 <__aeabi_fsub+0x31a>
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2800      	cmp	r0, #0
 8000fbe:	d100      	bne.n	8000fc2 <__aeabi_fsub+0x176>
 8000fc0:	e78f      	b.n	8000ee2 <__aeabi_fsub+0x96>
 8000fc2:	1a1b      	subs	r3, r3, r0
 8000fc4:	015e      	lsls	r6, r3, #5
 8000fc6:	d400      	bmi.n	8000fca <__aeabi_fsub+0x17e>
 8000fc8:	e0d6      	b.n	8001178 <__aeabi_fsub+0x32c>
 8000fca:	4663      	mov	r3, ip
 8000fcc:	000c      	movs	r4, r1
 8000fce:	1ac3      	subs	r3, r0, r3
 8000fd0:	e776      	b.n	8000ec0 <__aeabi_fsub+0x74>
 8000fd2:	2800      	cmp	r0, #0
 8000fd4:	d036      	beq.n	8001044 <__aeabi_fsub+0x1f8>
 8000fd6:	1e51      	subs	r1, r2, #1
 8000fd8:	2a01      	cmp	r2, #1
 8000fda:	d100      	bne.n	8000fde <__aeabi_fsub+0x192>
 8000fdc:	e09a      	b.n	8001114 <__aeabi_fsub+0x2c8>
 8000fde:	2aff      	cmp	r2, #255	; 0xff
 8000fe0:	d026      	beq.n	8001030 <__aeabi_fsub+0x1e4>
 8000fe2:	000a      	movs	r2, r1
 8000fe4:	e78f      	b.n	8000f06 <__aeabi_fsub+0xba>
 8000fe6:	22ff      	movs	r2, #255	; 0xff
 8000fe8:	2600      	movs	r6, #0
 8000fea:	e77a      	b.n	8000ee2 <__aeabi_fsub+0x96>
 8000fec:	27fe      	movs	r7, #254	; 0xfe
 8000fee:	1c6a      	adds	r2, r5, #1
 8000ff0:	4217      	tst	r7, r2
 8000ff2:	d062      	beq.n	80010ba <__aeabi_fsub+0x26e>
 8000ff4:	2aff      	cmp	r2, #255	; 0xff
 8000ff6:	d0f6      	beq.n	8000fe6 <__aeabi_fsub+0x19a>
 8000ff8:	0015      	movs	r5, r2
 8000ffa:	4460      	add	r0, ip
 8000ffc:	0843      	lsrs	r3, r0, #1
 8000ffe:	075a      	lsls	r2, r3, #29
 8001000:	d000      	beq.n	8001004 <__aeabi_fsub+0x1b8>
 8001002:	e75f      	b.n	8000ec4 <__aeabi_fsub+0x78>
 8001004:	08db      	lsrs	r3, r3, #3
 8001006:	2dff      	cmp	r5, #255	; 0xff
 8001008:	d012      	beq.n	8001030 <__aeabi_fsub+0x1e4>
 800100a:	025b      	lsls	r3, r3, #9
 800100c:	0a5e      	lsrs	r6, r3, #9
 800100e:	b2ea      	uxtb	r2, r5
 8001010:	e767      	b.n	8000ee2 <__aeabi_fsub+0x96>
 8001012:	4662      	mov	r2, ip
 8001014:	2a00      	cmp	r2, #0
 8001016:	d100      	bne.n	800101a <__aeabi_fsub+0x1ce>
 8001018:	e093      	b.n	8001142 <__aeabi_fsub+0x2f6>
 800101a:	2800      	cmp	r0, #0
 800101c:	d008      	beq.n	8001030 <__aeabi_fsub+0x1e4>
 800101e:	2280      	movs	r2, #128	; 0x80
 8001020:	03d2      	lsls	r2, r2, #15
 8001022:	4213      	tst	r3, r2
 8001024:	d004      	beq.n	8001030 <__aeabi_fsub+0x1e4>
 8001026:	4640      	mov	r0, r8
 8001028:	4210      	tst	r0, r2
 800102a:	d101      	bne.n	8001030 <__aeabi_fsub+0x1e4>
 800102c:	000c      	movs	r4, r1
 800102e:	4643      	mov	r3, r8
 8001030:	2b00      	cmp	r3, #0
 8001032:	d0d8      	beq.n	8000fe6 <__aeabi_fsub+0x19a>
 8001034:	2680      	movs	r6, #128	; 0x80
 8001036:	03f6      	lsls	r6, r6, #15
 8001038:	431e      	orrs	r6, r3
 800103a:	0276      	lsls	r6, r6, #9
 800103c:	22ff      	movs	r2, #255	; 0xff
 800103e:	0a76      	lsrs	r6, r6, #9
 8001040:	e74f      	b.n	8000ee2 <__aeabi_fsub+0x96>
 8001042:	4643      	mov	r3, r8
 8001044:	0015      	movs	r5, r2
 8001046:	e7de      	b.n	8001006 <__aeabi_fsub+0x1ba>
 8001048:	2220      	movs	r2, #32
 800104a:	1b40      	subs	r0, r0, r5
 800104c:	3001      	adds	r0, #1
 800104e:	1a12      	subs	r2, r2, r0
 8001050:	0019      	movs	r1, r3
 8001052:	4093      	lsls	r3, r2
 8001054:	40c1      	lsrs	r1, r0
 8001056:	1e5a      	subs	r2, r3, #1
 8001058:	4193      	sbcs	r3, r2
 800105a:	2500      	movs	r5, #0
 800105c:	430b      	orrs	r3, r1
 800105e:	e72f      	b.n	8000ec0 <__aeabi_fsub+0x74>
 8001060:	2320      	movs	r3, #32
 8001062:	1a9b      	subs	r3, r3, r2
 8001064:	0001      	movs	r1, r0
 8001066:	4098      	lsls	r0, r3
 8001068:	0003      	movs	r3, r0
 800106a:	40d1      	lsrs	r1, r2
 800106c:	1e5a      	subs	r2, r3, #1
 800106e:	4193      	sbcs	r3, r2
 8001070:	430b      	orrs	r3, r1
 8001072:	e712      	b.n	8000e9a <__aeabi_fsub+0x4e>
 8001074:	2fff      	cmp	r7, #255	; 0xff
 8001076:	d0d9      	beq.n	800102c <__aeabi_fsub+0x1e0>
 8001078:	2380      	movs	r3, #128	; 0x80
 800107a:	4664      	mov	r4, ip
 800107c:	04db      	lsls	r3, r3, #19
 800107e:	431c      	orrs	r4, r3
 8001080:	46a4      	mov	ip, r4
 8001082:	2a1b      	cmp	r2, #27
 8001084:	dd52      	ble.n	800112c <__aeabi_fsub+0x2e0>
 8001086:	2301      	movs	r3, #1
 8001088:	000c      	movs	r4, r1
 800108a:	003d      	movs	r5, r7
 800108c:	1ac3      	subs	r3, r0, r3
 800108e:	e706      	b.n	8000e9e <__aeabi_fsub+0x52>
 8001090:	4663      	mov	r3, ip
 8001092:	1a1e      	subs	r6, r3, r0
 8001094:	0173      	lsls	r3, r6, #5
 8001096:	d439      	bmi.n	800110c <__aeabi_fsub+0x2c0>
 8001098:	2e00      	cmp	r6, #0
 800109a:	d000      	beq.n	800109e <__aeabi_fsub+0x252>
 800109c:	e704      	b.n	8000ea8 <__aeabi_fsub+0x5c>
 800109e:	2400      	movs	r4, #0
 80010a0:	2200      	movs	r2, #0
 80010a2:	2600      	movs	r6, #0
 80010a4:	e71d      	b.n	8000ee2 <__aeabi_fsub+0x96>
 80010a6:	2320      	movs	r3, #32
 80010a8:	1a9b      	subs	r3, r3, r2
 80010aa:	0001      	movs	r1, r0
 80010ac:	4098      	lsls	r0, r3
 80010ae:	0003      	movs	r3, r0
 80010b0:	40d1      	lsrs	r1, r2
 80010b2:	1e5a      	subs	r2, r3, #1
 80010b4:	4193      	sbcs	r3, r2
 80010b6:	430b      	orrs	r3, r1
 80010b8:	e729      	b.n	8000f0e <__aeabi_fsub+0xc2>
 80010ba:	2d00      	cmp	r5, #0
 80010bc:	d1a9      	bne.n	8001012 <__aeabi_fsub+0x1c6>
 80010be:	4663      	mov	r3, ip
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d056      	beq.n	8001172 <__aeabi_fsub+0x326>
 80010c4:	2200      	movs	r2, #0
 80010c6:	2800      	cmp	r0, #0
 80010c8:	d100      	bne.n	80010cc <__aeabi_fsub+0x280>
 80010ca:	e70a      	b.n	8000ee2 <__aeabi_fsub+0x96>
 80010cc:	0003      	movs	r3, r0
 80010ce:	4463      	add	r3, ip
 80010d0:	015a      	lsls	r2, r3, #5
 80010d2:	d594      	bpl.n	8000ffe <__aeabi_fsub+0x1b2>
 80010d4:	4a2b      	ldr	r2, [pc, #172]	; (8001184 <__aeabi_fsub+0x338>)
 80010d6:	3501      	adds	r5, #1
 80010d8:	4013      	ands	r3, r2
 80010da:	e790      	b.n	8000ffe <__aeabi_fsub+0x1b2>
 80010dc:	4663      	mov	r3, ip
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d0af      	beq.n	8001042 <__aeabi_fsub+0x1f6>
 80010e2:	1e53      	subs	r3, r2, #1
 80010e4:	2a01      	cmp	r2, #1
 80010e6:	d015      	beq.n	8001114 <__aeabi_fsub+0x2c8>
 80010e8:	2aff      	cmp	r2, #255	; 0xff
 80010ea:	d02a      	beq.n	8001142 <__aeabi_fsub+0x2f6>
 80010ec:	001a      	movs	r2, r3
 80010ee:	e752      	b.n	8000f96 <__aeabi_fsub+0x14a>
 80010f0:	4662      	mov	r2, ip
 80010f2:	2a00      	cmp	r2, #0
 80010f4:	d191      	bne.n	800101a <__aeabi_fsub+0x1ce>
 80010f6:	2800      	cmp	r0, #0
 80010f8:	d198      	bne.n	800102c <__aeabi_fsub+0x1e0>
 80010fa:	2680      	movs	r6, #128	; 0x80
 80010fc:	2400      	movs	r4, #0
 80010fe:	22ff      	movs	r2, #255	; 0xff
 8001100:	03f6      	lsls	r6, r6, #15
 8001102:	e6ee      	b.n	8000ee2 <__aeabi_fsub+0x96>
 8001104:	000c      	movs	r4, r1
 8001106:	4643      	mov	r3, r8
 8001108:	0015      	movs	r5, r2
 800110a:	e77c      	b.n	8001006 <__aeabi_fsub+0x1ba>
 800110c:	4663      	mov	r3, ip
 800110e:	000c      	movs	r4, r1
 8001110:	1ac6      	subs	r6, r0, r3
 8001112:	e6c9      	b.n	8000ea8 <__aeabi_fsub+0x5c>
 8001114:	0003      	movs	r3, r0
 8001116:	4463      	add	r3, ip
 8001118:	2501      	movs	r5, #1
 800111a:	015a      	lsls	r2, r3, #5
 800111c:	d400      	bmi.n	8001120 <__aeabi_fsub+0x2d4>
 800111e:	e76e      	b.n	8000ffe <__aeabi_fsub+0x1b2>
 8001120:	2502      	movs	r5, #2
 8001122:	e6fa      	b.n	8000f1a <__aeabi_fsub+0xce>
 8001124:	4663      	mov	r3, ip
 8001126:	2501      	movs	r5, #1
 8001128:	1a1b      	subs	r3, r3, r0
 800112a:	e6b8      	b.n	8000e9e <__aeabi_fsub+0x52>
 800112c:	4664      	mov	r4, ip
 800112e:	2320      	movs	r3, #32
 8001130:	40d4      	lsrs	r4, r2
 8001132:	1a9b      	subs	r3, r3, r2
 8001134:	4662      	mov	r2, ip
 8001136:	409a      	lsls	r2, r3
 8001138:	0013      	movs	r3, r2
 800113a:	1e5a      	subs	r2, r3, #1
 800113c:	4193      	sbcs	r3, r2
 800113e:	4323      	orrs	r3, r4
 8001140:	e7a2      	b.n	8001088 <__aeabi_fsub+0x23c>
 8001142:	4643      	mov	r3, r8
 8001144:	e774      	b.n	8001030 <__aeabi_fsub+0x1e4>
 8001146:	4661      	mov	r1, ip
 8001148:	2320      	movs	r3, #32
 800114a:	40d1      	lsrs	r1, r2
 800114c:	1a9b      	subs	r3, r3, r2
 800114e:	4662      	mov	r2, ip
 8001150:	409a      	lsls	r2, r3
 8001152:	0013      	movs	r3, r2
 8001154:	1e5a      	subs	r2, r3, #1
 8001156:	4193      	sbcs	r3, r2
 8001158:	430b      	orrs	r3, r1
 800115a:	e720      	b.n	8000f9e <__aeabi_fsub+0x152>
 800115c:	4663      	mov	r3, ip
 800115e:	000c      	movs	r4, r1
 8001160:	2501      	movs	r5, #1
 8001162:	1ac3      	subs	r3, r0, r3
 8001164:	e69b      	b.n	8000e9e <__aeabi_fsub+0x52>
 8001166:	2800      	cmp	r0, #0
 8001168:	d099      	beq.n	800109e <__aeabi_fsub+0x252>
 800116a:	000c      	movs	r4, r1
 800116c:	4646      	mov	r6, r8
 800116e:	2200      	movs	r2, #0
 8001170:	e6b7      	b.n	8000ee2 <__aeabi_fsub+0x96>
 8001172:	4646      	mov	r6, r8
 8001174:	2200      	movs	r2, #0
 8001176:	e6b4      	b.n	8000ee2 <__aeabi_fsub+0x96>
 8001178:	2b00      	cmp	r3, #0
 800117a:	d000      	beq.n	800117e <__aeabi_fsub+0x332>
 800117c:	e73f      	b.n	8000ffe <__aeabi_fsub+0x1b2>
 800117e:	2400      	movs	r4, #0
 8001180:	2600      	movs	r6, #0
 8001182:	e6ae      	b.n	8000ee2 <__aeabi_fsub+0x96>
 8001184:	fbffffff 	.word	0xfbffffff
 8001188:	7dffffff 	.word	0x7dffffff

0800118c <__aeabi_fcmpun>:
 800118c:	0243      	lsls	r3, r0, #9
 800118e:	024a      	lsls	r2, r1, #9
 8001190:	0040      	lsls	r0, r0, #1
 8001192:	0049      	lsls	r1, r1, #1
 8001194:	0a5b      	lsrs	r3, r3, #9
 8001196:	0a52      	lsrs	r2, r2, #9
 8001198:	0e09      	lsrs	r1, r1, #24
 800119a:	0e00      	lsrs	r0, r0, #24
 800119c:	28ff      	cmp	r0, #255	; 0xff
 800119e:	d006      	beq.n	80011ae <__aeabi_fcmpun+0x22>
 80011a0:	2000      	movs	r0, #0
 80011a2:	29ff      	cmp	r1, #255	; 0xff
 80011a4:	d102      	bne.n	80011ac <__aeabi_fcmpun+0x20>
 80011a6:	1e53      	subs	r3, r2, #1
 80011a8:	419a      	sbcs	r2, r3
 80011aa:	0010      	movs	r0, r2
 80011ac:	4770      	bx	lr
 80011ae:	38fe      	subs	r0, #254	; 0xfe
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d1fb      	bne.n	80011ac <__aeabi_fcmpun+0x20>
 80011b4:	e7f4      	b.n	80011a0 <__aeabi_fcmpun+0x14>
 80011b6:	46c0      	nop			; (mov r8, r8)

080011b8 <__aeabi_i2f>:
 80011b8:	b570      	push	{r4, r5, r6, lr}
 80011ba:	2800      	cmp	r0, #0
 80011bc:	d013      	beq.n	80011e6 <__aeabi_i2f+0x2e>
 80011be:	17c3      	asrs	r3, r0, #31
 80011c0:	18c5      	adds	r5, r0, r3
 80011c2:	405d      	eors	r5, r3
 80011c4:	0fc4      	lsrs	r4, r0, #31
 80011c6:	0028      	movs	r0, r5
 80011c8:	f001 fed2 	bl	8002f70 <__clzsi2>
 80011cc:	239e      	movs	r3, #158	; 0x9e
 80011ce:	0001      	movs	r1, r0
 80011d0:	1a1b      	subs	r3, r3, r0
 80011d2:	2b96      	cmp	r3, #150	; 0x96
 80011d4:	dc0f      	bgt.n	80011f6 <__aeabi_i2f+0x3e>
 80011d6:	2808      	cmp	r0, #8
 80011d8:	d031      	beq.n	800123e <__aeabi_i2f+0x86>
 80011da:	3908      	subs	r1, #8
 80011dc:	408d      	lsls	r5, r1
 80011de:	026d      	lsls	r5, r5, #9
 80011e0:	0a6d      	lsrs	r5, r5, #9
 80011e2:	b2d8      	uxtb	r0, r3
 80011e4:	e002      	b.n	80011ec <__aeabi_i2f+0x34>
 80011e6:	2400      	movs	r4, #0
 80011e8:	2000      	movs	r0, #0
 80011ea:	2500      	movs	r5, #0
 80011ec:	05c0      	lsls	r0, r0, #23
 80011ee:	4328      	orrs	r0, r5
 80011f0:	07e4      	lsls	r4, r4, #31
 80011f2:	4320      	orrs	r0, r4
 80011f4:	bd70      	pop	{r4, r5, r6, pc}
 80011f6:	2b99      	cmp	r3, #153	; 0x99
 80011f8:	dd0c      	ble.n	8001214 <__aeabi_i2f+0x5c>
 80011fa:	2205      	movs	r2, #5
 80011fc:	1a12      	subs	r2, r2, r0
 80011fe:	0028      	movs	r0, r5
 8001200:	40d0      	lsrs	r0, r2
 8001202:	0002      	movs	r2, r0
 8001204:	0008      	movs	r0, r1
 8001206:	301b      	adds	r0, #27
 8001208:	4085      	lsls	r5, r0
 800120a:	0028      	movs	r0, r5
 800120c:	1e45      	subs	r5, r0, #1
 800120e:	41a8      	sbcs	r0, r5
 8001210:	4302      	orrs	r2, r0
 8001212:	0015      	movs	r5, r2
 8001214:	2905      	cmp	r1, #5
 8001216:	dc16      	bgt.n	8001246 <__aeabi_i2f+0x8e>
 8001218:	002a      	movs	r2, r5
 800121a:	480f      	ldr	r0, [pc, #60]	; (8001258 <__aeabi_i2f+0xa0>)
 800121c:	4002      	ands	r2, r0
 800121e:	076e      	lsls	r6, r5, #29
 8001220:	d009      	beq.n	8001236 <__aeabi_i2f+0x7e>
 8001222:	260f      	movs	r6, #15
 8001224:	4035      	ands	r5, r6
 8001226:	2d04      	cmp	r5, #4
 8001228:	d005      	beq.n	8001236 <__aeabi_i2f+0x7e>
 800122a:	3204      	adds	r2, #4
 800122c:	0155      	lsls	r5, r2, #5
 800122e:	d502      	bpl.n	8001236 <__aeabi_i2f+0x7e>
 8001230:	239f      	movs	r3, #159	; 0x9f
 8001232:	4002      	ands	r2, r0
 8001234:	1a5b      	subs	r3, r3, r1
 8001236:	0192      	lsls	r2, r2, #6
 8001238:	0a55      	lsrs	r5, r2, #9
 800123a:	b2d8      	uxtb	r0, r3
 800123c:	e7d6      	b.n	80011ec <__aeabi_i2f+0x34>
 800123e:	026d      	lsls	r5, r5, #9
 8001240:	2096      	movs	r0, #150	; 0x96
 8001242:	0a6d      	lsrs	r5, r5, #9
 8001244:	e7d2      	b.n	80011ec <__aeabi_i2f+0x34>
 8001246:	1f4a      	subs	r2, r1, #5
 8001248:	4095      	lsls	r5, r2
 800124a:	002a      	movs	r2, r5
 800124c:	4802      	ldr	r0, [pc, #8]	; (8001258 <__aeabi_i2f+0xa0>)
 800124e:	4002      	ands	r2, r0
 8001250:	076e      	lsls	r6, r5, #29
 8001252:	d0f0      	beq.n	8001236 <__aeabi_i2f+0x7e>
 8001254:	e7e5      	b.n	8001222 <__aeabi_i2f+0x6a>
 8001256:	46c0      	nop			; (mov r8, r8)
 8001258:	fbffffff 	.word	0xfbffffff

0800125c <__aeabi_dadd>:
 800125c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800125e:	464f      	mov	r7, r9
 8001260:	4646      	mov	r6, r8
 8001262:	46d6      	mov	lr, sl
 8001264:	0004      	movs	r4, r0
 8001266:	b5c0      	push	{r6, r7, lr}
 8001268:	001f      	movs	r7, r3
 800126a:	030b      	lsls	r3, r1, #12
 800126c:	0010      	movs	r0, r2
 800126e:	004e      	lsls	r6, r1, #1
 8001270:	0a5b      	lsrs	r3, r3, #9
 8001272:	0fcd      	lsrs	r5, r1, #31
 8001274:	0f61      	lsrs	r1, r4, #29
 8001276:	007a      	lsls	r2, r7, #1
 8001278:	4319      	orrs	r1, r3
 800127a:	00e3      	lsls	r3, r4, #3
 800127c:	033c      	lsls	r4, r7, #12
 800127e:	0fff      	lsrs	r7, r7, #31
 8001280:	46bc      	mov	ip, r7
 8001282:	0a64      	lsrs	r4, r4, #9
 8001284:	0f47      	lsrs	r7, r0, #29
 8001286:	4327      	orrs	r7, r4
 8001288:	0d76      	lsrs	r6, r6, #21
 800128a:	0d52      	lsrs	r2, r2, #21
 800128c:	00c0      	lsls	r0, r0, #3
 800128e:	46b9      	mov	r9, r7
 8001290:	4680      	mov	r8, r0
 8001292:	1ab7      	subs	r7, r6, r2
 8001294:	4565      	cmp	r5, ip
 8001296:	d100      	bne.n	800129a <__aeabi_dadd+0x3e>
 8001298:	e09b      	b.n	80013d2 <__aeabi_dadd+0x176>
 800129a:	2f00      	cmp	r7, #0
 800129c:	dc00      	bgt.n	80012a0 <__aeabi_dadd+0x44>
 800129e:	e084      	b.n	80013aa <__aeabi_dadd+0x14e>
 80012a0:	2a00      	cmp	r2, #0
 80012a2:	d100      	bne.n	80012a6 <__aeabi_dadd+0x4a>
 80012a4:	e0be      	b.n	8001424 <__aeabi_dadd+0x1c8>
 80012a6:	4ac8      	ldr	r2, [pc, #800]	; (80015c8 <__aeabi_dadd+0x36c>)
 80012a8:	4296      	cmp	r6, r2
 80012aa:	d100      	bne.n	80012ae <__aeabi_dadd+0x52>
 80012ac:	e124      	b.n	80014f8 <__aeabi_dadd+0x29c>
 80012ae:	2280      	movs	r2, #128	; 0x80
 80012b0:	464c      	mov	r4, r9
 80012b2:	0412      	lsls	r2, r2, #16
 80012b4:	4314      	orrs	r4, r2
 80012b6:	46a1      	mov	r9, r4
 80012b8:	2f38      	cmp	r7, #56	; 0x38
 80012ba:	dd00      	ble.n	80012be <__aeabi_dadd+0x62>
 80012bc:	e167      	b.n	800158e <__aeabi_dadd+0x332>
 80012be:	2f1f      	cmp	r7, #31
 80012c0:	dd00      	ble.n	80012c4 <__aeabi_dadd+0x68>
 80012c2:	e1d6      	b.n	8001672 <__aeabi_dadd+0x416>
 80012c4:	2220      	movs	r2, #32
 80012c6:	464c      	mov	r4, r9
 80012c8:	1bd2      	subs	r2, r2, r7
 80012ca:	4094      	lsls	r4, r2
 80012cc:	46a2      	mov	sl, r4
 80012ce:	4644      	mov	r4, r8
 80012d0:	40fc      	lsrs	r4, r7
 80012d2:	0020      	movs	r0, r4
 80012d4:	4654      	mov	r4, sl
 80012d6:	4304      	orrs	r4, r0
 80012d8:	4640      	mov	r0, r8
 80012da:	4090      	lsls	r0, r2
 80012dc:	1e42      	subs	r2, r0, #1
 80012de:	4190      	sbcs	r0, r2
 80012e0:	464a      	mov	r2, r9
 80012e2:	40fa      	lsrs	r2, r7
 80012e4:	4304      	orrs	r4, r0
 80012e6:	1a89      	subs	r1, r1, r2
 80012e8:	1b1c      	subs	r4, r3, r4
 80012ea:	42a3      	cmp	r3, r4
 80012ec:	4192      	sbcs	r2, r2
 80012ee:	4252      	negs	r2, r2
 80012f0:	1a8b      	subs	r3, r1, r2
 80012f2:	469a      	mov	sl, r3
 80012f4:	4653      	mov	r3, sl
 80012f6:	021b      	lsls	r3, r3, #8
 80012f8:	d400      	bmi.n	80012fc <__aeabi_dadd+0xa0>
 80012fa:	e0d4      	b.n	80014a6 <__aeabi_dadd+0x24a>
 80012fc:	4653      	mov	r3, sl
 80012fe:	025a      	lsls	r2, r3, #9
 8001300:	0a53      	lsrs	r3, r2, #9
 8001302:	469a      	mov	sl, r3
 8001304:	4653      	mov	r3, sl
 8001306:	2b00      	cmp	r3, #0
 8001308:	d100      	bne.n	800130c <__aeabi_dadd+0xb0>
 800130a:	e104      	b.n	8001516 <__aeabi_dadd+0x2ba>
 800130c:	4650      	mov	r0, sl
 800130e:	f001 fe2f 	bl	8002f70 <__clzsi2>
 8001312:	0003      	movs	r3, r0
 8001314:	3b08      	subs	r3, #8
 8001316:	2220      	movs	r2, #32
 8001318:	0020      	movs	r0, r4
 800131a:	1ad2      	subs	r2, r2, r3
 800131c:	4651      	mov	r1, sl
 800131e:	40d0      	lsrs	r0, r2
 8001320:	4099      	lsls	r1, r3
 8001322:	0002      	movs	r2, r0
 8001324:	409c      	lsls	r4, r3
 8001326:	430a      	orrs	r2, r1
 8001328:	42b3      	cmp	r3, r6
 800132a:	da00      	bge.n	800132e <__aeabi_dadd+0xd2>
 800132c:	e102      	b.n	8001534 <__aeabi_dadd+0x2d8>
 800132e:	1b9b      	subs	r3, r3, r6
 8001330:	1c59      	adds	r1, r3, #1
 8001332:	291f      	cmp	r1, #31
 8001334:	dd00      	ble.n	8001338 <__aeabi_dadd+0xdc>
 8001336:	e0a7      	b.n	8001488 <__aeabi_dadd+0x22c>
 8001338:	2320      	movs	r3, #32
 800133a:	0010      	movs	r0, r2
 800133c:	0026      	movs	r6, r4
 800133e:	1a5b      	subs	r3, r3, r1
 8001340:	409c      	lsls	r4, r3
 8001342:	4098      	lsls	r0, r3
 8001344:	40ce      	lsrs	r6, r1
 8001346:	40ca      	lsrs	r2, r1
 8001348:	1e63      	subs	r3, r4, #1
 800134a:	419c      	sbcs	r4, r3
 800134c:	4330      	orrs	r0, r6
 800134e:	4692      	mov	sl, r2
 8001350:	2600      	movs	r6, #0
 8001352:	4304      	orrs	r4, r0
 8001354:	0763      	lsls	r3, r4, #29
 8001356:	d009      	beq.n	800136c <__aeabi_dadd+0x110>
 8001358:	230f      	movs	r3, #15
 800135a:	4023      	ands	r3, r4
 800135c:	2b04      	cmp	r3, #4
 800135e:	d005      	beq.n	800136c <__aeabi_dadd+0x110>
 8001360:	1d23      	adds	r3, r4, #4
 8001362:	42a3      	cmp	r3, r4
 8001364:	41a4      	sbcs	r4, r4
 8001366:	4264      	negs	r4, r4
 8001368:	44a2      	add	sl, r4
 800136a:	001c      	movs	r4, r3
 800136c:	4653      	mov	r3, sl
 800136e:	021b      	lsls	r3, r3, #8
 8001370:	d400      	bmi.n	8001374 <__aeabi_dadd+0x118>
 8001372:	e09b      	b.n	80014ac <__aeabi_dadd+0x250>
 8001374:	4b94      	ldr	r3, [pc, #592]	; (80015c8 <__aeabi_dadd+0x36c>)
 8001376:	3601      	adds	r6, #1
 8001378:	429e      	cmp	r6, r3
 800137a:	d100      	bne.n	800137e <__aeabi_dadd+0x122>
 800137c:	e0b8      	b.n	80014f0 <__aeabi_dadd+0x294>
 800137e:	4653      	mov	r3, sl
 8001380:	4992      	ldr	r1, [pc, #584]	; (80015cc <__aeabi_dadd+0x370>)
 8001382:	08e4      	lsrs	r4, r4, #3
 8001384:	400b      	ands	r3, r1
 8001386:	0019      	movs	r1, r3
 8001388:	075b      	lsls	r3, r3, #29
 800138a:	4323      	orrs	r3, r4
 800138c:	0572      	lsls	r2, r6, #21
 800138e:	024c      	lsls	r4, r1, #9
 8001390:	0b24      	lsrs	r4, r4, #12
 8001392:	0d52      	lsrs	r2, r2, #21
 8001394:	0512      	lsls	r2, r2, #20
 8001396:	07ed      	lsls	r5, r5, #31
 8001398:	4322      	orrs	r2, r4
 800139a:	432a      	orrs	r2, r5
 800139c:	0018      	movs	r0, r3
 800139e:	0011      	movs	r1, r2
 80013a0:	bce0      	pop	{r5, r6, r7}
 80013a2:	46ba      	mov	sl, r7
 80013a4:	46b1      	mov	r9, r6
 80013a6:	46a8      	mov	r8, r5
 80013a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013aa:	2f00      	cmp	r7, #0
 80013ac:	d048      	beq.n	8001440 <__aeabi_dadd+0x1e4>
 80013ae:	1b97      	subs	r7, r2, r6
 80013b0:	2e00      	cmp	r6, #0
 80013b2:	d000      	beq.n	80013b6 <__aeabi_dadd+0x15a>
 80013b4:	e10e      	b.n	80015d4 <__aeabi_dadd+0x378>
 80013b6:	000c      	movs	r4, r1
 80013b8:	431c      	orrs	r4, r3
 80013ba:	d100      	bne.n	80013be <__aeabi_dadd+0x162>
 80013bc:	e1b7      	b.n	800172e <__aeabi_dadd+0x4d2>
 80013be:	1e7c      	subs	r4, r7, #1
 80013c0:	2f01      	cmp	r7, #1
 80013c2:	d100      	bne.n	80013c6 <__aeabi_dadd+0x16a>
 80013c4:	e226      	b.n	8001814 <__aeabi_dadd+0x5b8>
 80013c6:	4d80      	ldr	r5, [pc, #512]	; (80015c8 <__aeabi_dadd+0x36c>)
 80013c8:	42af      	cmp	r7, r5
 80013ca:	d100      	bne.n	80013ce <__aeabi_dadd+0x172>
 80013cc:	e1d5      	b.n	800177a <__aeabi_dadd+0x51e>
 80013ce:	0027      	movs	r7, r4
 80013d0:	e107      	b.n	80015e2 <__aeabi_dadd+0x386>
 80013d2:	2f00      	cmp	r7, #0
 80013d4:	dc00      	bgt.n	80013d8 <__aeabi_dadd+0x17c>
 80013d6:	e0b2      	b.n	800153e <__aeabi_dadd+0x2e2>
 80013d8:	2a00      	cmp	r2, #0
 80013da:	d047      	beq.n	800146c <__aeabi_dadd+0x210>
 80013dc:	4a7a      	ldr	r2, [pc, #488]	; (80015c8 <__aeabi_dadd+0x36c>)
 80013de:	4296      	cmp	r6, r2
 80013e0:	d100      	bne.n	80013e4 <__aeabi_dadd+0x188>
 80013e2:	e089      	b.n	80014f8 <__aeabi_dadd+0x29c>
 80013e4:	2280      	movs	r2, #128	; 0x80
 80013e6:	464c      	mov	r4, r9
 80013e8:	0412      	lsls	r2, r2, #16
 80013ea:	4314      	orrs	r4, r2
 80013ec:	46a1      	mov	r9, r4
 80013ee:	2f38      	cmp	r7, #56	; 0x38
 80013f0:	dc6b      	bgt.n	80014ca <__aeabi_dadd+0x26e>
 80013f2:	2f1f      	cmp	r7, #31
 80013f4:	dc00      	bgt.n	80013f8 <__aeabi_dadd+0x19c>
 80013f6:	e16e      	b.n	80016d6 <__aeabi_dadd+0x47a>
 80013f8:	003a      	movs	r2, r7
 80013fa:	4648      	mov	r0, r9
 80013fc:	3a20      	subs	r2, #32
 80013fe:	40d0      	lsrs	r0, r2
 8001400:	4684      	mov	ip, r0
 8001402:	2f20      	cmp	r7, #32
 8001404:	d007      	beq.n	8001416 <__aeabi_dadd+0x1ba>
 8001406:	2240      	movs	r2, #64	; 0x40
 8001408:	4648      	mov	r0, r9
 800140a:	1bd2      	subs	r2, r2, r7
 800140c:	4090      	lsls	r0, r2
 800140e:	0002      	movs	r2, r0
 8001410:	4640      	mov	r0, r8
 8001412:	4310      	orrs	r0, r2
 8001414:	4680      	mov	r8, r0
 8001416:	4640      	mov	r0, r8
 8001418:	1e42      	subs	r2, r0, #1
 800141a:	4190      	sbcs	r0, r2
 800141c:	4662      	mov	r2, ip
 800141e:	0004      	movs	r4, r0
 8001420:	4314      	orrs	r4, r2
 8001422:	e057      	b.n	80014d4 <__aeabi_dadd+0x278>
 8001424:	464a      	mov	r2, r9
 8001426:	4302      	orrs	r2, r0
 8001428:	d100      	bne.n	800142c <__aeabi_dadd+0x1d0>
 800142a:	e103      	b.n	8001634 <__aeabi_dadd+0x3d8>
 800142c:	1e7a      	subs	r2, r7, #1
 800142e:	2f01      	cmp	r7, #1
 8001430:	d100      	bne.n	8001434 <__aeabi_dadd+0x1d8>
 8001432:	e193      	b.n	800175c <__aeabi_dadd+0x500>
 8001434:	4c64      	ldr	r4, [pc, #400]	; (80015c8 <__aeabi_dadd+0x36c>)
 8001436:	42a7      	cmp	r7, r4
 8001438:	d100      	bne.n	800143c <__aeabi_dadd+0x1e0>
 800143a:	e18a      	b.n	8001752 <__aeabi_dadd+0x4f6>
 800143c:	0017      	movs	r7, r2
 800143e:	e73b      	b.n	80012b8 <__aeabi_dadd+0x5c>
 8001440:	4c63      	ldr	r4, [pc, #396]	; (80015d0 <__aeabi_dadd+0x374>)
 8001442:	1c72      	adds	r2, r6, #1
 8001444:	4222      	tst	r2, r4
 8001446:	d000      	beq.n	800144a <__aeabi_dadd+0x1ee>
 8001448:	e0e0      	b.n	800160c <__aeabi_dadd+0x3b0>
 800144a:	000a      	movs	r2, r1
 800144c:	431a      	orrs	r2, r3
 800144e:	2e00      	cmp	r6, #0
 8001450:	d000      	beq.n	8001454 <__aeabi_dadd+0x1f8>
 8001452:	e174      	b.n	800173e <__aeabi_dadd+0x4e2>
 8001454:	2a00      	cmp	r2, #0
 8001456:	d100      	bne.n	800145a <__aeabi_dadd+0x1fe>
 8001458:	e1d0      	b.n	80017fc <__aeabi_dadd+0x5a0>
 800145a:	464a      	mov	r2, r9
 800145c:	4302      	orrs	r2, r0
 800145e:	d000      	beq.n	8001462 <__aeabi_dadd+0x206>
 8001460:	e1e3      	b.n	800182a <__aeabi_dadd+0x5ce>
 8001462:	074a      	lsls	r2, r1, #29
 8001464:	08db      	lsrs	r3, r3, #3
 8001466:	4313      	orrs	r3, r2
 8001468:	08c9      	lsrs	r1, r1, #3
 800146a:	e029      	b.n	80014c0 <__aeabi_dadd+0x264>
 800146c:	464a      	mov	r2, r9
 800146e:	4302      	orrs	r2, r0
 8001470:	d100      	bne.n	8001474 <__aeabi_dadd+0x218>
 8001472:	e17d      	b.n	8001770 <__aeabi_dadd+0x514>
 8001474:	1e7a      	subs	r2, r7, #1
 8001476:	2f01      	cmp	r7, #1
 8001478:	d100      	bne.n	800147c <__aeabi_dadd+0x220>
 800147a:	e0e0      	b.n	800163e <__aeabi_dadd+0x3e2>
 800147c:	4c52      	ldr	r4, [pc, #328]	; (80015c8 <__aeabi_dadd+0x36c>)
 800147e:	42a7      	cmp	r7, r4
 8001480:	d100      	bne.n	8001484 <__aeabi_dadd+0x228>
 8001482:	e166      	b.n	8001752 <__aeabi_dadd+0x4f6>
 8001484:	0017      	movs	r7, r2
 8001486:	e7b2      	b.n	80013ee <__aeabi_dadd+0x192>
 8001488:	0010      	movs	r0, r2
 800148a:	3b1f      	subs	r3, #31
 800148c:	40d8      	lsrs	r0, r3
 800148e:	2920      	cmp	r1, #32
 8001490:	d003      	beq.n	800149a <__aeabi_dadd+0x23e>
 8001492:	2340      	movs	r3, #64	; 0x40
 8001494:	1a5b      	subs	r3, r3, r1
 8001496:	409a      	lsls	r2, r3
 8001498:	4314      	orrs	r4, r2
 800149a:	1e63      	subs	r3, r4, #1
 800149c:	419c      	sbcs	r4, r3
 800149e:	2300      	movs	r3, #0
 80014a0:	2600      	movs	r6, #0
 80014a2:	469a      	mov	sl, r3
 80014a4:	4304      	orrs	r4, r0
 80014a6:	0763      	lsls	r3, r4, #29
 80014a8:	d000      	beq.n	80014ac <__aeabi_dadd+0x250>
 80014aa:	e755      	b.n	8001358 <__aeabi_dadd+0xfc>
 80014ac:	4652      	mov	r2, sl
 80014ae:	08e3      	lsrs	r3, r4, #3
 80014b0:	0752      	lsls	r2, r2, #29
 80014b2:	4313      	orrs	r3, r2
 80014b4:	4652      	mov	r2, sl
 80014b6:	0037      	movs	r7, r6
 80014b8:	08d1      	lsrs	r1, r2, #3
 80014ba:	4a43      	ldr	r2, [pc, #268]	; (80015c8 <__aeabi_dadd+0x36c>)
 80014bc:	4297      	cmp	r7, r2
 80014be:	d01f      	beq.n	8001500 <__aeabi_dadd+0x2a4>
 80014c0:	0309      	lsls	r1, r1, #12
 80014c2:	057a      	lsls	r2, r7, #21
 80014c4:	0b0c      	lsrs	r4, r1, #12
 80014c6:	0d52      	lsrs	r2, r2, #21
 80014c8:	e764      	b.n	8001394 <__aeabi_dadd+0x138>
 80014ca:	4642      	mov	r2, r8
 80014cc:	464c      	mov	r4, r9
 80014ce:	4314      	orrs	r4, r2
 80014d0:	1e62      	subs	r2, r4, #1
 80014d2:	4194      	sbcs	r4, r2
 80014d4:	18e4      	adds	r4, r4, r3
 80014d6:	429c      	cmp	r4, r3
 80014d8:	4192      	sbcs	r2, r2
 80014da:	4252      	negs	r2, r2
 80014dc:	4692      	mov	sl, r2
 80014de:	448a      	add	sl, r1
 80014e0:	4653      	mov	r3, sl
 80014e2:	021b      	lsls	r3, r3, #8
 80014e4:	d5df      	bpl.n	80014a6 <__aeabi_dadd+0x24a>
 80014e6:	4b38      	ldr	r3, [pc, #224]	; (80015c8 <__aeabi_dadd+0x36c>)
 80014e8:	3601      	adds	r6, #1
 80014ea:	429e      	cmp	r6, r3
 80014ec:	d000      	beq.n	80014f0 <__aeabi_dadd+0x294>
 80014ee:	e0b3      	b.n	8001658 <__aeabi_dadd+0x3fc>
 80014f0:	0032      	movs	r2, r6
 80014f2:	2400      	movs	r4, #0
 80014f4:	2300      	movs	r3, #0
 80014f6:	e74d      	b.n	8001394 <__aeabi_dadd+0x138>
 80014f8:	074a      	lsls	r2, r1, #29
 80014fa:	08db      	lsrs	r3, r3, #3
 80014fc:	4313      	orrs	r3, r2
 80014fe:	08c9      	lsrs	r1, r1, #3
 8001500:	001a      	movs	r2, r3
 8001502:	430a      	orrs	r2, r1
 8001504:	d100      	bne.n	8001508 <__aeabi_dadd+0x2ac>
 8001506:	e200      	b.n	800190a <__aeabi_dadd+0x6ae>
 8001508:	2480      	movs	r4, #128	; 0x80
 800150a:	0324      	lsls	r4, r4, #12
 800150c:	430c      	orrs	r4, r1
 800150e:	0324      	lsls	r4, r4, #12
 8001510:	4a2d      	ldr	r2, [pc, #180]	; (80015c8 <__aeabi_dadd+0x36c>)
 8001512:	0b24      	lsrs	r4, r4, #12
 8001514:	e73e      	b.n	8001394 <__aeabi_dadd+0x138>
 8001516:	0020      	movs	r0, r4
 8001518:	f001 fd2a 	bl	8002f70 <__clzsi2>
 800151c:	0003      	movs	r3, r0
 800151e:	3318      	adds	r3, #24
 8001520:	2b1f      	cmp	r3, #31
 8001522:	dc00      	bgt.n	8001526 <__aeabi_dadd+0x2ca>
 8001524:	e6f7      	b.n	8001316 <__aeabi_dadd+0xba>
 8001526:	0022      	movs	r2, r4
 8001528:	3808      	subs	r0, #8
 800152a:	4082      	lsls	r2, r0
 800152c:	2400      	movs	r4, #0
 800152e:	42b3      	cmp	r3, r6
 8001530:	db00      	blt.n	8001534 <__aeabi_dadd+0x2d8>
 8001532:	e6fc      	b.n	800132e <__aeabi_dadd+0xd2>
 8001534:	1af6      	subs	r6, r6, r3
 8001536:	4b25      	ldr	r3, [pc, #148]	; (80015cc <__aeabi_dadd+0x370>)
 8001538:	401a      	ands	r2, r3
 800153a:	4692      	mov	sl, r2
 800153c:	e70a      	b.n	8001354 <__aeabi_dadd+0xf8>
 800153e:	2f00      	cmp	r7, #0
 8001540:	d02b      	beq.n	800159a <__aeabi_dadd+0x33e>
 8001542:	1b97      	subs	r7, r2, r6
 8001544:	2e00      	cmp	r6, #0
 8001546:	d100      	bne.n	800154a <__aeabi_dadd+0x2ee>
 8001548:	e0b8      	b.n	80016bc <__aeabi_dadd+0x460>
 800154a:	4c1f      	ldr	r4, [pc, #124]	; (80015c8 <__aeabi_dadd+0x36c>)
 800154c:	42a2      	cmp	r2, r4
 800154e:	d100      	bne.n	8001552 <__aeabi_dadd+0x2f6>
 8001550:	e11c      	b.n	800178c <__aeabi_dadd+0x530>
 8001552:	2480      	movs	r4, #128	; 0x80
 8001554:	0424      	lsls	r4, r4, #16
 8001556:	4321      	orrs	r1, r4
 8001558:	2f38      	cmp	r7, #56	; 0x38
 800155a:	dd00      	ble.n	800155e <__aeabi_dadd+0x302>
 800155c:	e11e      	b.n	800179c <__aeabi_dadd+0x540>
 800155e:	2f1f      	cmp	r7, #31
 8001560:	dd00      	ble.n	8001564 <__aeabi_dadd+0x308>
 8001562:	e19e      	b.n	80018a2 <__aeabi_dadd+0x646>
 8001564:	2620      	movs	r6, #32
 8001566:	000c      	movs	r4, r1
 8001568:	1bf6      	subs	r6, r6, r7
 800156a:	0018      	movs	r0, r3
 800156c:	40b3      	lsls	r3, r6
 800156e:	40b4      	lsls	r4, r6
 8001570:	40f8      	lsrs	r0, r7
 8001572:	1e5e      	subs	r6, r3, #1
 8001574:	41b3      	sbcs	r3, r6
 8001576:	40f9      	lsrs	r1, r7
 8001578:	4304      	orrs	r4, r0
 800157a:	431c      	orrs	r4, r3
 800157c:	4489      	add	r9, r1
 800157e:	4444      	add	r4, r8
 8001580:	4544      	cmp	r4, r8
 8001582:	419b      	sbcs	r3, r3
 8001584:	425b      	negs	r3, r3
 8001586:	444b      	add	r3, r9
 8001588:	469a      	mov	sl, r3
 800158a:	0016      	movs	r6, r2
 800158c:	e7a8      	b.n	80014e0 <__aeabi_dadd+0x284>
 800158e:	4642      	mov	r2, r8
 8001590:	464c      	mov	r4, r9
 8001592:	4314      	orrs	r4, r2
 8001594:	1e62      	subs	r2, r4, #1
 8001596:	4194      	sbcs	r4, r2
 8001598:	e6a6      	b.n	80012e8 <__aeabi_dadd+0x8c>
 800159a:	4c0d      	ldr	r4, [pc, #52]	; (80015d0 <__aeabi_dadd+0x374>)
 800159c:	1c72      	adds	r2, r6, #1
 800159e:	4222      	tst	r2, r4
 80015a0:	d000      	beq.n	80015a4 <__aeabi_dadd+0x348>
 80015a2:	e0a8      	b.n	80016f6 <__aeabi_dadd+0x49a>
 80015a4:	000a      	movs	r2, r1
 80015a6:	431a      	orrs	r2, r3
 80015a8:	2e00      	cmp	r6, #0
 80015aa:	d000      	beq.n	80015ae <__aeabi_dadd+0x352>
 80015ac:	e10a      	b.n	80017c4 <__aeabi_dadd+0x568>
 80015ae:	2a00      	cmp	r2, #0
 80015b0:	d100      	bne.n	80015b4 <__aeabi_dadd+0x358>
 80015b2:	e15e      	b.n	8001872 <__aeabi_dadd+0x616>
 80015b4:	464a      	mov	r2, r9
 80015b6:	4302      	orrs	r2, r0
 80015b8:	d000      	beq.n	80015bc <__aeabi_dadd+0x360>
 80015ba:	e161      	b.n	8001880 <__aeabi_dadd+0x624>
 80015bc:	074a      	lsls	r2, r1, #29
 80015be:	08db      	lsrs	r3, r3, #3
 80015c0:	4313      	orrs	r3, r2
 80015c2:	08c9      	lsrs	r1, r1, #3
 80015c4:	e77c      	b.n	80014c0 <__aeabi_dadd+0x264>
 80015c6:	46c0      	nop			; (mov r8, r8)
 80015c8:	000007ff 	.word	0x000007ff
 80015cc:	ff7fffff 	.word	0xff7fffff
 80015d0:	000007fe 	.word	0x000007fe
 80015d4:	4ccf      	ldr	r4, [pc, #828]	; (8001914 <__aeabi_dadd+0x6b8>)
 80015d6:	42a2      	cmp	r2, r4
 80015d8:	d100      	bne.n	80015dc <__aeabi_dadd+0x380>
 80015da:	e0ce      	b.n	800177a <__aeabi_dadd+0x51e>
 80015dc:	2480      	movs	r4, #128	; 0x80
 80015de:	0424      	lsls	r4, r4, #16
 80015e0:	4321      	orrs	r1, r4
 80015e2:	2f38      	cmp	r7, #56	; 0x38
 80015e4:	dc5b      	bgt.n	800169e <__aeabi_dadd+0x442>
 80015e6:	2f1f      	cmp	r7, #31
 80015e8:	dd00      	ble.n	80015ec <__aeabi_dadd+0x390>
 80015ea:	e0dc      	b.n	80017a6 <__aeabi_dadd+0x54a>
 80015ec:	2520      	movs	r5, #32
 80015ee:	000c      	movs	r4, r1
 80015f0:	1bed      	subs	r5, r5, r7
 80015f2:	001e      	movs	r6, r3
 80015f4:	40ab      	lsls	r3, r5
 80015f6:	40ac      	lsls	r4, r5
 80015f8:	40fe      	lsrs	r6, r7
 80015fa:	1e5d      	subs	r5, r3, #1
 80015fc:	41ab      	sbcs	r3, r5
 80015fe:	4334      	orrs	r4, r6
 8001600:	40f9      	lsrs	r1, r7
 8001602:	431c      	orrs	r4, r3
 8001604:	464b      	mov	r3, r9
 8001606:	1a5b      	subs	r3, r3, r1
 8001608:	4699      	mov	r9, r3
 800160a:	e04c      	b.n	80016a6 <__aeabi_dadd+0x44a>
 800160c:	464a      	mov	r2, r9
 800160e:	1a1c      	subs	r4, r3, r0
 8001610:	1a88      	subs	r0, r1, r2
 8001612:	42a3      	cmp	r3, r4
 8001614:	4192      	sbcs	r2, r2
 8001616:	4252      	negs	r2, r2
 8001618:	4692      	mov	sl, r2
 800161a:	0002      	movs	r2, r0
 800161c:	4650      	mov	r0, sl
 800161e:	1a12      	subs	r2, r2, r0
 8001620:	4692      	mov	sl, r2
 8001622:	0212      	lsls	r2, r2, #8
 8001624:	d478      	bmi.n	8001718 <__aeabi_dadd+0x4bc>
 8001626:	4653      	mov	r3, sl
 8001628:	4323      	orrs	r3, r4
 800162a:	d000      	beq.n	800162e <__aeabi_dadd+0x3d2>
 800162c:	e66a      	b.n	8001304 <__aeabi_dadd+0xa8>
 800162e:	2100      	movs	r1, #0
 8001630:	2500      	movs	r5, #0
 8001632:	e745      	b.n	80014c0 <__aeabi_dadd+0x264>
 8001634:	074a      	lsls	r2, r1, #29
 8001636:	08db      	lsrs	r3, r3, #3
 8001638:	4313      	orrs	r3, r2
 800163a:	08c9      	lsrs	r1, r1, #3
 800163c:	e73d      	b.n	80014ba <__aeabi_dadd+0x25e>
 800163e:	181c      	adds	r4, r3, r0
 8001640:	429c      	cmp	r4, r3
 8001642:	419b      	sbcs	r3, r3
 8001644:	4449      	add	r1, r9
 8001646:	468a      	mov	sl, r1
 8001648:	425b      	negs	r3, r3
 800164a:	449a      	add	sl, r3
 800164c:	4653      	mov	r3, sl
 800164e:	2601      	movs	r6, #1
 8001650:	021b      	lsls	r3, r3, #8
 8001652:	d400      	bmi.n	8001656 <__aeabi_dadd+0x3fa>
 8001654:	e727      	b.n	80014a6 <__aeabi_dadd+0x24a>
 8001656:	2602      	movs	r6, #2
 8001658:	4652      	mov	r2, sl
 800165a:	4baf      	ldr	r3, [pc, #700]	; (8001918 <__aeabi_dadd+0x6bc>)
 800165c:	2101      	movs	r1, #1
 800165e:	401a      	ands	r2, r3
 8001660:	0013      	movs	r3, r2
 8001662:	4021      	ands	r1, r4
 8001664:	0862      	lsrs	r2, r4, #1
 8001666:	430a      	orrs	r2, r1
 8001668:	07dc      	lsls	r4, r3, #31
 800166a:	085b      	lsrs	r3, r3, #1
 800166c:	469a      	mov	sl, r3
 800166e:	4314      	orrs	r4, r2
 8001670:	e670      	b.n	8001354 <__aeabi_dadd+0xf8>
 8001672:	003a      	movs	r2, r7
 8001674:	464c      	mov	r4, r9
 8001676:	3a20      	subs	r2, #32
 8001678:	40d4      	lsrs	r4, r2
 800167a:	46a4      	mov	ip, r4
 800167c:	2f20      	cmp	r7, #32
 800167e:	d007      	beq.n	8001690 <__aeabi_dadd+0x434>
 8001680:	2240      	movs	r2, #64	; 0x40
 8001682:	4648      	mov	r0, r9
 8001684:	1bd2      	subs	r2, r2, r7
 8001686:	4090      	lsls	r0, r2
 8001688:	0002      	movs	r2, r0
 800168a:	4640      	mov	r0, r8
 800168c:	4310      	orrs	r0, r2
 800168e:	4680      	mov	r8, r0
 8001690:	4640      	mov	r0, r8
 8001692:	1e42      	subs	r2, r0, #1
 8001694:	4190      	sbcs	r0, r2
 8001696:	4662      	mov	r2, ip
 8001698:	0004      	movs	r4, r0
 800169a:	4314      	orrs	r4, r2
 800169c:	e624      	b.n	80012e8 <__aeabi_dadd+0x8c>
 800169e:	4319      	orrs	r1, r3
 80016a0:	000c      	movs	r4, r1
 80016a2:	1e63      	subs	r3, r4, #1
 80016a4:	419c      	sbcs	r4, r3
 80016a6:	4643      	mov	r3, r8
 80016a8:	1b1c      	subs	r4, r3, r4
 80016aa:	45a0      	cmp	r8, r4
 80016ac:	419b      	sbcs	r3, r3
 80016ae:	4649      	mov	r1, r9
 80016b0:	425b      	negs	r3, r3
 80016b2:	1acb      	subs	r3, r1, r3
 80016b4:	469a      	mov	sl, r3
 80016b6:	4665      	mov	r5, ip
 80016b8:	0016      	movs	r6, r2
 80016ba:	e61b      	b.n	80012f4 <__aeabi_dadd+0x98>
 80016bc:	000c      	movs	r4, r1
 80016be:	431c      	orrs	r4, r3
 80016c0:	d100      	bne.n	80016c4 <__aeabi_dadd+0x468>
 80016c2:	e0c7      	b.n	8001854 <__aeabi_dadd+0x5f8>
 80016c4:	1e7c      	subs	r4, r7, #1
 80016c6:	2f01      	cmp	r7, #1
 80016c8:	d100      	bne.n	80016cc <__aeabi_dadd+0x470>
 80016ca:	e0f9      	b.n	80018c0 <__aeabi_dadd+0x664>
 80016cc:	4e91      	ldr	r6, [pc, #580]	; (8001914 <__aeabi_dadd+0x6b8>)
 80016ce:	42b7      	cmp	r7, r6
 80016d0:	d05c      	beq.n	800178c <__aeabi_dadd+0x530>
 80016d2:	0027      	movs	r7, r4
 80016d4:	e740      	b.n	8001558 <__aeabi_dadd+0x2fc>
 80016d6:	2220      	movs	r2, #32
 80016d8:	464c      	mov	r4, r9
 80016da:	4640      	mov	r0, r8
 80016dc:	1bd2      	subs	r2, r2, r7
 80016de:	4094      	lsls	r4, r2
 80016e0:	40f8      	lsrs	r0, r7
 80016e2:	4304      	orrs	r4, r0
 80016e4:	4640      	mov	r0, r8
 80016e6:	4090      	lsls	r0, r2
 80016e8:	1e42      	subs	r2, r0, #1
 80016ea:	4190      	sbcs	r0, r2
 80016ec:	464a      	mov	r2, r9
 80016ee:	40fa      	lsrs	r2, r7
 80016f0:	4304      	orrs	r4, r0
 80016f2:	1889      	adds	r1, r1, r2
 80016f4:	e6ee      	b.n	80014d4 <__aeabi_dadd+0x278>
 80016f6:	4c87      	ldr	r4, [pc, #540]	; (8001914 <__aeabi_dadd+0x6b8>)
 80016f8:	42a2      	cmp	r2, r4
 80016fa:	d100      	bne.n	80016fe <__aeabi_dadd+0x4a2>
 80016fc:	e6f9      	b.n	80014f2 <__aeabi_dadd+0x296>
 80016fe:	1818      	adds	r0, r3, r0
 8001700:	4298      	cmp	r0, r3
 8001702:	419b      	sbcs	r3, r3
 8001704:	4449      	add	r1, r9
 8001706:	425b      	negs	r3, r3
 8001708:	18cb      	adds	r3, r1, r3
 800170a:	07dc      	lsls	r4, r3, #31
 800170c:	0840      	lsrs	r0, r0, #1
 800170e:	085b      	lsrs	r3, r3, #1
 8001710:	469a      	mov	sl, r3
 8001712:	0016      	movs	r6, r2
 8001714:	4304      	orrs	r4, r0
 8001716:	e6c6      	b.n	80014a6 <__aeabi_dadd+0x24a>
 8001718:	4642      	mov	r2, r8
 800171a:	1ad4      	subs	r4, r2, r3
 800171c:	45a0      	cmp	r8, r4
 800171e:	4180      	sbcs	r0, r0
 8001720:	464b      	mov	r3, r9
 8001722:	4240      	negs	r0, r0
 8001724:	1a59      	subs	r1, r3, r1
 8001726:	1a0b      	subs	r3, r1, r0
 8001728:	469a      	mov	sl, r3
 800172a:	4665      	mov	r5, ip
 800172c:	e5ea      	b.n	8001304 <__aeabi_dadd+0xa8>
 800172e:	464b      	mov	r3, r9
 8001730:	464a      	mov	r2, r9
 8001732:	08c0      	lsrs	r0, r0, #3
 8001734:	075b      	lsls	r3, r3, #29
 8001736:	4665      	mov	r5, ip
 8001738:	4303      	orrs	r3, r0
 800173a:	08d1      	lsrs	r1, r2, #3
 800173c:	e6bd      	b.n	80014ba <__aeabi_dadd+0x25e>
 800173e:	2a00      	cmp	r2, #0
 8001740:	d000      	beq.n	8001744 <__aeabi_dadd+0x4e8>
 8001742:	e08e      	b.n	8001862 <__aeabi_dadd+0x606>
 8001744:	464b      	mov	r3, r9
 8001746:	4303      	orrs	r3, r0
 8001748:	d117      	bne.n	800177a <__aeabi_dadd+0x51e>
 800174a:	2180      	movs	r1, #128	; 0x80
 800174c:	2500      	movs	r5, #0
 800174e:	0309      	lsls	r1, r1, #12
 8001750:	e6da      	b.n	8001508 <__aeabi_dadd+0x2ac>
 8001752:	074a      	lsls	r2, r1, #29
 8001754:	08db      	lsrs	r3, r3, #3
 8001756:	4313      	orrs	r3, r2
 8001758:	08c9      	lsrs	r1, r1, #3
 800175a:	e6d1      	b.n	8001500 <__aeabi_dadd+0x2a4>
 800175c:	1a1c      	subs	r4, r3, r0
 800175e:	464a      	mov	r2, r9
 8001760:	42a3      	cmp	r3, r4
 8001762:	419b      	sbcs	r3, r3
 8001764:	1a89      	subs	r1, r1, r2
 8001766:	425b      	negs	r3, r3
 8001768:	1acb      	subs	r3, r1, r3
 800176a:	469a      	mov	sl, r3
 800176c:	2601      	movs	r6, #1
 800176e:	e5c1      	b.n	80012f4 <__aeabi_dadd+0x98>
 8001770:	074a      	lsls	r2, r1, #29
 8001772:	08db      	lsrs	r3, r3, #3
 8001774:	4313      	orrs	r3, r2
 8001776:	08c9      	lsrs	r1, r1, #3
 8001778:	e69f      	b.n	80014ba <__aeabi_dadd+0x25e>
 800177a:	4643      	mov	r3, r8
 800177c:	08d8      	lsrs	r0, r3, #3
 800177e:	464b      	mov	r3, r9
 8001780:	464a      	mov	r2, r9
 8001782:	075b      	lsls	r3, r3, #29
 8001784:	4665      	mov	r5, ip
 8001786:	4303      	orrs	r3, r0
 8001788:	08d1      	lsrs	r1, r2, #3
 800178a:	e6b9      	b.n	8001500 <__aeabi_dadd+0x2a4>
 800178c:	4643      	mov	r3, r8
 800178e:	08d8      	lsrs	r0, r3, #3
 8001790:	464b      	mov	r3, r9
 8001792:	464a      	mov	r2, r9
 8001794:	075b      	lsls	r3, r3, #29
 8001796:	4303      	orrs	r3, r0
 8001798:	08d1      	lsrs	r1, r2, #3
 800179a:	e6b1      	b.n	8001500 <__aeabi_dadd+0x2a4>
 800179c:	4319      	orrs	r1, r3
 800179e:	000c      	movs	r4, r1
 80017a0:	1e63      	subs	r3, r4, #1
 80017a2:	419c      	sbcs	r4, r3
 80017a4:	e6eb      	b.n	800157e <__aeabi_dadd+0x322>
 80017a6:	003c      	movs	r4, r7
 80017a8:	000d      	movs	r5, r1
 80017aa:	3c20      	subs	r4, #32
 80017ac:	40e5      	lsrs	r5, r4
 80017ae:	2f20      	cmp	r7, #32
 80017b0:	d003      	beq.n	80017ba <__aeabi_dadd+0x55e>
 80017b2:	2440      	movs	r4, #64	; 0x40
 80017b4:	1be4      	subs	r4, r4, r7
 80017b6:	40a1      	lsls	r1, r4
 80017b8:	430b      	orrs	r3, r1
 80017ba:	001c      	movs	r4, r3
 80017bc:	1e63      	subs	r3, r4, #1
 80017be:	419c      	sbcs	r4, r3
 80017c0:	432c      	orrs	r4, r5
 80017c2:	e770      	b.n	80016a6 <__aeabi_dadd+0x44a>
 80017c4:	2a00      	cmp	r2, #0
 80017c6:	d0e1      	beq.n	800178c <__aeabi_dadd+0x530>
 80017c8:	464a      	mov	r2, r9
 80017ca:	4302      	orrs	r2, r0
 80017cc:	d0c1      	beq.n	8001752 <__aeabi_dadd+0x4f6>
 80017ce:	074a      	lsls	r2, r1, #29
 80017d0:	08db      	lsrs	r3, r3, #3
 80017d2:	4313      	orrs	r3, r2
 80017d4:	2280      	movs	r2, #128	; 0x80
 80017d6:	08c9      	lsrs	r1, r1, #3
 80017d8:	0312      	lsls	r2, r2, #12
 80017da:	4211      	tst	r1, r2
 80017dc:	d008      	beq.n	80017f0 <__aeabi_dadd+0x594>
 80017de:	4648      	mov	r0, r9
 80017e0:	08c4      	lsrs	r4, r0, #3
 80017e2:	4214      	tst	r4, r2
 80017e4:	d104      	bne.n	80017f0 <__aeabi_dadd+0x594>
 80017e6:	4643      	mov	r3, r8
 80017e8:	0021      	movs	r1, r4
 80017ea:	08db      	lsrs	r3, r3, #3
 80017ec:	0742      	lsls	r2, r0, #29
 80017ee:	4313      	orrs	r3, r2
 80017f0:	0f5a      	lsrs	r2, r3, #29
 80017f2:	00db      	lsls	r3, r3, #3
 80017f4:	0752      	lsls	r2, r2, #29
 80017f6:	08db      	lsrs	r3, r3, #3
 80017f8:	4313      	orrs	r3, r2
 80017fa:	e681      	b.n	8001500 <__aeabi_dadd+0x2a4>
 80017fc:	464b      	mov	r3, r9
 80017fe:	4303      	orrs	r3, r0
 8001800:	d100      	bne.n	8001804 <__aeabi_dadd+0x5a8>
 8001802:	e714      	b.n	800162e <__aeabi_dadd+0x3d2>
 8001804:	464b      	mov	r3, r9
 8001806:	464a      	mov	r2, r9
 8001808:	08c0      	lsrs	r0, r0, #3
 800180a:	075b      	lsls	r3, r3, #29
 800180c:	4665      	mov	r5, ip
 800180e:	4303      	orrs	r3, r0
 8001810:	08d1      	lsrs	r1, r2, #3
 8001812:	e655      	b.n	80014c0 <__aeabi_dadd+0x264>
 8001814:	1ac4      	subs	r4, r0, r3
 8001816:	45a0      	cmp	r8, r4
 8001818:	4180      	sbcs	r0, r0
 800181a:	464b      	mov	r3, r9
 800181c:	4240      	negs	r0, r0
 800181e:	1a59      	subs	r1, r3, r1
 8001820:	1a0b      	subs	r3, r1, r0
 8001822:	469a      	mov	sl, r3
 8001824:	4665      	mov	r5, ip
 8001826:	2601      	movs	r6, #1
 8001828:	e564      	b.n	80012f4 <__aeabi_dadd+0x98>
 800182a:	1a1c      	subs	r4, r3, r0
 800182c:	464a      	mov	r2, r9
 800182e:	42a3      	cmp	r3, r4
 8001830:	4180      	sbcs	r0, r0
 8001832:	1a8a      	subs	r2, r1, r2
 8001834:	4240      	negs	r0, r0
 8001836:	1a12      	subs	r2, r2, r0
 8001838:	4692      	mov	sl, r2
 800183a:	0212      	lsls	r2, r2, #8
 800183c:	d549      	bpl.n	80018d2 <__aeabi_dadd+0x676>
 800183e:	4642      	mov	r2, r8
 8001840:	1ad4      	subs	r4, r2, r3
 8001842:	45a0      	cmp	r8, r4
 8001844:	4180      	sbcs	r0, r0
 8001846:	464b      	mov	r3, r9
 8001848:	4240      	negs	r0, r0
 800184a:	1a59      	subs	r1, r3, r1
 800184c:	1a0b      	subs	r3, r1, r0
 800184e:	469a      	mov	sl, r3
 8001850:	4665      	mov	r5, ip
 8001852:	e57f      	b.n	8001354 <__aeabi_dadd+0xf8>
 8001854:	464b      	mov	r3, r9
 8001856:	464a      	mov	r2, r9
 8001858:	08c0      	lsrs	r0, r0, #3
 800185a:	075b      	lsls	r3, r3, #29
 800185c:	4303      	orrs	r3, r0
 800185e:	08d1      	lsrs	r1, r2, #3
 8001860:	e62b      	b.n	80014ba <__aeabi_dadd+0x25e>
 8001862:	464a      	mov	r2, r9
 8001864:	08db      	lsrs	r3, r3, #3
 8001866:	4302      	orrs	r2, r0
 8001868:	d138      	bne.n	80018dc <__aeabi_dadd+0x680>
 800186a:	074a      	lsls	r2, r1, #29
 800186c:	4313      	orrs	r3, r2
 800186e:	08c9      	lsrs	r1, r1, #3
 8001870:	e646      	b.n	8001500 <__aeabi_dadd+0x2a4>
 8001872:	464b      	mov	r3, r9
 8001874:	464a      	mov	r2, r9
 8001876:	08c0      	lsrs	r0, r0, #3
 8001878:	075b      	lsls	r3, r3, #29
 800187a:	4303      	orrs	r3, r0
 800187c:	08d1      	lsrs	r1, r2, #3
 800187e:	e61f      	b.n	80014c0 <__aeabi_dadd+0x264>
 8001880:	181c      	adds	r4, r3, r0
 8001882:	429c      	cmp	r4, r3
 8001884:	419b      	sbcs	r3, r3
 8001886:	4449      	add	r1, r9
 8001888:	468a      	mov	sl, r1
 800188a:	425b      	negs	r3, r3
 800188c:	449a      	add	sl, r3
 800188e:	4653      	mov	r3, sl
 8001890:	021b      	lsls	r3, r3, #8
 8001892:	d400      	bmi.n	8001896 <__aeabi_dadd+0x63a>
 8001894:	e607      	b.n	80014a6 <__aeabi_dadd+0x24a>
 8001896:	4652      	mov	r2, sl
 8001898:	4b1f      	ldr	r3, [pc, #124]	; (8001918 <__aeabi_dadd+0x6bc>)
 800189a:	2601      	movs	r6, #1
 800189c:	401a      	ands	r2, r3
 800189e:	4692      	mov	sl, r2
 80018a0:	e601      	b.n	80014a6 <__aeabi_dadd+0x24a>
 80018a2:	003c      	movs	r4, r7
 80018a4:	000e      	movs	r6, r1
 80018a6:	3c20      	subs	r4, #32
 80018a8:	40e6      	lsrs	r6, r4
 80018aa:	2f20      	cmp	r7, #32
 80018ac:	d003      	beq.n	80018b6 <__aeabi_dadd+0x65a>
 80018ae:	2440      	movs	r4, #64	; 0x40
 80018b0:	1be4      	subs	r4, r4, r7
 80018b2:	40a1      	lsls	r1, r4
 80018b4:	430b      	orrs	r3, r1
 80018b6:	001c      	movs	r4, r3
 80018b8:	1e63      	subs	r3, r4, #1
 80018ba:	419c      	sbcs	r4, r3
 80018bc:	4334      	orrs	r4, r6
 80018be:	e65e      	b.n	800157e <__aeabi_dadd+0x322>
 80018c0:	4443      	add	r3, r8
 80018c2:	4283      	cmp	r3, r0
 80018c4:	4180      	sbcs	r0, r0
 80018c6:	4449      	add	r1, r9
 80018c8:	468a      	mov	sl, r1
 80018ca:	4240      	negs	r0, r0
 80018cc:	001c      	movs	r4, r3
 80018ce:	4482      	add	sl, r0
 80018d0:	e6bc      	b.n	800164c <__aeabi_dadd+0x3f0>
 80018d2:	4653      	mov	r3, sl
 80018d4:	4323      	orrs	r3, r4
 80018d6:	d100      	bne.n	80018da <__aeabi_dadd+0x67e>
 80018d8:	e6a9      	b.n	800162e <__aeabi_dadd+0x3d2>
 80018da:	e5e4      	b.n	80014a6 <__aeabi_dadd+0x24a>
 80018dc:	074a      	lsls	r2, r1, #29
 80018de:	4313      	orrs	r3, r2
 80018e0:	2280      	movs	r2, #128	; 0x80
 80018e2:	08c9      	lsrs	r1, r1, #3
 80018e4:	0312      	lsls	r2, r2, #12
 80018e6:	4211      	tst	r1, r2
 80018e8:	d009      	beq.n	80018fe <__aeabi_dadd+0x6a2>
 80018ea:	4648      	mov	r0, r9
 80018ec:	08c4      	lsrs	r4, r0, #3
 80018ee:	4214      	tst	r4, r2
 80018f0:	d105      	bne.n	80018fe <__aeabi_dadd+0x6a2>
 80018f2:	4643      	mov	r3, r8
 80018f4:	4665      	mov	r5, ip
 80018f6:	0021      	movs	r1, r4
 80018f8:	08db      	lsrs	r3, r3, #3
 80018fa:	0742      	lsls	r2, r0, #29
 80018fc:	4313      	orrs	r3, r2
 80018fe:	0f5a      	lsrs	r2, r3, #29
 8001900:	00db      	lsls	r3, r3, #3
 8001902:	08db      	lsrs	r3, r3, #3
 8001904:	0752      	lsls	r2, r2, #29
 8001906:	4313      	orrs	r3, r2
 8001908:	e5fa      	b.n	8001500 <__aeabi_dadd+0x2a4>
 800190a:	2300      	movs	r3, #0
 800190c:	4a01      	ldr	r2, [pc, #4]	; (8001914 <__aeabi_dadd+0x6b8>)
 800190e:	001c      	movs	r4, r3
 8001910:	e540      	b.n	8001394 <__aeabi_dadd+0x138>
 8001912:	46c0      	nop			; (mov r8, r8)
 8001914:	000007ff 	.word	0x000007ff
 8001918:	ff7fffff 	.word	0xff7fffff

0800191c <__aeabi_ddiv>:
 800191c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800191e:	4657      	mov	r7, sl
 8001920:	464e      	mov	r6, r9
 8001922:	4645      	mov	r5, r8
 8001924:	46de      	mov	lr, fp
 8001926:	b5e0      	push	{r5, r6, r7, lr}
 8001928:	030c      	lsls	r4, r1, #12
 800192a:	001f      	movs	r7, r3
 800192c:	004b      	lsls	r3, r1, #1
 800192e:	4681      	mov	r9, r0
 8001930:	4692      	mov	sl, r2
 8001932:	0005      	movs	r5, r0
 8001934:	b085      	sub	sp, #20
 8001936:	0b24      	lsrs	r4, r4, #12
 8001938:	0d5b      	lsrs	r3, r3, #21
 800193a:	0fce      	lsrs	r6, r1, #31
 800193c:	2b00      	cmp	r3, #0
 800193e:	d100      	bne.n	8001942 <__aeabi_ddiv+0x26>
 8001940:	e152      	b.n	8001be8 <__aeabi_ddiv+0x2cc>
 8001942:	4ad2      	ldr	r2, [pc, #840]	; (8001c8c <__aeabi_ddiv+0x370>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d100      	bne.n	800194a <__aeabi_ddiv+0x2e>
 8001948:	e16e      	b.n	8001c28 <__aeabi_ddiv+0x30c>
 800194a:	0f42      	lsrs	r2, r0, #29
 800194c:	00e4      	lsls	r4, r4, #3
 800194e:	4314      	orrs	r4, r2
 8001950:	2280      	movs	r2, #128	; 0x80
 8001952:	0412      	lsls	r2, r2, #16
 8001954:	4322      	orrs	r2, r4
 8001956:	4690      	mov	r8, r2
 8001958:	4acd      	ldr	r2, [pc, #820]	; (8001c90 <__aeabi_ddiv+0x374>)
 800195a:	00c5      	lsls	r5, r0, #3
 800195c:	4693      	mov	fp, r2
 800195e:	449b      	add	fp, r3
 8001960:	2300      	movs	r3, #0
 8001962:	4699      	mov	r9, r3
 8001964:	9300      	str	r3, [sp, #0]
 8001966:	033c      	lsls	r4, r7, #12
 8001968:	007b      	lsls	r3, r7, #1
 800196a:	4650      	mov	r0, sl
 800196c:	0b24      	lsrs	r4, r4, #12
 800196e:	0d5b      	lsrs	r3, r3, #21
 8001970:	0fff      	lsrs	r7, r7, #31
 8001972:	2b00      	cmp	r3, #0
 8001974:	d100      	bne.n	8001978 <__aeabi_ddiv+0x5c>
 8001976:	e11a      	b.n	8001bae <__aeabi_ddiv+0x292>
 8001978:	4ac4      	ldr	r2, [pc, #784]	; (8001c8c <__aeabi_ddiv+0x370>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d100      	bne.n	8001980 <__aeabi_ddiv+0x64>
 800197e:	e15e      	b.n	8001c3e <__aeabi_ddiv+0x322>
 8001980:	0f42      	lsrs	r2, r0, #29
 8001982:	00e4      	lsls	r4, r4, #3
 8001984:	4322      	orrs	r2, r4
 8001986:	2480      	movs	r4, #128	; 0x80
 8001988:	0424      	lsls	r4, r4, #16
 800198a:	4314      	orrs	r4, r2
 800198c:	4ac0      	ldr	r2, [pc, #768]	; (8001c90 <__aeabi_ddiv+0x374>)
 800198e:	00c1      	lsls	r1, r0, #3
 8001990:	4694      	mov	ip, r2
 8001992:	465a      	mov	r2, fp
 8001994:	4463      	add	r3, ip
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	469b      	mov	fp, r3
 800199a:	2000      	movs	r0, #0
 800199c:	0033      	movs	r3, r6
 800199e:	407b      	eors	r3, r7
 80019a0:	469a      	mov	sl, r3
 80019a2:	464b      	mov	r3, r9
 80019a4:	2b0f      	cmp	r3, #15
 80019a6:	d827      	bhi.n	80019f8 <__aeabi_ddiv+0xdc>
 80019a8:	4aba      	ldr	r2, [pc, #744]	; (8001c94 <__aeabi_ddiv+0x378>)
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	58d3      	ldr	r3, [r2, r3]
 80019ae:	469f      	mov	pc, r3
 80019b0:	46b2      	mov	sl, r6
 80019b2:	9b00      	ldr	r3, [sp, #0]
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d016      	beq.n	80019e6 <__aeabi_ddiv+0xca>
 80019b8:	2b03      	cmp	r3, #3
 80019ba:	d100      	bne.n	80019be <__aeabi_ddiv+0xa2>
 80019bc:	e287      	b.n	8001ece <__aeabi_ddiv+0x5b2>
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d000      	beq.n	80019c4 <__aeabi_ddiv+0xa8>
 80019c2:	e0d5      	b.n	8001b70 <__aeabi_ddiv+0x254>
 80019c4:	2300      	movs	r3, #0
 80019c6:	2200      	movs	r2, #0
 80019c8:	2500      	movs	r5, #0
 80019ca:	051b      	lsls	r3, r3, #20
 80019cc:	4313      	orrs	r3, r2
 80019ce:	4652      	mov	r2, sl
 80019d0:	07d2      	lsls	r2, r2, #31
 80019d2:	4313      	orrs	r3, r2
 80019d4:	0028      	movs	r0, r5
 80019d6:	0019      	movs	r1, r3
 80019d8:	b005      	add	sp, #20
 80019da:	bcf0      	pop	{r4, r5, r6, r7}
 80019dc:	46bb      	mov	fp, r7
 80019de:	46b2      	mov	sl, r6
 80019e0:	46a9      	mov	r9, r5
 80019e2:	46a0      	mov	r8, r4
 80019e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019e6:	2200      	movs	r2, #0
 80019e8:	2500      	movs	r5, #0
 80019ea:	4ba8      	ldr	r3, [pc, #672]	; (8001c8c <__aeabi_ddiv+0x370>)
 80019ec:	e7ed      	b.n	80019ca <__aeabi_ddiv+0xae>
 80019ee:	46ba      	mov	sl, r7
 80019f0:	46a0      	mov	r8, r4
 80019f2:	000d      	movs	r5, r1
 80019f4:	9000      	str	r0, [sp, #0]
 80019f6:	e7dc      	b.n	80019b2 <__aeabi_ddiv+0x96>
 80019f8:	4544      	cmp	r4, r8
 80019fa:	d200      	bcs.n	80019fe <__aeabi_ddiv+0xe2>
 80019fc:	e1c4      	b.n	8001d88 <__aeabi_ddiv+0x46c>
 80019fe:	d100      	bne.n	8001a02 <__aeabi_ddiv+0xe6>
 8001a00:	e1bf      	b.n	8001d82 <__aeabi_ddiv+0x466>
 8001a02:	2301      	movs	r3, #1
 8001a04:	425b      	negs	r3, r3
 8001a06:	469c      	mov	ip, r3
 8001a08:	002e      	movs	r6, r5
 8001a0a:	4640      	mov	r0, r8
 8001a0c:	2500      	movs	r5, #0
 8001a0e:	44e3      	add	fp, ip
 8001a10:	0223      	lsls	r3, r4, #8
 8001a12:	0e0c      	lsrs	r4, r1, #24
 8001a14:	431c      	orrs	r4, r3
 8001a16:	0c1b      	lsrs	r3, r3, #16
 8001a18:	4699      	mov	r9, r3
 8001a1a:	0423      	lsls	r3, r4, #16
 8001a1c:	020a      	lsls	r2, r1, #8
 8001a1e:	0c1f      	lsrs	r7, r3, #16
 8001a20:	4649      	mov	r1, r9
 8001a22:	9200      	str	r2, [sp, #0]
 8001a24:	9701      	str	r7, [sp, #4]
 8001a26:	f7fe fbf1 	bl	800020c <__aeabi_uidivmod>
 8001a2a:	0002      	movs	r2, r0
 8001a2c:	437a      	muls	r2, r7
 8001a2e:	040b      	lsls	r3, r1, #16
 8001a30:	0c31      	lsrs	r1, r6, #16
 8001a32:	4680      	mov	r8, r0
 8001a34:	4319      	orrs	r1, r3
 8001a36:	428a      	cmp	r2, r1
 8001a38:	d907      	bls.n	8001a4a <__aeabi_ddiv+0x12e>
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	425b      	negs	r3, r3
 8001a3e:	469c      	mov	ip, r3
 8001a40:	1909      	adds	r1, r1, r4
 8001a42:	44e0      	add	r8, ip
 8001a44:	428c      	cmp	r4, r1
 8001a46:	d800      	bhi.n	8001a4a <__aeabi_ddiv+0x12e>
 8001a48:	e201      	b.n	8001e4e <__aeabi_ddiv+0x532>
 8001a4a:	1a88      	subs	r0, r1, r2
 8001a4c:	4649      	mov	r1, r9
 8001a4e:	f7fe fbdd 	bl	800020c <__aeabi_uidivmod>
 8001a52:	9a01      	ldr	r2, [sp, #4]
 8001a54:	0436      	lsls	r6, r6, #16
 8001a56:	4342      	muls	r2, r0
 8001a58:	0409      	lsls	r1, r1, #16
 8001a5a:	0c36      	lsrs	r6, r6, #16
 8001a5c:	0003      	movs	r3, r0
 8001a5e:	430e      	orrs	r6, r1
 8001a60:	42b2      	cmp	r2, r6
 8001a62:	d904      	bls.n	8001a6e <__aeabi_ddiv+0x152>
 8001a64:	1936      	adds	r6, r6, r4
 8001a66:	3b01      	subs	r3, #1
 8001a68:	42b4      	cmp	r4, r6
 8001a6a:	d800      	bhi.n	8001a6e <__aeabi_ddiv+0x152>
 8001a6c:	e1e9      	b.n	8001e42 <__aeabi_ddiv+0x526>
 8001a6e:	1ab0      	subs	r0, r6, r2
 8001a70:	4642      	mov	r2, r8
 8001a72:	9e00      	ldr	r6, [sp, #0]
 8001a74:	0412      	lsls	r2, r2, #16
 8001a76:	431a      	orrs	r2, r3
 8001a78:	0c33      	lsrs	r3, r6, #16
 8001a7a:	001f      	movs	r7, r3
 8001a7c:	0c11      	lsrs	r1, r2, #16
 8001a7e:	4690      	mov	r8, r2
 8001a80:	9302      	str	r3, [sp, #8]
 8001a82:	0413      	lsls	r3, r2, #16
 8001a84:	0432      	lsls	r2, r6, #16
 8001a86:	0c16      	lsrs	r6, r2, #16
 8001a88:	0032      	movs	r2, r6
 8001a8a:	0c1b      	lsrs	r3, r3, #16
 8001a8c:	435a      	muls	r2, r3
 8001a8e:	9603      	str	r6, [sp, #12]
 8001a90:	437b      	muls	r3, r7
 8001a92:	434e      	muls	r6, r1
 8001a94:	4379      	muls	r1, r7
 8001a96:	0c17      	lsrs	r7, r2, #16
 8001a98:	46bc      	mov	ip, r7
 8001a9a:	199b      	adds	r3, r3, r6
 8001a9c:	4463      	add	r3, ip
 8001a9e:	429e      	cmp	r6, r3
 8001aa0:	d903      	bls.n	8001aaa <__aeabi_ddiv+0x18e>
 8001aa2:	2680      	movs	r6, #128	; 0x80
 8001aa4:	0276      	lsls	r6, r6, #9
 8001aa6:	46b4      	mov	ip, r6
 8001aa8:	4461      	add	r1, ip
 8001aaa:	0c1e      	lsrs	r6, r3, #16
 8001aac:	1871      	adds	r1, r6, r1
 8001aae:	0416      	lsls	r6, r2, #16
 8001ab0:	041b      	lsls	r3, r3, #16
 8001ab2:	0c36      	lsrs	r6, r6, #16
 8001ab4:	199e      	adds	r6, r3, r6
 8001ab6:	4288      	cmp	r0, r1
 8001ab8:	d302      	bcc.n	8001ac0 <__aeabi_ddiv+0x1a4>
 8001aba:	d112      	bne.n	8001ae2 <__aeabi_ddiv+0x1c6>
 8001abc:	42b5      	cmp	r5, r6
 8001abe:	d210      	bcs.n	8001ae2 <__aeabi_ddiv+0x1c6>
 8001ac0:	4643      	mov	r3, r8
 8001ac2:	1e5a      	subs	r2, r3, #1
 8001ac4:	9b00      	ldr	r3, [sp, #0]
 8001ac6:	469c      	mov	ip, r3
 8001ac8:	4465      	add	r5, ip
 8001aca:	001f      	movs	r7, r3
 8001acc:	429d      	cmp	r5, r3
 8001ace:	419b      	sbcs	r3, r3
 8001ad0:	425b      	negs	r3, r3
 8001ad2:	191b      	adds	r3, r3, r4
 8001ad4:	18c0      	adds	r0, r0, r3
 8001ad6:	4284      	cmp	r4, r0
 8001ad8:	d200      	bcs.n	8001adc <__aeabi_ddiv+0x1c0>
 8001ada:	e19e      	b.n	8001e1a <__aeabi_ddiv+0x4fe>
 8001adc:	d100      	bne.n	8001ae0 <__aeabi_ddiv+0x1c4>
 8001ade:	e199      	b.n	8001e14 <__aeabi_ddiv+0x4f8>
 8001ae0:	4690      	mov	r8, r2
 8001ae2:	1bae      	subs	r6, r5, r6
 8001ae4:	42b5      	cmp	r5, r6
 8001ae6:	41ad      	sbcs	r5, r5
 8001ae8:	1a40      	subs	r0, r0, r1
 8001aea:	426d      	negs	r5, r5
 8001aec:	1b40      	subs	r0, r0, r5
 8001aee:	4284      	cmp	r4, r0
 8001af0:	d100      	bne.n	8001af4 <__aeabi_ddiv+0x1d8>
 8001af2:	e1d2      	b.n	8001e9a <__aeabi_ddiv+0x57e>
 8001af4:	4649      	mov	r1, r9
 8001af6:	f7fe fb89 	bl	800020c <__aeabi_uidivmod>
 8001afa:	9a01      	ldr	r2, [sp, #4]
 8001afc:	040b      	lsls	r3, r1, #16
 8001afe:	4342      	muls	r2, r0
 8001b00:	0c31      	lsrs	r1, r6, #16
 8001b02:	0005      	movs	r5, r0
 8001b04:	4319      	orrs	r1, r3
 8001b06:	428a      	cmp	r2, r1
 8001b08:	d900      	bls.n	8001b0c <__aeabi_ddiv+0x1f0>
 8001b0a:	e16c      	b.n	8001de6 <__aeabi_ddiv+0x4ca>
 8001b0c:	1a88      	subs	r0, r1, r2
 8001b0e:	4649      	mov	r1, r9
 8001b10:	f7fe fb7c 	bl	800020c <__aeabi_uidivmod>
 8001b14:	9a01      	ldr	r2, [sp, #4]
 8001b16:	0436      	lsls	r6, r6, #16
 8001b18:	4342      	muls	r2, r0
 8001b1a:	0409      	lsls	r1, r1, #16
 8001b1c:	0c36      	lsrs	r6, r6, #16
 8001b1e:	0003      	movs	r3, r0
 8001b20:	430e      	orrs	r6, r1
 8001b22:	42b2      	cmp	r2, r6
 8001b24:	d900      	bls.n	8001b28 <__aeabi_ddiv+0x20c>
 8001b26:	e153      	b.n	8001dd0 <__aeabi_ddiv+0x4b4>
 8001b28:	9803      	ldr	r0, [sp, #12]
 8001b2a:	1ab6      	subs	r6, r6, r2
 8001b2c:	0002      	movs	r2, r0
 8001b2e:	042d      	lsls	r5, r5, #16
 8001b30:	431d      	orrs	r5, r3
 8001b32:	9f02      	ldr	r7, [sp, #8]
 8001b34:	042b      	lsls	r3, r5, #16
 8001b36:	0c1b      	lsrs	r3, r3, #16
 8001b38:	435a      	muls	r2, r3
 8001b3a:	437b      	muls	r3, r7
 8001b3c:	469c      	mov	ip, r3
 8001b3e:	0c29      	lsrs	r1, r5, #16
 8001b40:	4348      	muls	r0, r1
 8001b42:	0c13      	lsrs	r3, r2, #16
 8001b44:	4484      	add	ip, r0
 8001b46:	4463      	add	r3, ip
 8001b48:	4379      	muls	r1, r7
 8001b4a:	4298      	cmp	r0, r3
 8001b4c:	d903      	bls.n	8001b56 <__aeabi_ddiv+0x23a>
 8001b4e:	2080      	movs	r0, #128	; 0x80
 8001b50:	0240      	lsls	r0, r0, #9
 8001b52:	4684      	mov	ip, r0
 8001b54:	4461      	add	r1, ip
 8001b56:	0c18      	lsrs	r0, r3, #16
 8001b58:	0412      	lsls	r2, r2, #16
 8001b5a:	041b      	lsls	r3, r3, #16
 8001b5c:	0c12      	lsrs	r2, r2, #16
 8001b5e:	1840      	adds	r0, r0, r1
 8001b60:	189b      	adds	r3, r3, r2
 8001b62:	4286      	cmp	r6, r0
 8001b64:	d200      	bcs.n	8001b68 <__aeabi_ddiv+0x24c>
 8001b66:	e100      	b.n	8001d6a <__aeabi_ddiv+0x44e>
 8001b68:	d100      	bne.n	8001b6c <__aeabi_ddiv+0x250>
 8001b6a:	e0fb      	b.n	8001d64 <__aeabi_ddiv+0x448>
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	431d      	orrs	r5, r3
 8001b70:	4b49      	ldr	r3, [pc, #292]	; (8001c98 <__aeabi_ddiv+0x37c>)
 8001b72:	445b      	add	r3, fp
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	dc00      	bgt.n	8001b7a <__aeabi_ddiv+0x25e>
 8001b78:	e0aa      	b.n	8001cd0 <__aeabi_ddiv+0x3b4>
 8001b7a:	076a      	lsls	r2, r5, #29
 8001b7c:	d000      	beq.n	8001b80 <__aeabi_ddiv+0x264>
 8001b7e:	e13d      	b.n	8001dfc <__aeabi_ddiv+0x4e0>
 8001b80:	08e9      	lsrs	r1, r5, #3
 8001b82:	4642      	mov	r2, r8
 8001b84:	01d2      	lsls	r2, r2, #7
 8001b86:	d506      	bpl.n	8001b96 <__aeabi_ddiv+0x27a>
 8001b88:	4642      	mov	r2, r8
 8001b8a:	4b44      	ldr	r3, [pc, #272]	; (8001c9c <__aeabi_ddiv+0x380>)
 8001b8c:	401a      	ands	r2, r3
 8001b8e:	2380      	movs	r3, #128	; 0x80
 8001b90:	4690      	mov	r8, r2
 8001b92:	00db      	lsls	r3, r3, #3
 8001b94:	445b      	add	r3, fp
 8001b96:	4a42      	ldr	r2, [pc, #264]	; (8001ca0 <__aeabi_ddiv+0x384>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	dd00      	ble.n	8001b9e <__aeabi_ddiv+0x282>
 8001b9c:	e723      	b.n	80019e6 <__aeabi_ddiv+0xca>
 8001b9e:	4642      	mov	r2, r8
 8001ba0:	055b      	lsls	r3, r3, #21
 8001ba2:	0755      	lsls	r5, r2, #29
 8001ba4:	0252      	lsls	r2, r2, #9
 8001ba6:	430d      	orrs	r5, r1
 8001ba8:	0b12      	lsrs	r2, r2, #12
 8001baa:	0d5b      	lsrs	r3, r3, #21
 8001bac:	e70d      	b.n	80019ca <__aeabi_ddiv+0xae>
 8001bae:	4651      	mov	r1, sl
 8001bb0:	4321      	orrs	r1, r4
 8001bb2:	d100      	bne.n	8001bb6 <__aeabi_ddiv+0x29a>
 8001bb4:	e07c      	b.n	8001cb0 <__aeabi_ddiv+0x394>
 8001bb6:	2c00      	cmp	r4, #0
 8001bb8:	d100      	bne.n	8001bbc <__aeabi_ddiv+0x2a0>
 8001bba:	e0fb      	b.n	8001db4 <__aeabi_ddiv+0x498>
 8001bbc:	0020      	movs	r0, r4
 8001bbe:	f001 f9d7 	bl	8002f70 <__clzsi2>
 8001bc2:	0002      	movs	r2, r0
 8001bc4:	3a0b      	subs	r2, #11
 8001bc6:	231d      	movs	r3, #29
 8001bc8:	1a9b      	subs	r3, r3, r2
 8001bca:	4652      	mov	r2, sl
 8001bcc:	0001      	movs	r1, r0
 8001bce:	40da      	lsrs	r2, r3
 8001bd0:	4653      	mov	r3, sl
 8001bd2:	3908      	subs	r1, #8
 8001bd4:	408b      	lsls	r3, r1
 8001bd6:	408c      	lsls	r4, r1
 8001bd8:	0019      	movs	r1, r3
 8001bda:	4314      	orrs	r4, r2
 8001bdc:	4b31      	ldr	r3, [pc, #196]	; (8001ca4 <__aeabi_ddiv+0x388>)
 8001bde:	4458      	add	r0, fp
 8001be0:	469b      	mov	fp, r3
 8001be2:	4483      	add	fp, r0
 8001be4:	2000      	movs	r0, #0
 8001be6:	e6d9      	b.n	800199c <__aeabi_ddiv+0x80>
 8001be8:	0003      	movs	r3, r0
 8001bea:	4323      	orrs	r3, r4
 8001bec:	4698      	mov	r8, r3
 8001bee:	d044      	beq.n	8001c7a <__aeabi_ddiv+0x35e>
 8001bf0:	2c00      	cmp	r4, #0
 8001bf2:	d100      	bne.n	8001bf6 <__aeabi_ddiv+0x2da>
 8001bf4:	e0cf      	b.n	8001d96 <__aeabi_ddiv+0x47a>
 8001bf6:	0020      	movs	r0, r4
 8001bf8:	f001 f9ba 	bl	8002f70 <__clzsi2>
 8001bfc:	0001      	movs	r1, r0
 8001bfe:	0002      	movs	r2, r0
 8001c00:	390b      	subs	r1, #11
 8001c02:	231d      	movs	r3, #29
 8001c04:	1a5b      	subs	r3, r3, r1
 8001c06:	4649      	mov	r1, r9
 8001c08:	0010      	movs	r0, r2
 8001c0a:	40d9      	lsrs	r1, r3
 8001c0c:	3808      	subs	r0, #8
 8001c0e:	4084      	lsls	r4, r0
 8001c10:	000b      	movs	r3, r1
 8001c12:	464d      	mov	r5, r9
 8001c14:	4323      	orrs	r3, r4
 8001c16:	4698      	mov	r8, r3
 8001c18:	4085      	lsls	r5, r0
 8001c1a:	4b23      	ldr	r3, [pc, #140]	; (8001ca8 <__aeabi_ddiv+0x38c>)
 8001c1c:	1a9b      	subs	r3, r3, r2
 8001c1e:	469b      	mov	fp, r3
 8001c20:	2300      	movs	r3, #0
 8001c22:	4699      	mov	r9, r3
 8001c24:	9300      	str	r3, [sp, #0]
 8001c26:	e69e      	b.n	8001966 <__aeabi_ddiv+0x4a>
 8001c28:	0002      	movs	r2, r0
 8001c2a:	4322      	orrs	r2, r4
 8001c2c:	4690      	mov	r8, r2
 8001c2e:	d11d      	bne.n	8001c6c <__aeabi_ddiv+0x350>
 8001c30:	2208      	movs	r2, #8
 8001c32:	469b      	mov	fp, r3
 8001c34:	2302      	movs	r3, #2
 8001c36:	2500      	movs	r5, #0
 8001c38:	4691      	mov	r9, r2
 8001c3a:	9300      	str	r3, [sp, #0]
 8001c3c:	e693      	b.n	8001966 <__aeabi_ddiv+0x4a>
 8001c3e:	4651      	mov	r1, sl
 8001c40:	4321      	orrs	r1, r4
 8001c42:	d109      	bne.n	8001c58 <__aeabi_ddiv+0x33c>
 8001c44:	2302      	movs	r3, #2
 8001c46:	464a      	mov	r2, r9
 8001c48:	431a      	orrs	r2, r3
 8001c4a:	4b18      	ldr	r3, [pc, #96]	; (8001cac <__aeabi_ddiv+0x390>)
 8001c4c:	4691      	mov	r9, r2
 8001c4e:	469c      	mov	ip, r3
 8001c50:	2400      	movs	r4, #0
 8001c52:	2002      	movs	r0, #2
 8001c54:	44e3      	add	fp, ip
 8001c56:	e6a1      	b.n	800199c <__aeabi_ddiv+0x80>
 8001c58:	2303      	movs	r3, #3
 8001c5a:	464a      	mov	r2, r9
 8001c5c:	431a      	orrs	r2, r3
 8001c5e:	4b13      	ldr	r3, [pc, #76]	; (8001cac <__aeabi_ddiv+0x390>)
 8001c60:	4691      	mov	r9, r2
 8001c62:	469c      	mov	ip, r3
 8001c64:	4651      	mov	r1, sl
 8001c66:	2003      	movs	r0, #3
 8001c68:	44e3      	add	fp, ip
 8001c6a:	e697      	b.n	800199c <__aeabi_ddiv+0x80>
 8001c6c:	220c      	movs	r2, #12
 8001c6e:	469b      	mov	fp, r3
 8001c70:	2303      	movs	r3, #3
 8001c72:	46a0      	mov	r8, r4
 8001c74:	4691      	mov	r9, r2
 8001c76:	9300      	str	r3, [sp, #0]
 8001c78:	e675      	b.n	8001966 <__aeabi_ddiv+0x4a>
 8001c7a:	2304      	movs	r3, #4
 8001c7c:	4699      	mov	r9, r3
 8001c7e:	2300      	movs	r3, #0
 8001c80:	469b      	mov	fp, r3
 8001c82:	3301      	adds	r3, #1
 8001c84:	2500      	movs	r5, #0
 8001c86:	9300      	str	r3, [sp, #0]
 8001c88:	e66d      	b.n	8001966 <__aeabi_ddiv+0x4a>
 8001c8a:	46c0      	nop			; (mov r8, r8)
 8001c8c:	000007ff 	.word	0x000007ff
 8001c90:	fffffc01 	.word	0xfffffc01
 8001c94:	08009158 	.word	0x08009158
 8001c98:	000003ff 	.word	0x000003ff
 8001c9c:	feffffff 	.word	0xfeffffff
 8001ca0:	000007fe 	.word	0x000007fe
 8001ca4:	000003f3 	.word	0x000003f3
 8001ca8:	fffffc0d 	.word	0xfffffc0d
 8001cac:	fffff801 	.word	0xfffff801
 8001cb0:	464a      	mov	r2, r9
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	431a      	orrs	r2, r3
 8001cb6:	4691      	mov	r9, r2
 8001cb8:	2400      	movs	r4, #0
 8001cba:	2001      	movs	r0, #1
 8001cbc:	e66e      	b.n	800199c <__aeabi_ddiv+0x80>
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	2280      	movs	r2, #128	; 0x80
 8001cc2:	469a      	mov	sl, r3
 8001cc4:	2500      	movs	r5, #0
 8001cc6:	4b88      	ldr	r3, [pc, #544]	; (8001ee8 <__aeabi_ddiv+0x5cc>)
 8001cc8:	0312      	lsls	r2, r2, #12
 8001cca:	e67e      	b.n	80019ca <__aeabi_ddiv+0xae>
 8001ccc:	2501      	movs	r5, #1
 8001cce:	426d      	negs	r5, r5
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	1ad2      	subs	r2, r2, r3
 8001cd4:	2a38      	cmp	r2, #56	; 0x38
 8001cd6:	dd00      	ble.n	8001cda <__aeabi_ddiv+0x3be>
 8001cd8:	e674      	b.n	80019c4 <__aeabi_ddiv+0xa8>
 8001cda:	2a1f      	cmp	r2, #31
 8001cdc:	dc00      	bgt.n	8001ce0 <__aeabi_ddiv+0x3c4>
 8001cde:	e0bd      	b.n	8001e5c <__aeabi_ddiv+0x540>
 8001ce0:	211f      	movs	r1, #31
 8001ce2:	4249      	negs	r1, r1
 8001ce4:	1acb      	subs	r3, r1, r3
 8001ce6:	4641      	mov	r1, r8
 8001ce8:	40d9      	lsrs	r1, r3
 8001cea:	000b      	movs	r3, r1
 8001cec:	2a20      	cmp	r2, #32
 8001cee:	d004      	beq.n	8001cfa <__aeabi_ddiv+0x3de>
 8001cf0:	4641      	mov	r1, r8
 8001cf2:	4a7e      	ldr	r2, [pc, #504]	; (8001eec <__aeabi_ddiv+0x5d0>)
 8001cf4:	445a      	add	r2, fp
 8001cf6:	4091      	lsls	r1, r2
 8001cf8:	430d      	orrs	r5, r1
 8001cfa:	0029      	movs	r1, r5
 8001cfc:	1e4a      	subs	r2, r1, #1
 8001cfe:	4191      	sbcs	r1, r2
 8001d00:	4319      	orrs	r1, r3
 8001d02:	2307      	movs	r3, #7
 8001d04:	001d      	movs	r5, r3
 8001d06:	2200      	movs	r2, #0
 8001d08:	400d      	ands	r5, r1
 8001d0a:	420b      	tst	r3, r1
 8001d0c:	d100      	bne.n	8001d10 <__aeabi_ddiv+0x3f4>
 8001d0e:	e0d0      	b.n	8001eb2 <__aeabi_ddiv+0x596>
 8001d10:	220f      	movs	r2, #15
 8001d12:	2300      	movs	r3, #0
 8001d14:	400a      	ands	r2, r1
 8001d16:	2a04      	cmp	r2, #4
 8001d18:	d100      	bne.n	8001d1c <__aeabi_ddiv+0x400>
 8001d1a:	e0c7      	b.n	8001eac <__aeabi_ddiv+0x590>
 8001d1c:	1d0a      	adds	r2, r1, #4
 8001d1e:	428a      	cmp	r2, r1
 8001d20:	4189      	sbcs	r1, r1
 8001d22:	4249      	negs	r1, r1
 8001d24:	185b      	adds	r3, r3, r1
 8001d26:	0011      	movs	r1, r2
 8001d28:	021a      	lsls	r2, r3, #8
 8001d2a:	d400      	bmi.n	8001d2e <__aeabi_ddiv+0x412>
 8001d2c:	e0be      	b.n	8001eac <__aeabi_ddiv+0x590>
 8001d2e:	2301      	movs	r3, #1
 8001d30:	2200      	movs	r2, #0
 8001d32:	2500      	movs	r5, #0
 8001d34:	e649      	b.n	80019ca <__aeabi_ddiv+0xae>
 8001d36:	2280      	movs	r2, #128	; 0x80
 8001d38:	4643      	mov	r3, r8
 8001d3a:	0312      	lsls	r2, r2, #12
 8001d3c:	4213      	tst	r3, r2
 8001d3e:	d008      	beq.n	8001d52 <__aeabi_ddiv+0x436>
 8001d40:	4214      	tst	r4, r2
 8001d42:	d106      	bne.n	8001d52 <__aeabi_ddiv+0x436>
 8001d44:	4322      	orrs	r2, r4
 8001d46:	0312      	lsls	r2, r2, #12
 8001d48:	46ba      	mov	sl, r7
 8001d4a:	000d      	movs	r5, r1
 8001d4c:	4b66      	ldr	r3, [pc, #408]	; (8001ee8 <__aeabi_ddiv+0x5cc>)
 8001d4e:	0b12      	lsrs	r2, r2, #12
 8001d50:	e63b      	b.n	80019ca <__aeabi_ddiv+0xae>
 8001d52:	2280      	movs	r2, #128	; 0x80
 8001d54:	4643      	mov	r3, r8
 8001d56:	0312      	lsls	r2, r2, #12
 8001d58:	431a      	orrs	r2, r3
 8001d5a:	0312      	lsls	r2, r2, #12
 8001d5c:	46b2      	mov	sl, r6
 8001d5e:	4b62      	ldr	r3, [pc, #392]	; (8001ee8 <__aeabi_ddiv+0x5cc>)
 8001d60:	0b12      	lsrs	r2, r2, #12
 8001d62:	e632      	b.n	80019ca <__aeabi_ddiv+0xae>
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d100      	bne.n	8001d6a <__aeabi_ddiv+0x44e>
 8001d68:	e702      	b.n	8001b70 <__aeabi_ddiv+0x254>
 8001d6a:	19a6      	adds	r6, r4, r6
 8001d6c:	1e6a      	subs	r2, r5, #1
 8001d6e:	42a6      	cmp	r6, r4
 8001d70:	d200      	bcs.n	8001d74 <__aeabi_ddiv+0x458>
 8001d72:	e089      	b.n	8001e88 <__aeabi_ddiv+0x56c>
 8001d74:	4286      	cmp	r6, r0
 8001d76:	d200      	bcs.n	8001d7a <__aeabi_ddiv+0x45e>
 8001d78:	e09f      	b.n	8001eba <__aeabi_ddiv+0x59e>
 8001d7a:	d100      	bne.n	8001d7e <__aeabi_ddiv+0x462>
 8001d7c:	e0af      	b.n	8001ede <__aeabi_ddiv+0x5c2>
 8001d7e:	0015      	movs	r5, r2
 8001d80:	e6f4      	b.n	8001b6c <__aeabi_ddiv+0x250>
 8001d82:	42a9      	cmp	r1, r5
 8001d84:	d900      	bls.n	8001d88 <__aeabi_ddiv+0x46c>
 8001d86:	e63c      	b.n	8001a02 <__aeabi_ddiv+0xe6>
 8001d88:	4643      	mov	r3, r8
 8001d8a:	07de      	lsls	r6, r3, #31
 8001d8c:	0858      	lsrs	r0, r3, #1
 8001d8e:	086b      	lsrs	r3, r5, #1
 8001d90:	431e      	orrs	r6, r3
 8001d92:	07ed      	lsls	r5, r5, #31
 8001d94:	e63c      	b.n	8001a10 <__aeabi_ddiv+0xf4>
 8001d96:	f001 f8eb 	bl	8002f70 <__clzsi2>
 8001d9a:	0001      	movs	r1, r0
 8001d9c:	0002      	movs	r2, r0
 8001d9e:	3115      	adds	r1, #21
 8001da0:	3220      	adds	r2, #32
 8001da2:	291c      	cmp	r1, #28
 8001da4:	dc00      	bgt.n	8001da8 <__aeabi_ddiv+0x48c>
 8001da6:	e72c      	b.n	8001c02 <__aeabi_ddiv+0x2e6>
 8001da8:	464b      	mov	r3, r9
 8001daa:	3808      	subs	r0, #8
 8001dac:	4083      	lsls	r3, r0
 8001dae:	2500      	movs	r5, #0
 8001db0:	4698      	mov	r8, r3
 8001db2:	e732      	b.n	8001c1a <__aeabi_ddiv+0x2fe>
 8001db4:	f001 f8dc 	bl	8002f70 <__clzsi2>
 8001db8:	0003      	movs	r3, r0
 8001dba:	001a      	movs	r2, r3
 8001dbc:	3215      	adds	r2, #21
 8001dbe:	3020      	adds	r0, #32
 8001dc0:	2a1c      	cmp	r2, #28
 8001dc2:	dc00      	bgt.n	8001dc6 <__aeabi_ddiv+0x4aa>
 8001dc4:	e6ff      	b.n	8001bc6 <__aeabi_ddiv+0x2aa>
 8001dc6:	4654      	mov	r4, sl
 8001dc8:	3b08      	subs	r3, #8
 8001dca:	2100      	movs	r1, #0
 8001dcc:	409c      	lsls	r4, r3
 8001dce:	e705      	b.n	8001bdc <__aeabi_ddiv+0x2c0>
 8001dd0:	1936      	adds	r6, r6, r4
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	42b4      	cmp	r4, r6
 8001dd6:	d900      	bls.n	8001dda <__aeabi_ddiv+0x4be>
 8001dd8:	e6a6      	b.n	8001b28 <__aeabi_ddiv+0x20c>
 8001dda:	42b2      	cmp	r2, r6
 8001ddc:	d800      	bhi.n	8001de0 <__aeabi_ddiv+0x4c4>
 8001dde:	e6a3      	b.n	8001b28 <__aeabi_ddiv+0x20c>
 8001de0:	1e83      	subs	r3, r0, #2
 8001de2:	1936      	adds	r6, r6, r4
 8001de4:	e6a0      	b.n	8001b28 <__aeabi_ddiv+0x20c>
 8001de6:	1909      	adds	r1, r1, r4
 8001de8:	3d01      	subs	r5, #1
 8001dea:	428c      	cmp	r4, r1
 8001dec:	d900      	bls.n	8001df0 <__aeabi_ddiv+0x4d4>
 8001dee:	e68d      	b.n	8001b0c <__aeabi_ddiv+0x1f0>
 8001df0:	428a      	cmp	r2, r1
 8001df2:	d800      	bhi.n	8001df6 <__aeabi_ddiv+0x4da>
 8001df4:	e68a      	b.n	8001b0c <__aeabi_ddiv+0x1f0>
 8001df6:	1e85      	subs	r5, r0, #2
 8001df8:	1909      	adds	r1, r1, r4
 8001dfa:	e687      	b.n	8001b0c <__aeabi_ddiv+0x1f0>
 8001dfc:	220f      	movs	r2, #15
 8001dfe:	402a      	ands	r2, r5
 8001e00:	2a04      	cmp	r2, #4
 8001e02:	d100      	bne.n	8001e06 <__aeabi_ddiv+0x4ea>
 8001e04:	e6bc      	b.n	8001b80 <__aeabi_ddiv+0x264>
 8001e06:	1d29      	adds	r1, r5, #4
 8001e08:	42a9      	cmp	r1, r5
 8001e0a:	41ad      	sbcs	r5, r5
 8001e0c:	426d      	negs	r5, r5
 8001e0e:	08c9      	lsrs	r1, r1, #3
 8001e10:	44a8      	add	r8, r5
 8001e12:	e6b6      	b.n	8001b82 <__aeabi_ddiv+0x266>
 8001e14:	42af      	cmp	r7, r5
 8001e16:	d900      	bls.n	8001e1a <__aeabi_ddiv+0x4fe>
 8001e18:	e662      	b.n	8001ae0 <__aeabi_ddiv+0x1c4>
 8001e1a:	4281      	cmp	r1, r0
 8001e1c:	d804      	bhi.n	8001e28 <__aeabi_ddiv+0x50c>
 8001e1e:	d000      	beq.n	8001e22 <__aeabi_ddiv+0x506>
 8001e20:	e65e      	b.n	8001ae0 <__aeabi_ddiv+0x1c4>
 8001e22:	42ae      	cmp	r6, r5
 8001e24:	d800      	bhi.n	8001e28 <__aeabi_ddiv+0x50c>
 8001e26:	e65b      	b.n	8001ae0 <__aeabi_ddiv+0x1c4>
 8001e28:	2302      	movs	r3, #2
 8001e2a:	425b      	negs	r3, r3
 8001e2c:	469c      	mov	ip, r3
 8001e2e:	9b00      	ldr	r3, [sp, #0]
 8001e30:	44e0      	add	r8, ip
 8001e32:	469c      	mov	ip, r3
 8001e34:	4465      	add	r5, ip
 8001e36:	429d      	cmp	r5, r3
 8001e38:	419b      	sbcs	r3, r3
 8001e3a:	425b      	negs	r3, r3
 8001e3c:	191b      	adds	r3, r3, r4
 8001e3e:	18c0      	adds	r0, r0, r3
 8001e40:	e64f      	b.n	8001ae2 <__aeabi_ddiv+0x1c6>
 8001e42:	42b2      	cmp	r2, r6
 8001e44:	d800      	bhi.n	8001e48 <__aeabi_ddiv+0x52c>
 8001e46:	e612      	b.n	8001a6e <__aeabi_ddiv+0x152>
 8001e48:	1e83      	subs	r3, r0, #2
 8001e4a:	1936      	adds	r6, r6, r4
 8001e4c:	e60f      	b.n	8001a6e <__aeabi_ddiv+0x152>
 8001e4e:	428a      	cmp	r2, r1
 8001e50:	d800      	bhi.n	8001e54 <__aeabi_ddiv+0x538>
 8001e52:	e5fa      	b.n	8001a4a <__aeabi_ddiv+0x12e>
 8001e54:	1e83      	subs	r3, r0, #2
 8001e56:	4698      	mov	r8, r3
 8001e58:	1909      	adds	r1, r1, r4
 8001e5a:	e5f6      	b.n	8001a4a <__aeabi_ddiv+0x12e>
 8001e5c:	4b24      	ldr	r3, [pc, #144]	; (8001ef0 <__aeabi_ddiv+0x5d4>)
 8001e5e:	0028      	movs	r0, r5
 8001e60:	445b      	add	r3, fp
 8001e62:	4641      	mov	r1, r8
 8001e64:	409d      	lsls	r5, r3
 8001e66:	4099      	lsls	r1, r3
 8001e68:	40d0      	lsrs	r0, r2
 8001e6a:	1e6b      	subs	r3, r5, #1
 8001e6c:	419d      	sbcs	r5, r3
 8001e6e:	4643      	mov	r3, r8
 8001e70:	4301      	orrs	r1, r0
 8001e72:	4329      	orrs	r1, r5
 8001e74:	40d3      	lsrs	r3, r2
 8001e76:	074a      	lsls	r2, r1, #29
 8001e78:	d100      	bne.n	8001e7c <__aeabi_ddiv+0x560>
 8001e7a:	e755      	b.n	8001d28 <__aeabi_ddiv+0x40c>
 8001e7c:	220f      	movs	r2, #15
 8001e7e:	400a      	ands	r2, r1
 8001e80:	2a04      	cmp	r2, #4
 8001e82:	d000      	beq.n	8001e86 <__aeabi_ddiv+0x56a>
 8001e84:	e74a      	b.n	8001d1c <__aeabi_ddiv+0x400>
 8001e86:	e74f      	b.n	8001d28 <__aeabi_ddiv+0x40c>
 8001e88:	0015      	movs	r5, r2
 8001e8a:	4286      	cmp	r6, r0
 8001e8c:	d000      	beq.n	8001e90 <__aeabi_ddiv+0x574>
 8001e8e:	e66d      	b.n	8001b6c <__aeabi_ddiv+0x250>
 8001e90:	9a00      	ldr	r2, [sp, #0]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d000      	beq.n	8001e98 <__aeabi_ddiv+0x57c>
 8001e96:	e669      	b.n	8001b6c <__aeabi_ddiv+0x250>
 8001e98:	e66a      	b.n	8001b70 <__aeabi_ddiv+0x254>
 8001e9a:	4b16      	ldr	r3, [pc, #88]	; (8001ef4 <__aeabi_ddiv+0x5d8>)
 8001e9c:	445b      	add	r3, fp
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	dc00      	bgt.n	8001ea4 <__aeabi_ddiv+0x588>
 8001ea2:	e713      	b.n	8001ccc <__aeabi_ddiv+0x3b0>
 8001ea4:	2501      	movs	r5, #1
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	44a8      	add	r8, r5
 8001eaa:	e66a      	b.n	8001b82 <__aeabi_ddiv+0x266>
 8001eac:	075d      	lsls	r5, r3, #29
 8001eae:	025b      	lsls	r3, r3, #9
 8001eb0:	0b1a      	lsrs	r2, r3, #12
 8001eb2:	08c9      	lsrs	r1, r1, #3
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	430d      	orrs	r5, r1
 8001eb8:	e587      	b.n	80019ca <__aeabi_ddiv+0xae>
 8001eba:	9900      	ldr	r1, [sp, #0]
 8001ebc:	3d02      	subs	r5, #2
 8001ebe:	004a      	lsls	r2, r1, #1
 8001ec0:	428a      	cmp	r2, r1
 8001ec2:	41bf      	sbcs	r7, r7
 8001ec4:	427f      	negs	r7, r7
 8001ec6:	193f      	adds	r7, r7, r4
 8001ec8:	19f6      	adds	r6, r6, r7
 8001eca:	9200      	str	r2, [sp, #0]
 8001ecc:	e7dd      	b.n	8001e8a <__aeabi_ddiv+0x56e>
 8001ece:	2280      	movs	r2, #128	; 0x80
 8001ed0:	4643      	mov	r3, r8
 8001ed2:	0312      	lsls	r2, r2, #12
 8001ed4:	431a      	orrs	r2, r3
 8001ed6:	0312      	lsls	r2, r2, #12
 8001ed8:	4b03      	ldr	r3, [pc, #12]	; (8001ee8 <__aeabi_ddiv+0x5cc>)
 8001eda:	0b12      	lsrs	r2, r2, #12
 8001edc:	e575      	b.n	80019ca <__aeabi_ddiv+0xae>
 8001ede:	9900      	ldr	r1, [sp, #0]
 8001ee0:	4299      	cmp	r1, r3
 8001ee2:	d3ea      	bcc.n	8001eba <__aeabi_ddiv+0x59e>
 8001ee4:	0015      	movs	r5, r2
 8001ee6:	e7d3      	b.n	8001e90 <__aeabi_ddiv+0x574>
 8001ee8:	000007ff 	.word	0x000007ff
 8001eec:	0000043e 	.word	0x0000043e
 8001ef0:	0000041e 	.word	0x0000041e
 8001ef4:	000003ff 	.word	0x000003ff

08001ef8 <__eqdf2>:
 8001ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001efa:	464e      	mov	r6, r9
 8001efc:	4645      	mov	r5, r8
 8001efe:	46de      	mov	lr, fp
 8001f00:	4657      	mov	r7, sl
 8001f02:	4690      	mov	r8, r2
 8001f04:	b5e0      	push	{r5, r6, r7, lr}
 8001f06:	0017      	movs	r7, r2
 8001f08:	031a      	lsls	r2, r3, #12
 8001f0a:	0b12      	lsrs	r2, r2, #12
 8001f0c:	0005      	movs	r5, r0
 8001f0e:	4684      	mov	ip, r0
 8001f10:	4819      	ldr	r0, [pc, #100]	; (8001f78 <__eqdf2+0x80>)
 8001f12:	030e      	lsls	r6, r1, #12
 8001f14:	004c      	lsls	r4, r1, #1
 8001f16:	4691      	mov	r9, r2
 8001f18:	005a      	lsls	r2, r3, #1
 8001f1a:	0fdb      	lsrs	r3, r3, #31
 8001f1c:	469b      	mov	fp, r3
 8001f1e:	0b36      	lsrs	r6, r6, #12
 8001f20:	0d64      	lsrs	r4, r4, #21
 8001f22:	0fc9      	lsrs	r1, r1, #31
 8001f24:	0d52      	lsrs	r2, r2, #21
 8001f26:	4284      	cmp	r4, r0
 8001f28:	d019      	beq.n	8001f5e <__eqdf2+0x66>
 8001f2a:	4282      	cmp	r2, r0
 8001f2c:	d010      	beq.n	8001f50 <__eqdf2+0x58>
 8001f2e:	2001      	movs	r0, #1
 8001f30:	4294      	cmp	r4, r2
 8001f32:	d10e      	bne.n	8001f52 <__eqdf2+0x5a>
 8001f34:	454e      	cmp	r6, r9
 8001f36:	d10c      	bne.n	8001f52 <__eqdf2+0x5a>
 8001f38:	2001      	movs	r0, #1
 8001f3a:	45c4      	cmp	ip, r8
 8001f3c:	d109      	bne.n	8001f52 <__eqdf2+0x5a>
 8001f3e:	4559      	cmp	r1, fp
 8001f40:	d017      	beq.n	8001f72 <__eqdf2+0x7a>
 8001f42:	2c00      	cmp	r4, #0
 8001f44:	d105      	bne.n	8001f52 <__eqdf2+0x5a>
 8001f46:	0030      	movs	r0, r6
 8001f48:	4328      	orrs	r0, r5
 8001f4a:	1e43      	subs	r3, r0, #1
 8001f4c:	4198      	sbcs	r0, r3
 8001f4e:	e000      	b.n	8001f52 <__eqdf2+0x5a>
 8001f50:	2001      	movs	r0, #1
 8001f52:	bcf0      	pop	{r4, r5, r6, r7}
 8001f54:	46bb      	mov	fp, r7
 8001f56:	46b2      	mov	sl, r6
 8001f58:	46a9      	mov	r9, r5
 8001f5a:	46a0      	mov	r8, r4
 8001f5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f5e:	0033      	movs	r3, r6
 8001f60:	2001      	movs	r0, #1
 8001f62:	432b      	orrs	r3, r5
 8001f64:	d1f5      	bne.n	8001f52 <__eqdf2+0x5a>
 8001f66:	42a2      	cmp	r2, r4
 8001f68:	d1f3      	bne.n	8001f52 <__eqdf2+0x5a>
 8001f6a:	464b      	mov	r3, r9
 8001f6c:	433b      	orrs	r3, r7
 8001f6e:	d1f0      	bne.n	8001f52 <__eqdf2+0x5a>
 8001f70:	e7e2      	b.n	8001f38 <__eqdf2+0x40>
 8001f72:	2000      	movs	r0, #0
 8001f74:	e7ed      	b.n	8001f52 <__eqdf2+0x5a>
 8001f76:	46c0      	nop			; (mov r8, r8)
 8001f78:	000007ff 	.word	0x000007ff

08001f7c <__gedf2>:
 8001f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f7e:	4647      	mov	r7, r8
 8001f80:	46ce      	mov	lr, r9
 8001f82:	0004      	movs	r4, r0
 8001f84:	0018      	movs	r0, r3
 8001f86:	0016      	movs	r6, r2
 8001f88:	031b      	lsls	r3, r3, #12
 8001f8a:	0b1b      	lsrs	r3, r3, #12
 8001f8c:	4d2d      	ldr	r5, [pc, #180]	; (8002044 <__gedf2+0xc8>)
 8001f8e:	004a      	lsls	r2, r1, #1
 8001f90:	4699      	mov	r9, r3
 8001f92:	b580      	push	{r7, lr}
 8001f94:	0043      	lsls	r3, r0, #1
 8001f96:	030f      	lsls	r7, r1, #12
 8001f98:	46a4      	mov	ip, r4
 8001f9a:	46b0      	mov	r8, r6
 8001f9c:	0b3f      	lsrs	r7, r7, #12
 8001f9e:	0d52      	lsrs	r2, r2, #21
 8001fa0:	0fc9      	lsrs	r1, r1, #31
 8001fa2:	0d5b      	lsrs	r3, r3, #21
 8001fa4:	0fc0      	lsrs	r0, r0, #31
 8001fa6:	42aa      	cmp	r2, r5
 8001fa8:	d021      	beq.n	8001fee <__gedf2+0x72>
 8001faa:	42ab      	cmp	r3, r5
 8001fac:	d013      	beq.n	8001fd6 <__gedf2+0x5a>
 8001fae:	2a00      	cmp	r2, #0
 8001fb0:	d122      	bne.n	8001ff8 <__gedf2+0x7c>
 8001fb2:	433c      	orrs	r4, r7
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d102      	bne.n	8001fbe <__gedf2+0x42>
 8001fb8:	464d      	mov	r5, r9
 8001fba:	432e      	orrs	r6, r5
 8001fbc:	d022      	beq.n	8002004 <__gedf2+0x88>
 8001fbe:	2c00      	cmp	r4, #0
 8001fc0:	d010      	beq.n	8001fe4 <__gedf2+0x68>
 8001fc2:	4281      	cmp	r1, r0
 8001fc4:	d022      	beq.n	800200c <__gedf2+0x90>
 8001fc6:	2002      	movs	r0, #2
 8001fc8:	3901      	subs	r1, #1
 8001fca:	4008      	ands	r0, r1
 8001fcc:	3801      	subs	r0, #1
 8001fce:	bcc0      	pop	{r6, r7}
 8001fd0:	46b9      	mov	r9, r7
 8001fd2:	46b0      	mov	r8, r6
 8001fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fd6:	464d      	mov	r5, r9
 8001fd8:	432e      	orrs	r6, r5
 8001fda:	d129      	bne.n	8002030 <__gedf2+0xb4>
 8001fdc:	2a00      	cmp	r2, #0
 8001fde:	d1f0      	bne.n	8001fc2 <__gedf2+0x46>
 8001fe0:	433c      	orrs	r4, r7
 8001fe2:	d1ee      	bne.n	8001fc2 <__gedf2+0x46>
 8001fe4:	2800      	cmp	r0, #0
 8001fe6:	d1f2      	bne.n	8001fce <__gedf2+0x52>
 8001fe8:	2001      	movs	r0, #1
 8001fea:	4240      	negs	r0, r0
 8001fec:	e7ef      	b.n	8001fce <__gedf2+0x52>
 8001fee:	003d      	movs	r5, r7
 8001ff0:	4325      	orrs	r5, r4
 8001ff2:	d11d      	bne.n	8002030 <__gedf2+0xb4>
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d0ee      	beq.n	8001fd6 <__gedf2+0x5a>
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d1e2      	bne.n	8001fc2 <__gedf2+0x46>
 8001ffc:	464c      	mov	r4, r9
 8001ffe:	4326      	orrs	r6, r4
 8002000:	d1df      	bne.n	8001fc2 <__gedf2+0x46>
 8002002:	e7e0      	b.n	8001fc6 <__gedf2+0x4a>
 8002004:	2000      	movs	r0, #0
 8002006:	2c00      	cmp	r4, #0
 8002008:	d0e1      	beq.n	8001fce <__gedf2+0x52>
 800200a:	e7dc      	b.n	8001fc6 <__gedf2+0x4a>
 800200c:	429a      	cmp	r2, r3
 800200e:	dc0a      	bgt.n	8002026 <__gedf2+0xaa>
 8002010:	dbe8      	blt.n	8001fe4 <__gedf2+0x68>
 8002012:	454f      	cmp	r7, r9
 8002014:	d8d7      	bhi.n	8001fc6 <__gedf2+0x4a>
 8002016:	d00e      	beq.n	8002036 <__gedf2+0xba>
 8002018:	2000      	movs	r0, #0
 800201a:	454f      	cmp	r7, r9
 800201c:	d2d7      	bcs.n	8001fce <__gedf2+0x52>
 800201e:	2900      	cmp	r1, #0
 8002020:	d0e2      	beq.n	8001fe8 <__gedf2+0x6c>
 8002022:	0008      	movs	r0, r1
 8002024:	e7d3      	b.n	8001fce <__gedf2+0x52>
 8002026:	4243      	negs	r3, r0
 8002028:	4158      	adcs	r0, r3
 800202a:	0040      	lsls	r0, r0, #1
 800202c:	3801      	subs	r0, #1
 800202e:	e7ce      	b.n	8001fce <__gedf2+0x52>
 8002030:	2002      	movs	r0, #2
 8002032:	4240      	negs	r0, r0
 8002034:	e7cb      	b.n	8001fce <__gedf2+0x52>
 8002036:	45c4      	cmp	ip, r8
 8002038:	d8c5      	bhi.n	8001fc6 <__gedf2+0x4a>
 800203a:	2000      	movs	r0, #0
 800203c:	45c4      	cmp	ip, r8
 800203e:	d2c6      	bcs.n	8001fce <__gedf2+0x52>
 8002040:	e7ed      	b.n	800201e <__gedf2+0xa2>
 8002042:	46c0      	nop			; (mov r8, r8)
 8002044:	000007ff 	.word	0x000007ff

08002048 <__ledf2>:
 8002048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800204a:	4647      	mov	r7, r8
 800204c:	46ce      	mov	lr, r9
 800204e:	0004      	movs	r4, r0
 8002050:	0018      	movs	r0, r3
 8002052:	0016      	movs	r6, r2
 8002054:	031b      	lsls	r3, r3, #12
 8002056:	0b1b      	lsrs	r3, r3, #12
 8002058:	4d2c      	ldr	r5, [pc, #176]	; (800210c <__ledf2+0xc4>)
 800205a:	004a      	lsls	r2, r1, #1
 800205c:	4699      	mov	r9, r3
 800205e:	b580      	push	{r7, lr}
 8002060:	0043      	lsls	r3, r0, #1
 8002062:	030f      	lsls	r7, r1, #12
 8002064:	46a4      	mov	ip, r4
 8002066:	46b0      	mov	r8, r6
 8002068:	0b3f      	lsrs	r7, r7, #12
 800206a:	0d52      	lsrs	r2, r2, #21
 800206c:	0fc9      	lsrs	r1, r1, #31
 800206e:	0d5b      	lsrs	r3, r3, #21
 8002070:	0fc0      	lsrs	r0, r0, #31
 8002072:	42aa      	cmp	r2, r5
 8002074:	d00d      	beq.n	8002092 <__ledf2+0x4a>
 8002076:	42ab      	cmp	r3, r5
 8002078:	d010      	beq.n	800209c <__ledf2+0x54>
 800207a:	2a00      	cmp	r2, #0
 800207c:	d127      	bne.n	80020ce <__ledf2+0x86>
 800207e:	433c      	orrs	r4, r7
 8002080:	2b00      	cmp	r3, #0
 8002082:	d111      	bne.n	80020a8 <__ledf2+0x60>
 8002084:	464d      	mov	r5, r9
 8002086:	432e      	orrs	r6, r5
 8002088:	d10e      	bne.n	80020a8 <__ledf2+0x60>
 800208a:	2000      	movs	r0, #0
 800208c:	2c00      	cmp	r4, #0
 800208e:	d015      	beq.n	80020bc <__ledf2+0x74>
 8002090:	e00e      	b.n	80020b0 <__ledf2+0x68>
 8002092:	003d      	movs	r5, r7
 8002094:	4325      	orrs	r5, r4
 8002096:	d110      	bne.n	80020ba <__ledf2+0x72>
 8002098:	4293      	cmp	r3, r2
 800209a:	d118      	bne.n	80020ce <__ledf2+0x86>
 800209c:	464d      	mov	r5, r9
 800209e:	432e      	orrs	r6, r5
 80020a0:	d10b      	bne.n	80020ba <__ledf2+0x72>
 80020a2:	2a00      	cmp	r2, #0
 80020a4:	d102      	bne.n	80020ac <__ledf2+0x64>
 80020a6:	433c      	orrs	r4, r7
 80020a8:	2c00      	cmp	r4, #0
 80020aa:	d00b      	beq.n	80020c4 <__ledf2+0x7c>
 80020ac:	4281      	cmp	r1, r0
 80020ae:	d014      	beq.n	80020da <__ledf2+0x92>
 80020b0:	2002      	movs	r0, #2
 80020b2:	3901      	subs	r1, #1
 80020b4:	4008      	ands	r0, r1
 80020b6:	3801      	subs	r0, #1
 80020b8:	e000      	b.n	80020bc <__ledf2+0x74>
 80020ba:	2002      	movs	r0, #2
 80020bc:	bcc0      	pop	{r6, r7}
 80020be:	46b9      	mov	r9, r7
 80020c0:	46b0      	mov	r8, r6
 80020c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020c4:	2800      	cmp	r0, #0
 80020c6:	d1f9      	bne.n	80020bc <__ledf2+0x74>
 80020c8:	2001      	movs	r0, #1
 80020ca:	4240      	negs	r0, r0
 80020cc:	e7f6      	b.n	80020bc <__ledf2+0x74>
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1ec      	bne.n	80020ac <__ledf2+0x64>
 80020d2:	464c      	mov	r4, r9
 80020d4:	4326      	orrs	r6, r4
 80020d6:	d1e9      	bne.n	80020ac <__ledf2+0x64>
 80020d8:	e7ea      	b.n	80020b0 <__ledf2+0x68>
 80020da:	429a      	cmp	r2, r3
 80020dc:	dd04      	ble.n	80020e8 <__ledf2+0xa0>
 80020de:	4243      	negs	r3, r0
 80020e0:	4158      	adcs	r0, r3
 80020e2:	0040      	lsls	r0, r0, #1
 80020e4:	3801      	subs	r0, #1
 80020e6:	e7e9      	b.n	80020bc <__ledf2+0x74>
 80020e8:	429a      	cmp	r2, r3
 80020ea:	dbeb      	blt.n	80020c4 <__ledf2+0x7c>
 80020ec:	454f      	cmp	r7, r9
 80020ee:	d8df      	bhi.n	80020b0 <__ledf2+0x68>
 80020f0:	d006      	beq.n	8002100 <__ledf2+0xb8>
 80020f2:	2000      	movs	r0, #0
 80020f4:	454f      	cmp	r7, r9
 80020f6:	d2e1      	bcs.n	80020bc <__ledf2+0x74>
 80020f8:	2900      	cmp	r1, #0
 80020fa:	d0e5      	beq.n	80020c8 <__ledf2+0x80>
 80020fc:	0008      	movs	r0, r1
 80020fe:	e7dd      	b.n	80020bc <__ledf2+0x74>
 8002100:	45c4      	cmp	ip, r8
 8002102:	d8d5      	bhi.n	80020b0 <__ledf2+0x68>
 8002104:	2000      	movs	r0, #0
 8002106:	45c4      	cmp	ip, r8
 8002108:	d2d8      	bcs.n	80020bc <__ledf2+0x74>
 800210a:	e7f5      	b.n	80020f8 <__ledf2+0xb0>
 800210c:	000007ff 	.word	0x000007ff

08002110 <__aeabi_dmul>:
 8002110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002112:	4645      	mov	r5, r8
 8002114:	46de      	mov	lr, fp
 8002116:	4657      	mov	r7, sl
 8002118:	464e      	mov	r6, r9
 800211a:	b5e0      	push	{r5, r6, r7, lr}
 800211c:	001f      	movs	r7, r3
 800211e:	030b      	lsls	r3, r1, #12
 8002120:	0b1b      	lsrs	r3, r3, #12
 8002122:	469b      	mov	fp, r3
 8002124:	004d      	lsls	r5, r1, #1
 8002126:	0fcb      	lsrs	r3, r1, #31
 8002128:	0004      	movs	r4, r0
 800212a:	4691      	mov	r9, r2
 800212c:	4698      	mov	r8, r3
 800212e:	b087      	sub	sp, #28
 8002130:	0d6d      	lsrs	r5, r5, #21
 8002132:	d100      	bne.n	8002136 <__aeabi_dmul+0x26>
 8002134:	e1cd      	b.n	80024d2 <__aeabi_dmul+0x3c2>
 8002136:	4bce      	ldr	r3, [pc, #824]	; (8002470 <__aeabi_dmul+0x360>)
 8002138:	429d      	cmp	r5, r3
 800213a:	d100      	bne.n	800213e <__aeabi_dmul+0x2e>
 800213c:	e1e9      	b.n	8002512 <__aeabi_dmul+0x402>
 800213e:	465a      	mov	r2, fp
 8002140:	0f43      	lsrs	r3, r0, #29
 8002142:	00d2      	lsls	r2, r2, #3
 8002144:	4313      	orrs	r3, r2
 8002146:	2280      	movs	r2, #128	; 0x80
 8002148:	0412      	lsls	r2, r2, #16
 800214a:	431a      	orrs	r2, r3
 800214c:	00c3      	lsls	r3, r0, #3
 800214e:	469a      	mov	sl, r3
 8002150:	4bc8      	ldr	r3, [pc, #800]	; (8002474 <__aeabi_dmul+0x364>)
 8002152:	4693      	mov	fp, r2
 8002154:	469c      	mov	ip, r3
 8002156:	2300      	movs	r3, #0
 8002158:	2600      	movs	r6, #0
 800215a:	4465      	add	r5, ip
 800215c:	9300      	str	r3, [sp, #0]
 800215e:	033c      	lsls	r4, r7, #12
 8002160:	007b      	lsls	r3, r7, #1
 8002162:	4648      	mov	r0, r9
 8002164:	0b24      	lsrs	r4, r4, #12
 8002166:	0d5b      	lsrs	r3, r3, #21
 8002168:	0fff      	lsrs	r7, r7, #31
 800216a:	2b00      	cmp	r3, #0
 800216c:	d100      	bne.n	8002170 <__aeabi_dmul+0x60>
 800216e:	e189      	b.n	8002484 <__aeabi_dmul+0x374>
 8002170:	4abf      	ldr	r2, [pc, #764]	; (8002470 <__aeabi_dmul+0x360>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d019      	beq.n	80021aa <__aeabi_dmul+0x9a>
 8002176:	0f42      	lsrs	r2, r0, #29
 8002178:	00e4      	lsls	r4, r4, #3
 800217a:	4322      	orrs	r2, r4
 800217c:	2480      	movs	r4, #128	; 0x80
 800217e:	0424      	lsls	r4, r4, #16
 8002180:	4314      	orrs	r4, r2
 8002182:	4abc      	ldr	r2, [pc, #752]	; (8002474 <__aeabi_dmul+0x364>)
 8002184:	2100      	movs	r1, #0
 8002186:	4694      	mov	ip, r2
 8002188:	4642      	mov	r2, r8
 800218a:	4463      	add	r3, ip
 800218c:	195b      	adds	r3, r3, r5
 800218e:	9301      	str	r3, [sp, #4]
 8002190:	9b01      	ldr	r3, [sp, #4]
 8002192:	407a      	eors	r2, r7
 8002194:	3301      	adds	r3, #1
 8002196:	00c0      	lsls	r0, r0, #3
 8002198:	b2d2      	uxtb	r2, r2
 800219a:	9302      	str	r3, [sp, #8]
 800219c:	2e0a      	cmp	r6, #10
 800219e:	dd1c      	ble.n	80021da <__aeabi_dmul+0xca>
 80021a0:	003a      	movs	r2, r7
 80021a2:	2e0b      	cmp	r6, #11
 80021a4:	d05e      	beq.n	8002264 <__aeabi_dmul+0x154>
 80021a6:	4647      	mov	r7, r8
 80021a8:	e056      	b.n	8002258 <__aeabi_dmul+0x148>
 80021aa:	4649      	mov	r1, r9
 80021ac:	4bb0      	ldr	r3, [pc, #704]	; (8002470 <__aeabi_dmul+0x360>)
 80021ae:	4321      	orrs	r1, r4
 80021b0:	18eb      	adds	r3, r5, r3
 80021b2:	9301      	str	r3, [sp, #4]
 80021b4:	2900      	cmp	r1, #0
 80021b6:	d12a      	bne.n	800220e <__aeabi_dmul+0xfe>
 80021b8:	2080      	movs	r0, #128	; 0x80
 80021ba:	2202      	movs	r2, #2
 80021bc:	0100      	lsls	r0, r0, #4
 80021be:	002b      	movs	r3, r5
 80021c0:	4684      	mov	ip, r0
 80021c2:	4316      	orrs	r6, r2
 80021c4:	4642      	mov	r2, r8
 80021c6:	4463      	add	r3, ip
 80021c8:	407a      	eors	r2, r7
 80021ca:	b2d2      	uxtb	r2, r2
 80021cc:	9302      	str	r3, [sp, #8]
 80021ce:	2e0a      	cmp	r6, #10
 80021d0:	dd00      	ble.n	80021d4 <__aeabi_dmul+0xc4>
 80021d2:	e231      	b.n	8002638 <__aeabi_dmul+0x528>
 80021d4:	2000      	movs	r0, #0
 80021d6:	2400      	movs	r4, #0
 80021d8:	2102      	movs	r1, #2
 80021da:	2e02      	cmp	r6, #2
 80021dc:	dc26      	bgt.n	800222c <__aeabi_dmul+0x11c>
 80021de:	3e01      	subs	r6, #1
 80021e0:	2e01      	cmp	r6, #1
 80021e2:	d852      	bhi.n	800228a <__aeabi_dmul+0x17a>
 80021e4:	2902      	cmp	r1, #2
 80021e6:	d04c      	beq.n	8002282 <__aeabi_dmul+0x172>
 80021e8:	2901      	cmp	r1, #1
 80021ea:	d000      	beq.n	80021ee <__aeabi_dmul+0xde>
 80021ec:	e118      	b.n	8002420 <__aeabi_dmul+0x310>
 80021ee:	2300      	movs	r3, #0
 80021f0:	2400      	movs	r4, #0
 80021f2:	2500      	movs	r5, #0
 80021f4:	051b      	lsls	r3, r3, #20
 80021f6:	4323      	orrs	r3, r4
 80021f8:	07d2      	lsls	r2, r2, #31
 80021fa:	4313      	orrs	r3, r2
 80021fc:	0028      	movs	r0, r5
 80021fe:	0019      	movs	r1, r3
 8002200:	b007      	add	sp, #28
 8002202:	bcf0      	pop	{r4, r5, r6, r7}
 8002204:	46bb      	mov	fp, r7
 8002206:	46b2      	mov	sl, r6
 8002208:	46a9      	mov	r9, r5
 800220a:	46a0      	mov	r8, r4
 800220c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800220e:	2180      	movs	r1, #128	; 0x80
 8002210:	2203      	movs	r2, #3
 8002212:	0109      	lsls	r1, r1, #4
 8002214:	002b      	movs	r3, r5
 8002216:	468c      	mov	ip, r1
 8002218:	4316      	orrs	r6, r2
 800221a:	4642      	mov	r2, r8
 800221c:	4463      	add	r3, ip
 800221e:	407a      	eors	r2, r7
 8002220:	b2d2      	uxtb	r2, r2
 8002222:	9302      	str	r3, [sp, #8]
 8002224:	2e0a      	cmp	r6, #10
 8002226:	dd00      	ble.n	800222a <__aeabi_dmul+0x11a>
 8002228:	e228      	b.n	800267c <__aeabi_dmul+0x56c>
 800222a:	2103      	movs	r1, #3
 800222c:	2501      	movs	r5, #1
 800222e:	40b5      	lsls	r5, r6
 8002230:	46ac      	mov	ip, r5
 8002232:	26a6      	movs	r6, #166	; 0xa6
 8002234:	4663      	mov	r3, ip
 8002236:	00f6      	lsls	r6, r6, #3
 8002238:	4035      	ands	r5, r6
 800223a:	4233      	tst	r3, r6
 800223c:	d10b      	bne.n	8002256 <__aeabi_dmul+0x146>
 800223e:	2690      	movs	r6, #144	; 0x90
 8002240:	00b6      	lsls	r6, r6, #2
 8002242:	4233      	tst	r3, r6
 8002244:	d118      	bne.n	8002278 <__aeabi_dmul+0x168>
 8002246:	3eb9      	subs	r6, #185	; 0xb9
 8002248:	3eff      	subs	r6, #255	; 0xff
 800224a:	421e      	tst	r6, r3
 800224c:	d01d      	beq.n	800228a <__aeabi_dmul+0x17a>
 800224e:	46a3      	mov	fp, r4
 8002250:	4682      	mov	sl, r0
 8002252:	9100      	str	r1, [sp, #0]
 8002254:	e000      	b.n	8002258 <__aeabi_dmul+0x148>
 8002256:	0017      	movs	r7, r2
 8002258:	9900      	ldr	r1, [sp, #0]
 800225a:	003a      	movs	r2, r7
 800225c:	2902      	cmp	r1, #2
 800225e:	d010      	beq.n	8002282 <__aeabi_dmul+0x172>
 8002260:	465c      	mov	r4, fp
 8002262:	4650      	mov	r0, sl
 8002264:	2903      	cmp	r1, #3
 8002266:	d1bf      	bne.n	80021e8 <__aeabi_dmul+0xd8>
 8002268:	2380      	movs	r3, #128	; 0x80
 800226a:	031b      	lsls	r3, r3, #12
 800226c:	431c      	orrs	r4, r3
 800226e:	0324      	lsls	r4, r4, #12
 8002270:	0005      	movs	r5, r0
 8002272:	4b7f      	ldr	r3, [pc, #508]	; (8002470 <__aeabi_dmul+0x360>)
 8002274:	0b24      	lsrs	r4, r4, #12
 8002276:	e7bd      	b.n	80021f4 <__aeabi_dmul+0xe4>
 8002278:	2480      	movs	r4, #128	; 0x80
 800227a:	2200      	movs	r2, #0
 800227c:	4b7c      	ldr	r3, [pc, #496]	; (8002470 <__aeabi_dmul+0x360>)
 800227e:	0324      	lsls	r4, r4, #12
 8002280:	e7b8      	b.n	80021f4 <__aeabi_dmul+0xe4>
 8002282:	2400      	movs	r4, #0
 8002284:	2500      	movs	r5, #0
 8002286:	4b7a      	ldr	r3, [pc, #488]	; (8002470 <__aeabi_dmul+0x360>)
 8002288:	e7b4      	b.n	80021f4 <__aeabi_dmul+0xe4>
 800228a:	4653      	mov	r3, sl
 800228c:	041e      	lsls	r6, r3, #16
 800228e:	0c36      	lsrs	r6, r6, #16
 8002290:	0c1f      	lsrs	r7, r3, #16
 8002292:	0033      	movs	r3, r6
 8002294:	0c01      	lsrs	r1, r0, #16
 8002296:	0400      	lsls	r0, r0, #16
 8002298:	0c00      	lsrs	r0, r0, #16
 800229a:	4343      	muls	r3, r0
 800229c:	4698      	mov	r8, r3
 800229e:	0003      	movs	r3, r0
 80022a0:	437b      	muls	r3, r7
 80022a2:	4699      	mov	r9, r3
 80022a4:	0033      	movs	r3, r6
 80022a6:	434b      	muls	r3, r1
 80022a8:	469c      	mov	ip, r3
 80022aa:	4643      	mov	r3, r8
 80022ac:	000d      	movs	r5, r1
 80022ae:	0c1b      	lsrs	r3, r3, #16
 80022b0:	469a      	mov	sl, r3
 80022b2:	437d      	muls	r5, r7
 80022b4:	44cc      	add	ip, r9
 80022b6:	44d4      	add	ip, sl
 80022b8:	9500      	str	r5, [sp, #0]
 80022ba:	45e1      	cmp	r9, ip
 80022bc:	d904      	bls.n	80022c8 <__aeabi_dmul+0x1b8>
 80022be:	2380      	movs	r3, #128	; 0x80
 80022c0:	025b      	lsls	r3, r3, #9
 80022c2:	4699      	mov	r9, r3
 80022c4:	444d      	add	r5, r9
 80022c6:	9500      	str	r5, [sp, #0]
 80022c8:	4663      	mov	r3, ip
 80022ca:	0c1b      	lsrs	r3, r3, #16
 80022cc:	001d      	movs	r5, r3
 80022ce:	4663      	mov	r3, ip
 80022d0:	041b      	lsls	r3, r3, #16
 80022d2:	469c      	mov	ip, r3
 80022d4:	4643      	mov	r3, r8
 80022d6:	041b      	lsls	r3, r3, #16
 80022d8:	0c1b      	lsrs	r3, r3, #16
 80022da:	4698      	mov	r8, r3
 80022dc:	4663      	mov	r3, ip
 80022de:	4443      	add	r3, r8
 80022e0:	9303      	str	r3, [sp, #12]
 80022e2:	0c23      	lsrs	r3, r4, #16
 80022e4:	4698      	mov	r8, r3
 80022e6:	0033      	movs	r3, r6
 80022e8:	0424      	lsls	r4, r4, #16
 80022ea:	0c24      	lsrs	r4, r4, #16
 80022ec:	4363      	muls	r3, r4
 80022ee:	469c      	mov	ip, r3
 80022f0:	0023      	movs	r3, r4
 80022f2:	437b      	muls	r3, r7
 80022f4:	4699      	mov	r9, r3
 80022f6:	4643      	mov	r3, r8
 80022f8:	435e      	muls	r6, r3
 80022fa:	435f      	muls	r7, r3
 80022fc:	444e      	add	r6, r9
 80022fe:	4663      	mov	r3, ip
 8002300:	46b2      	mov	sl, r6
 8002302:	0c1e      	lsrs	r6, r3, #16
 8002304:	4456      	add	r6, sl
 8002306:	45b1      	cmp	r9, r6
 8002308:	d903      	bls.n	8002312 <__aeabi_dmul+0x202>
 800230a:	2380      	movs	r3, #128	; 0x80
 800230c:	025b      	lsls	r3, r3, #9
 800230e:	4699      	mov	r9, r3
 8002310:	444f      	add	r7, r9
 8002312:	0c33      	lsrs	r3, r6, #16
 8002314:	4699      	mov	r9, r3
 8002316:	003b      	movs	r3, r7
 8002318:	444b      	add	r3, r9
 800231a:	9305      	str	r3, [sp, #20]
 800231c:	4663      	mov	r3, ip
 800231e:	46ac      	mov	ip, r5
 8002320:	041f      	lsls	r7, r3, #16
 8002322:	0c3f      	lsrs	r7, r7, #16
 8002324:	0436      	lsls	r6, r6, #16
 8002326:	19f6      	adds	r6, r6, r7
 8002328:	44b4      	add	ip, r6
 800232a:	4663      	mov	r3, ip
 800232c:	9304      	str	r3, [sp, #16]
 800232e:	465b      	mov	r3, fp
 8002330:	0c1b      	lsrs	r3, r3, #16
 8002332:	469c      	mov	ip, r3
 8002334:	465b      	mov	r3, fp
 8002336:	041f      	lsls	r7, r3, #16
 8002338:	0c3f      	lsrs	r7, r7, #16
 800233a:	003b      	movs	r3, r7
 800233c:	4343      	muls	r3, r0
 800233e:	4699      	mov	r9, r3
 8002340:	4663      	mov	r3, ip
 8002342:	4343      	muls	r3, r0
 8002344:	469a      	mov	sl, r3
 8002346:	464b      	mov	r3, r9
 8002348:	4660      	mov	r0, ip
 800234a:	0c1b      	lsrs	r3, r3, #16
 800234c:	469b      	mov	fp, r3
 800234e:	4348      	muls	r0, r1
 8002350:	4379      	muls	r1, r7
 8002352:	4451      	add	r1, sl
 8002354:	4459      	add	r1, fp
 8002356:	458a      	cmp	sl, r1
 8002358:	d903      	bls.n	8002362 <__aeabi_dmul+0x252>
 800235a:	2380      	movs	r3, #128	; 0x80
 800235c:	025b      	lsls	r3, r3, #9
 800235e:	469a      	mov	sl, r3
 8002360:	4450      	add	r0, sl
 8002362:	0c0b      	lsrs	r3, r1, #16
 8002364:	469a      	mov	sl, r3
 8002366:	464b      	mov	r3, r9
 8002368:	041b      	lsls	r3, r3, #16
 800236a:	0c1b      	lsrs	r3, r3, #16
 800236c:	4699      	mov	r9, r3
 800236e:	003b      	movs	r3, r7
 8002370:	4363      	muls	r3, r4
 8002372:	0409      	lsls	r1, r1, #16
 8002374:	4645      	mov	r5, r8
 8002376:	4449      	add	r1, r9
 8002378:	4699      	mov	r9, r3
 800237a:	4663      	mov	r3, ip
 800237c:	435c      	muls	r4, r3
 800237e:	436b      	muls	r3, r5
 8002380:	469c      	mov	ip, r3
 8002382:	464b      	mov	r3, r9
 8002384:	0c1b      	lsrs	r3, r3, #16
 8002386:	4698      	mov	r8, r3
 8002388:	436f      	muls	r7, r5
 800238a:	193f      	adds	r7, r7, r4
 800238c:	4447      	add	r7, r8
 800238e:	4450      	add	r0, sl
 8002390:	42bc      	cmp	r4, r7
 8002392:	d903      	bls.n	800239c <__aeabi_dmul+0x28c>
 8002394:	2380      	movs	r3, #128	; 0x80
 8002396:	025b      	lsls	r3, r3, #9
 8002398:	4698      	mov	r8, r3
 800239a:	44c4      	add	ip, r8
 800239c:	9b04      	ldr	r3, [sp, #16]
 800239e:	9d00      	ldr	r5, [sp, #0]
 80023a0:	4698      	mov	r8, r3
 80023a2:	4445      	add	r5, r8
 80023a4:	42b5      	cmp	r5, r6
 80023a6:	41b6      	sbcs	r6, r6
 80023a8:	4273      	negs	r3, r6
 80023aa:	4698      	mov	r8, r3
 80023ac:	464b      	mov	r3, r9
 80023ae:	041e      	lsls	r6, r3, #16
 80023b0:	9b05      	ldr	r3, [sp, #20]
 80023b2:	043c      	lsls	r4, r7, #16
 80023b4:	4699      	mov	r9, r3
 80023b6:	0c36      	lsrs	r6, r6, #16
 80023b8:	19a4      	adds	r4, r4, r6
 80023ba:	444c      	add	r4, r9
 80023bc:	46a1      	mov	r9, r4
 80023be:	4683      	mov	fp, r0
 80023c0:	186e      	adds	r6, r5, r1
 80023c2:	44c1      	add	r9, r8
 80023c4:	428e      	cmp	r6, r1
 80023c6:	4189      	sbcs	r1, r1
 80023c8:	44cb      	add	fp, r9
 80023ca:	465d      	mov	r5, fp
 80023cc:	4249      	negs	r1, r1
 80023ce:	186d      	adds	r5, r5, r1
 80023d0:	429c      	cmp	r4, r3
 80023d2:	41a4      	sbcs	r4, r4
 80023d4:	45c1      	cmp	r9, r8
 80023d6:	419b      	sbcs	r3, r3
 80023d8:	4583      	cmp	fp, r0
 80023da:	4180      	sbcs	r0, r0
 80023dc:	428d      	cmp	r5, r1
 80023de:	4189      	sbcs	r1, r1
 80023e0:	425b      	negs	r3, r3
 80023e2:	4264      	negs	r4, r4
 80023e4:	431c      	orrs	r4, r3
 80023e6:	4240      	negs	r0, r0
 80023e8:	9b03      	ldr	r3, [sp, #12]
 80023ea:	4249      	negs	r1, r1
 80023ec:	4301      	orrs	r1, r0
 80023ee:	0270      	lsls	r0, r6, #9
 80023f0:	0c3f      	lsrs	r7, r7, #16
 80023f2:	4318      	orrs	r0, r3
 80023f4:	19e4      	adds	r4, r4, r7
 80023f6:	1e47      	subs	r7, r0, #1
 80023f8:	41b8      	sbcs	r0, r7
 80023fa:	1864      	adds	r4, r4, r1
 80023fc:	4464      	add	r4, ip
 80023fe:	0df6      	lsrs	r6, r6, #23
 8002400:	0261      	lsls	r1, r4, #9
 8002402:	4330      	orrs	r0, r6
 8002404:	0dec      	lsrs	r4, r5, #23
 8002406:	026e      	lsls	r6, r5, #9
 8002408:	430c      	orrs	r4, r1
 800240a:	4330      	orrs	r0, r6
 800240c:	01c9      	lsls	r1, r1, #7
 800240e:	d400      	bmi.n	8002412 <__aeabi_dmul+0x302>
 8002410:	e0f1      	b.n	80025f6 <__aeabi_dmul+0x4e6>
 8002412:	2101      	movs	r1, #1
 8002414:	0843      	lsrs	r3, r0, #1
 8002416:	4001      	ands	r1, r0
 8002418:	430b      	orrs	r3, r1
 800241a:	07e0      	lsls	r0, r4, #31
 800241c:	4318      	orrs	r0, r3
 800241e:	0864      	lsrs	r4, r4, #1
 8002420:	4915      	ldr	r1, [pc, #84]	; (8002478 <__aeabi_dmul+0x368>)
 8002422:	9b02      	ldr	r3, [sp, #8]
 8002424:	468c      	mov	ip, r1
 8002426:	4463      	add	r3, ip
 8002428:	2b00      	cmp	r3, #0
 800242a:	dc00      	bgt.n	800242e <__aeabi_dmul+0x31e>
 800242c:	e097      	b.n	800255e <__aeabi_dmul+0x44e>
 800242e:	0741      	lsls	r1, r0, #29
 8002430:	d009      	beq.n	8002446 <__aeabi_dmul+0x336>
 8002432:	210f      	movs	r1, #15
 8002434:	4001      	ands	r1, r0
 8002436:	2904      	cmp	r1, #4
 8002438:	d005      	beq.n	8002446 <__aeabi_dmul+0x336>
 800243a:	1d01      	adds	r1, r0, #4
 800243c:	4281      	cmp	r1, r0
 800243e:	4180      	sbcs	r0, r0
 8002440:	4240      	negs	r0, r0
 8002442:	1824      	adds	r4, r4, r0
 8002444:	0008      	movs	r0, r1
 8002446:	01e1      	lsls	r1, r4, #7
 8002448:	d506      	bpl.n	8002458 <__aeabi_dmul+0x348>
 800244a:	2180      	movs	r1, #128	; 0x80
 800244c:	00c9      	lsls	r1, r1, #3
 800244e:	468c      	mov	ip, r1
 8002450:	4b0a      	ldr	r3, [pc, #40]	; (800247c <__aeabi_dmul+0x36c>)
 8002452:	401c      	ands	r4, r3
 8002454:	9b02      	ldr	r3, [sp, #8]
 8002456:	4463      	add	r3, ip
 8002458:	4909      	ldr	r1, [pc, #36]	; (8002480 <__aeabi_dmul+0x370>)
 800245a:	428b      	cmp	r3, r1
 800245c:	dd00      	ble.n	8002460 <__aeabi_dmul+0x350>
 800245e:	e710      	b.n	8002282 <__aeabi_dmul+0x172>
 8002460:	0761      	lsls	r1, r4, #29
 8002462:	08c5      	lsrs	r5, r0, #3
 8002464:	0264      	lsls	r4, r4, #9
 8002466:	055b      	lsls	r3, r3, #21
 8002468:	430d      	orrs	r5, r1
 800246a:	0b24      	lsrs	r4, r4, #12
 800246c:	0d5b      	lsrs	r3, r3, #21
 800246e:	e6c1      	b.n	80021f4 <__aeabi_dmul+0xe4>
 8002470:	000007ff 	.word	0x000007ff
 8002474:	fffffc01 	.word	0xfffffc01
 8002478:	000003ff 	.word	0x000003ff
 800247c:	feffffff 	.word	0xfeffffff
 8002480:	000007fe 	.word	0x000007fe
 8002484:	464b      	mov	r3, r9
 8002486:	4323      	orrs	r3, r4
 8002488:	d059      	beq.n	800253e <__aeabi_dmul+0x42e>
 800248a:	2c00      	cmp	r4, #0
 800248c:	d100      	bne.n	8002490 <__aeabi_dmul+0x380>
 800248e:	e0a3      	b.n	80025d8 <__aeabi_dmul+0x4c8>
 8002490:	0020      	movs	r0, r4
 8002492:	f000 fd6d 	bl	8002f70 <__clzsi2>
 8002496:	0001      	movs	r1, r0
 8002498:	0003      	movs	r3, r0
 800249a:	390b      	subs	r1, #11
 800249c:	221d      	movs	r2, #29
 800249e:	1a52      	subs	r2, r2, r1
 80024a0:	4649      	mov	r1, r9
 80024a2:	0018      	movs	r0, r3
 80024a4:	40d1      	lsrs	r1, r2
 80024a6:	464a      	mov	r2, r9
 80024a8:	3808      	subs	r0, #8
 80024aa:	4082      	lsls	r2, r0
 80024ac:	4084      	lsls	r4, r0
 80024ae:	0010      	movs	r0, r2
 80024b0:	430c      	orrs	r4, r1
 80024b2:	4a74      	ldr	r2, [pc, #464]	; (8002684 <__aeabi_dmul+0x574>)
 80024b4:	1aeb      	subs	r3, r5, r3
 80024b6:	4694      	mov	ip, r2
 80024b8:	4642      	mov	r2, r8
 80024ba:	4463      	add	r3, ip
 80024bc:	9301      	str	r3, [sp, #4]
 80024be:	9b01      	ldr	r3, [sp, #4]
 80024c0:	407a      	eors	r2, r7
 80024c2:	3301      	adds	r3, #1
 80024c4:	2100      	movs	r1, #0
 80024c6:	b2d2      	uxtb	r2, r2
 80024c8:	9302      	str	r3, [sp, #8]
 80024ca:	2e0a      	cmp	r6, #10
 80024cc:	dd00      	ble.n	80024d0 <__aeabi_dmul+0x3c0>
 80024ce:	e667      	b.n	80021a0 <__aeabi_dmul+0x90>
 80024d0:	e683      	b.n	80021da <__aeabi_dmul+0xca>
 80024d2:	465b      	mov	r3, fp
 80024d4:	4303      	orrs	r3, r0
 80024d6:	469a      	mov	sl, r3
 80024d8:	d02a      	beq.n	8002530 <__aeabi_dmul+0x420>
 80024da:	465b      	mov	r3, fp
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d06d      	beq.n	80025bc <__aeabi_dmul+0x4ac>
 80024e0:	4658      	mov	r0, fp
 80024e2:	f000 fd45 	bl	8002f70 <__clzsi2>
 80024e6:	0001      	movs	r1, r0
 80024e8:	0003      	movs	r3, r0
 80024ea:	390b      	subs	r1, #11
 80024ec:	221d      	movs	r2, #29
 80024ee:	1a52      	subs	r2, r2, r1
 80024f0:	0021      	movs	r1, r4
 80024f2:	0018      	movs	r0, r3
 80024f4:	465d      	mov	r5, fp
 80024f6:	40d1      	lsrs	r1, r2
 80024f8:	3808      	subs	r0, #8
 80024fa:	4085      	lsls	r5, r0
 80024fc:	000a      	movs	r2, r1
 80024fe:	4084      	lsls	r4, r0
 8002500:	432a      	orrs	r2, r5
 8002502:	4693      	mov	fp, r2
 8002504:	46a2      	mov	sl, r4
 8002506:	4d5f      	ldr	r5, [pc, #380]	; (8002684 <__aeabi_dmul+0x574>)
 8002508:	2600      	movs	r6, #0
 800250a:	1aed      	subs	r5, r5, r3
 800250c:	2300      	movs	r3, #0
 800250e:	9300      	str	r3, [sp, #0]
 8002510:	e625      	b.n	800215e <__aeabi_dmul+0x4e>
 8002512:	465b      	mov	r3, fp
 8002514:	4303      	orrs	r3, r0
 8002516:	469a      	mov	sl, r3
 8002518:	d105      	bne.n	8002526 <__aeabi_dmul+0x416>
 800251a:	2300      	movs	r3, #0
 800251c:	469b      	mov	fp, r3
 800251e:	3302      	adds	r3, #2
 8002520:	2608      	movs	r6, #8
 8002522:	9300      	str	r3, [sp, #0]
 8002524:	e61b      	b.n	800215e <__aeabi_dmul+0x4e>
 8002526:	2303      	movs	r3, #3
 8002528:	4682      	mov	sl, r0
 800252a:	260c      	movs	r6, #12
 800252c:	9300      	str	r3, [sp, #0]
 800252e:	e616      	b.n	800215e <__aeabi_dmul+0x4e>
 8002530:	2300      	movs	r3, #0
 8002532:	469b      	mov	fp, r3
 8002534:	3301      	adds	r3, #1
 8002536:	2604      	movs	r6, #4
 8002538:	2500      	movs	r5, #0
 800253a:	9300      	str	r3, [sp, #0]
 800253c:	e60f      	b.n	800215e <__aeabi_dmul+0x4e>
 800253e:	4642      	mov	r2, r8
 8002540:	3301      	adds	r3, #1
 8002542:	9501      	str	r5, [sp, #4]
 8002544:	431e      	orrs	r6, r3
 8002546:	9b01      	ldr	r3, [sp, #4]
 8002548:	407a      	eors	r2, r7
 800254a:	3301      	adds	r3, #1
 800254c:	2400      	movs	r4, #0
 800254e:	2000      	movs	r0, #0
 8002550:	2101      	movs	r1, #1
 8002552:	b2d2      	uxtb	r2, r2
 8002554:	9302      	str	r3, [sp, #8]
 8002556:	2e0a      	cmp	r6, #10
 8002558:	dd00      	ble.n	800255c <__aeabi_dmul+0x44c>
 800255a:	e621      	b.n	80021a0 <__aeabi_dmul+0x90>
 800255c:	e63d      	b.n	80021da <__aeabi_dmul+0xca>
 800255e:	2101      	movs	r1, #1
 8002560:	1ac9      	subs	r1, r1, r3
 8002562:	2938      	cmp	r1, #56	; 0x38
 8002564:	dd00      	ble.n	8002568 <__aeabi_dmul+0x458>
 8002566:	e642      	b.n	80021ee <__aeabi_dmul+0xde>
 8002568:	291f      	cmp	r1, #31
 800256a:	dd47      	ble.n	80025fc <__aeabi_dmul+0x4ec>
 800256c:	261f      	movs	r6, #31
 800256e:	0025      	movs	r5, r4
 8002570:	4276      	negs	r6, r6
 8002572:	1af3      	subs	r3, r6, r3
 8002574:	40dd      	lsrs	r5, r3
 8002576:	002b      	movs	r3, r5
 8002578:	2920      	cmp	r1, #32
 800257a:	d005      	beq.n	8002588 <__aeabi_dmul+0x478>
 800257c:	4942      	ldr	r1, [pc, #264]	; (8002688 <__aeabi_dmul+0x578>)
 800257e:	9d02      	ldr	r5, [sp, #8]
 8002580:	468c      	mov	ip, r1
 8002582:	4465      	add	r5, ip
 8002584:	40ac      	lsls	r4, r5
 8002586:	4320      	orrs	r0, r4
 8002588:	1e41      	subs	r1, r0, #1
 800258a:	4188      	sbcs	r0, r1
 800258c:	4318      	orrs	r0, r3
 800258e:	2307      	movs	r3, #7
 8002590:	001d      	movs	r5, r3
 8002592:	2400      	movs	r4, #0
 8002594:	4005      	ands	r5, r0
 8002596:	4203      	tst	r3, r0
 8002598:	d04a      	beq.n	8002630 <__aeabi_dmul+0x520>
 800259a:	230f      	movs	r3, #15
 800259c:	2400      	movs	r4, #0
 800259e:	4003      	ands	r3, r0
 80025a0:	2b04      	cmp	r3, #4
 80025a2:	d042      	beq.n	800262a <__aeabi_dmul+0x51a>
 80025a4:	1d03      	adds	r3, r0, #4
 80025a6:	4283      	cmp	r3, r0
 80025a8:	4180      	sbcs	r0, r0
 80025aa:	4240      	negs	r0, r0
 80025ac:	1824      	adds	r4, r4, r0
 80025ae:	0018      	movs	r0, r3
 80025b0:	0223      	lsls	r3, r4, #8
 80025b2:	d53a      	bpl.n	800262a <__aeabi_dmul+0x51a>
 80025b4:	2301      	movs	r3, #1
 80025b6:	2400      	movs	r4, #0
 80025b8:	2500      	movs	r5, #0
 80025ba:	e61b      	b.n	80021f4 <__aeabi_dmul+0xe4>
 80025bc:	f000 fcd8 	bl	8002f70 <__clzsi2>
 80025c0:	0001      	movs	r1, r0
 80025c2:	0003      	movs	r3, r0
 80025c4:	3115      	adds	r1, #21
 80025c6:	3320      	adds	r3, #32
 80025c8:	291c      	cmp	r1, #28
 80025ca:	dd8f      	ble.n	80024ec <__aeabi_dmul+0x3dc>
 80025cc:	3808      	subs	r0, #8
 80025ce:	2200      	movs	r2, #0
 80025d0:	4084      	lsls	r4, r0
 80025d2:	4692      	mov	sl, r2
 80025d4:	46a3      	mov	fp, r4
 80025d6:	e796      	b.n	8002506 <__aeabi_dmul+0x3f6>
 80025d8:	f000 fcca 	bl	8002f70 <__clzsi2>
 80025dc:	0001      	movs	r1, r0
 80025de:	0003      	movs	r3, r0
 80025e0:	3115      	adds	r1, #21
 80025e2:	3320      	adds	r3, #32
 80025e4:	291c      	cmp	r1, #28
 80025e6:	dc00      	bgt.n	80025ea <__aeabi_dmul+0x4da>
 80025e8:	e758      	b.n	800249c <__aeabi_dmul+0x38c>
 80025ea:	0002      	movs	r2, r0
 80025ec:	464c      	mov	r4, r9
 80025ee:	3a08      	subs	r2, #8
 80025f0:	2000      	movs	r0, #0
 80025f2:	4094      	lsls	r4, r2
 80025f4:	e75d      	b.n	80024b2 <__aeabi_dmul+0x3a2>
 80025f6:	9b01      	ldr	r3, [sp, #4]
 80025f8:	9302      	str	r3, [sp, #8]
 80025fa:	e711      	b.n	8002420 <__aeabi_dmul+0x310>
 80025fc:	4b23      	ldr	r3, [pc, #140]	; (800268c <__aeabi_dmul+0x57c>)
 80025fe:	0026      	movs	r6, r4
 8002600:	469c      	mov	ip, r3
 8002602:	0003      	movs	r3, r0
 8002604:	9d02      	ldr	r5, [sp, #8]
 8002606:	40cb      	lsrs	r3, r1
 8002608:	4465      	add	r5, ip
 800260a:	40ae      	lsls	r6, r5
 800260c:	431e      	orrs	r6, r3
 800260e:	0003      	movs	r3, r0
 8002610:	40ab      	lsls	r3, r5
 8002612:	1e58      	subs	r0, r3, #1
 8002614:	4183      	sbcs	r3, r0
 8002616:	0030      	movs	r0, r6
 8002618:	4318      	orrs	r0, r3
 800261a:	40cc      	lsrs	r4, r1
 800261c:	0743      	lsls	r3, r0, #29
 800261e:	d0c7      	beq.n	80025b0 <__aeabi_dmul+0x4a0>
 8002620:	230f      	movs	r3, #15
 8002622:	4003      	ands	r3, r0
 8002624:	2b04      	cmp	r3, #4
 8002626:	d1bd      	bne.n	80025a4 <__aeabi_dmul+0x494>
 8002628:	e7c2      	b.n	80025b0 <__aeabi_dmul+0x4a0>
 800262a:	0765      	lsls	r5, r4, #29
 800262c:	0264      	lsls	r4, r4, #9
 800262e:	0b24      	lsrs	r4, r4, #12
 8002630:	08c0      	lsrs	r0, r0, #3
 8002632:	2300      	movs	r3, #0
 8002634:	4305      	orrs	r5, r0
 8002636:	e5dd      	b.n	80021f4 <__aeabi_dmul+0xe4>
 8002638:	2500      	movs	r5, #0
 800263a:	2302      	movs	r3, #2
 800263c:	2e0f      	cmp	r6, #15
 800263e:	d10c      	bne.n	800265a <__aeabi_dmul+0x54a>
 8002640:	2480      	movs	r4, #128	; 0x80
 8002642:	465b      	mov	r3, fp
 8002644:	0324      	lsls	r4, r4, #12
 8002646:	4223      	tst	r3, r4
 8002648:	d00e      	beq.n	8002668 <__aeabi_dmul+0x558>
 800264a:	4221      	tst	r1, r4
 800264c:	d10c      	bne.n	8002668 <__aeabi_dmul+0x558>
 800264e:	430c      	orrs	r4, r1
 8002650:	0324      	lsls	r4, r4, #12
 8002652:	003a      	movs	r2, r7
 8002654:	4b0e      	ldr	r3, [pc, #56]	; (8002690 <__aeabi_dmul+0x580>)
 8002656:	0b24      	lsrs	r4, r4, #12
 8002658:	e5cc      	b.n	80021f4 <__aeabi_dmul+0xe4>
 800265a:	2e0b      	cmp	r6, #11
 800265c:	d000      	beq.n	8002660 <__aeabi_dmul+0x550>
 800265e:	e5a2      	b.n	80021a6 <__aeabi_dmul+0x96>
 8002660:	468b      	mov	fp, r1
 8002662:	46aa      	mov	sl, r5
 8002664:	9300      	str	r3, [sp, #0]
 8002666:	e5f7      	b.n	8002258 <__aeabi_dmul+0x148>
 8002668:	2480      	movs	r4, #128	; 0x80
 800266a:	465b      	mov	r3, fp
 800266c:	0324      	lsls	r4, r4, #12
 800266e:	431c      	orrs	r4, r3
 8002670:	0324      	lsls	r4, r4, #12
 8002672:	4642      	mov	r2, r8
 8002674:	4655      	mov	r5, sl
 8002676:	4b06      	ldr	r3, [pc, #24]	; (8002690 <__aeabi_dmul+0x580>)
 8002678:	0b24      	lsrs	r4, r4, #12
 800267a:	e5bb      	b.n	80021f4 <__aeabi_dmul+0xe4>
 800267c:	464d      	mov	r5, r9
 800267e:	0021      	movs	r1, r4
 8002680:	2303      	movs	r3, #3
 8002682:	e7db      	b.n	800263c <__aeabi_dmul+0x52c>
 8002684:	fffffc0d 	.word	0xfffffc0d
 8002688:	0000043e 	.word	0x0000043e
 800268c:	0000041e 	.word	0x0000041e
 8002690:	000007ff 	.word	0x000007ff

08002694 <__aeabi_dsub>:
 8002694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002696:	4657      	mov	r7, sl
 8002698:	464e      	mov	r6, r9
 800269a:	4645      	mov	r5, r8
 800269c:	46de      	mov	lr, fp
 800269e:	b5e0      	push	{r5, r6, r7, lr}
 80026a0:	000d      	movs	r5, r1
 80026a2:	0004      	movs	r4, r0
 80026a4:	0019      	movs	r1, r3
 80026a6:	0010      	movs	r0, r2
 80026a8:	032b      	lsls	r3, r5, #12
 80026aa:	0a5b      	lsrs	r3, r3, #9
 80026ac:	0f62      	lsrs	r2, r4, #29
 80026ae:	431a      	orrs	r2, r3
 80026b0:	00e3      	lsls	r3, r4, #3
 80026b2:	030c      	lsls	r4, r1, #12
 80026b4:	0a64      	lsrs	r4, r4, #9
 80026b6:	0f47      	lsrs	r7, r0, #29
 80026b8:	4327      	orrs	r7, r4
 80026ba:	4cd0      	ldr	r4, [pc, #832]	; (80029fc <__aeabi_dsub+0x368>)
 80026bc:	006e      	lsls	r6, r5, #1
 80026be:	4691      	mov	r9, r2
 80026c0:	b083      	sub	sp, #12
 80026c2:	004a      	lsls	r2, r1, #1
 80026c4:	00c0      	lsls	r0, r0, #3
 80026c6:	4698      	mov	r8, r3
 80026c8:	46a2      	mov	sl, r4
 80026ca:	0d76      	lsrs	r6, r6, #21
 80026cc:	0fed      	lsrs	r5, r5, #31
 80026ce:	0d52      	lsrs	r2, r2, #21
 80026d0:	0fc9      	lsrs	r1, r1, #31
 80026d2:	9001      	str	r0, [sp, #4]
 80026d4:	42a2      	cmp	r2, r4
 80026d6:	d100      	bne.n	80026da <__aeabi_dsub+0x46>
 80026d8:	e0b9      	b.n	800284e <__aeabi_dsub+0x1ba>
 80026da:	2401      	movs	r4, #1
 80026dc:	4061      	eors	r1, r4
 80026de:	468b      	mov	fp, r1
 80026e0:	428d      	cmp	r5, r1
 80026e2:	d100      	bne.n	80026e6 <__aeabi_dsub+0x52>
 80026e4:	e08d      	b.n	8002802 <__aeabi_dsub+0x16e>
 80026e6:	1ab4      	subs	r4, r6, r2
 80026e8:	46a4      	mov	ip, r4
 80026ea:	2c00      	cmp	r4, #0
 80026ec:	dc00      	bgt.n	80026f0 <__aeabi_dsub+0x5c>
 80026ee:	e0b7      	b.n	8002860 <__aeabi_dsub+0x1cc>
 80026f0:	2a00      	cmp	r2, #0
 80026f2:	d100      	bne.n	80026f6 <__aeabi_dsub+0x62>
 80026f4:	e0cb      	b.n	800288e <__aeabi_dsub+0x1fa>
 80026f6:	4ac1      	ldr	r2, [pc, #772]	; (80029fc <__aeabi_dsub+0x368>)
 80026f8:	4296      	cmp	r6, r2
 80026fa:	d100      	bne.n	80026fe <__aeabi_dsub+0x6a>
 80026fc:	e186      	b.n	8002a0c <__aeabi_dsub+0x378>
 80026fe:	2280      	movs	r2, #128	; 0x80
 8002700:	0412      	lsls	r2, r2, #16
 8002702:	4317      	orrs	r7, r2
 8002704:	4662      	mov	r2, ip
 8002706:	2a38      	cmp	r2, #56	; 0x38
 8002708:	dd00      	ble.n	800270c <__aeabi_dsub+0x78>
 800270a:	e1a4      	b.n	8002a56 <__aeabi_dsub+0x3c2>
 800270c:	2a1f      	cmp	r2, #31
 800270e:	dd00      	ble.n	8002712 <__aeabi_dsub+0x7e>
 8002710:	e21d      	b.n	8002b4e <__aeabi_dsub+0x4ba>
 8002712:	4661      	mov	r1, ip
 8002714:	2220      	movs	r2, #32
 8002716:	003c      	movs	r4, r7
 8002718:	1a52      	subs	r2, r2, r1
 800271a:	0001      	movs	r1, r0
 800271c:	4090      	lsls	r0, r2
 800271e:	4094      	lsls	r4, r2
 8002720:	1e42      	subs	r2, r0, #1
 8002722:	4190      	sbcs	r0, r2
 8002724:	4662      	mov	r2, ip
 8002726:	46a0      	mov	r8, r4
 8002728:	4664      	mov	r4, ip
 800272a:	40d7      	lsrs	r7, r2
 800272c:	464a      	mov	r2, r9
 800272e:	40e1      	lsrs	r1, r4
 8002730:	4644      	mov	r4, r8
 8002732:	1bd2      	subs	r2, r2, r7
 8002734:	4691      	mov	r9, r2
 8002736:	430c      	orrs	r4, r1
 8002738:	4304      	orrs	r4, r0
 800273a:	1b1c      	subs	r4, r3, r4
 800273c:	42a3      	cmp	r3, r4
 800273e:	4192      	sbcs	r2, r2
 8002740:	464b      	mov	r3, r9
 8002742:	4252      	negs	r2, r2
 8002744:	1a9b      	subs	r3, r3, r2
 8002746:	469a      	mov	sl, r3
 8002748:	4653      	mov	r3, sl
 800274a:	021b      	lsls	r3, r3, #8
 800274c:	d400      	bmi.n	8002750 <__aeabi_dsub+0xbc>
 800274e:	e12b      	b.n	80029a8 <__aeabi_dsub+0x314>
 8002750:	4653      	mov	r3, sl
 8002752:	025a      	lsls	r2, r3, #9
 8002754:	0a53      	lsrs	r3, r2, #9
 8002756:	469a      	mov	sl, r3
 8002758:	4653      	mov	r3, sl
 800275a:	2b00      	cmp	r3, #0
 800275c:	d100      	bne.n	8002760 <__aeabi_dsub+0xcc>
 800275e:	e166      	b.n	8002a2e <__aeabi_dsub+0x39a>
 8002760:	4650      	mov	r0, sl
 8002762:	f000 fc05 	bl	8002f70 <__clzsi2>
 8002766:	0003      	movs	r3, r0
 8002768:	3b08      	subs	r3, #8
 800276a:	2220      	movs	r2, #32
 800276c:	0020      	movs	r0, r4
 800276e:	1ad2      	subs	r2, r2, r3
 8002770:	4651      	mov	r1, sl
 8002772:	40d0      	lsrs	r0, r2
 8002774:	4099      	lsls	r1, r3
 8002776:	0002      	movs	r2, r0
 8002778:	409c      	lsls	r4, r3
 800277a:	430a      	orrs	r2, r1
 800277c:	429e      	cmp	r6, r3
 800277e:	dd00      	ble.n	8002782 <__aeabi_dsub+0xee>
 8002780:	e164      	b.n	8002a4c <__aeabi_dsub+0x3b8>
 8002782:	1b9b      	subs	r3, r3, r6
 8002784:	1c59      	adds	r1, r3, #1
 8002786:	291f      	cmp	r1, #31
 8002788:	dd00      	ble.n	800278c <__aeabi_dsub+0xf8>
 800278a:	e0fe      	b.n	800298a <__aeabi_dsub+0x2f6>
 800278c:	2320      	movs	r3, #32
 800278e:	0010      	movs	r0, r2
 8002790:	0026      	movs	r6, r4
 8002792:	1a5b      	subs	r3, r3, r1
 8002794:	409c      	lsls	r4, r3
 8002796:	4098      	lsls	r0, r3
 8002798:	40ce      	lsrs	r6, r1
 800279a:	40ca      	lsrs	r2, r1
 800279c:	1e63      	subs	r3, r4, #1
 800279e:	419c      	sbcs	r4, r3
 80027a0:	4330      	orrs	r0, r6
 80027a2:	4692      	mov	sl, r2
 80027a4:	2600      	movs	r6, #0
 80027a6:	4304      	orrs	r4, r0
 80027a8:	0763      	lsls	r3, r4, #29
 80027aa:	d009      	beq.n	80027c0 <__aeabi_dsub+0x12c>
 80027ac:	230f      	movs	r3, #15
 80027ae:	4023      	ands	r3, r4
 80027b0:	2b04      	cmp	r3, #4
 80027b2:	d005      	beq.n	80027c0 <__aeabi_dsub+0x12c>
 80027b4:	1d23      	adds	r3, r4, #4
 80027b6:	42a3      	cmp	r3, r4
 80027b8:	41a4      	sbcs	r4, r4
 80027ba:	4264      	negs	r4, r4
 80027bc:	44a2      	add	sl, r4
 80027be:	001c      	movs	r4, r3
 80027c0:	4653      	mov	r3, sl
 80027c2:	021b      	lsls	r3, r3, #8
 80027c4:	d400      	bmi.n	80027c8 <__aeabi_dsub+0x134>
 80027c6:	e0f2      	b.n	80029ae <__aeabi_dsub+0x31a>
 80027c8:	4b8c      	ldr	r3, [pc, #560]	; (80029fc <__aeabi_dsub+0x368>)
 80027ca:	3601      	adds	r6, #1
 80027cc:	429e      	cmp	r6, r3
 80027ce:	d100      	bne.n	80027d2 <__aeabi_dsub+0x13e>
 80027d0:	e10f      	b.n	80029f2 <__aeabi_dsub+0x35e>
 80027d2:	4653      	mov	r3, sl
 80027d4:	498a      	ldr	r1, [pc, #552]	; (8002a00 <__aeabi_dsub+0x36c>)
 80027d6:	08e4      	lsrs	r4, r4, #3
 80027d8:	400b      	ands	r3, r1
 80027da:	0019      	movs	r1, r3
 80027dc:	075b      	lsls	r3, r3, #29
 80027de:	4323      	orrs	r3, r4
 80027e0:	0572      	lsls	r2, r6, #21
 80027e2:	024c      	lsls	r4, r1, #9
 80027e4:	0b24      	lsrs	r4, r4, #12
 80027e6:	0d52      	lsrs	r2, r2, #21
 80027e8:	0512      	lsls	r2, r2, #20
 80027ea:	4322      	orrs	r2, r4
 80027ec:	07ed      	lsls	r5, r5, #31
 80027ee:	432a      	orrs	r2, r5
 80027f0:	0018      	movs	r0, r3
 80027f2:	0011      	movs	r1, r2
 80027f4:	b003      	add	sp, #12
 80027f6:	bcf0      	pop	{r4, r5, r6, r7}
 80027f8:	46bb      	mov	fp, r7
 80027fa:	46b2      	mov	sl, r6
 80027fc:	46a9      	mov	r9, r5
 80027fe:	46a0      	mov	r8, r4
 8002800:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002802:	1ab4      	subs	r4, r6, r2
 8002804:	46a4      	mov	ip, r4
 8002806:	2c00      	cmp	r4, #0
 8002808:	dd59      	ble.n	80028be <__aeabi_dsub+0x22a>
 800280a:	2a00      	cmp	r2, #0
 800280c:	d100      	bne.n	8002810 <__aeabi_dsub+0x17c>
 800280e:	e0b0      	b.n	8002972 <__aeabi_dsub+0x2de>
 8002810:	4556      	cmp	r6, sl
 8002812:	d100      	bne.n	8002816 <__aeabi_dsub+0x182>
 8002814:	e0fa      	b.n	8002a0c <__aeabi_dsub+0x378>
 8002816:	2280      	movs	r2, #128	; 0x80
 8002818:	0412      	lsls	r2, r2, #16
 800281a:	4317      	orrs	r7, r2
 800281c:	4662      	mov	r2, ip
 800281e:	2a38      	cmp	r2, #56	; 0x38
 8002820:	dd00      	ble.n	8002824 <__aeabi_dsub+0x190>
 8002822:	e0d4      	b.n	80029ce <__aeabi_dsub+0x33a>
 8002824:	2a1f      	cmp	r2, #31
 8002826:	dc00      	bgt.n	800282a <__aeabi_dsub+0x196>
 8002828:	e1c0      	b.n	8002bac <__aeabi_dsub+0x518>
 800282a:	0039      	movs	r1, r7
 800282c:	3a20      	subs	r2, #32
 800282e:	40d1      	lsrs	r1, r2
 8002830:	4662      	mov	r2, ip
 8002832:	2a20      	cmp	r2, #32
 8002834:	d006      	beq.n	8002844 <__aeabi_dsub+0x1b0>
 8002836:	4664      	mov	r4, ip
 8002838:	2240      	movs	r2, #64	; 0x40
 800283a:	1b12      	subs	r2, r2, r4
 800283c:	003c      	movs	r4, r7
 800283e:	4094      	lsls	r4, r2
 8002840:	4304      	orrs	r4, r0
 8002842:	9401      	str	r4, [sp, #4]
 8002844:	9c01      	ldr	r4, [sp, #4]
 8002846:	1e62      	subs	r2, r4, #1
 8002848:	4194      	sbcs	r4, r2
 800284a:	430c      	orrs	r4, r1
 800284c:	e0c3      	b.n	80029d6 <__aeabi_dsub+0x342>
 800284e:	003c      	movs	r4, r7
 8002850:	4304      	orrs	r4, r0
 8002852:	d02b      	beq.n	80028ac <__aeabi_dsub+0x218>
 8002854:	468b      	mov	fp, r1
 8002856:	428d      	cmp	r5, r1
 8002858:	d02e      	beq.n	80028b8 <__aeabi_dsub+0x224>
 800285a:	4c6a      	ldr	r4, [pc, #424]	; (8002a04 <__aeabi_dsub+0x370>)
 800285c:	46a4      	mov	ip, r4
 800285e:	44b4      	add	ip, r6
 8002860:	4664      	mov	r4, ip
 8002862:	2c00      	cmp	r4, #0
 8002864:	d05f      	beq.n	8002926 <__aeabi_dsub+0x292>
 8002866:	1b94      	subs	r4, r2, r6
 8002868:	46a4      	mov	ip, r4
 800286a:	2e00      	cmp	r6, #0
 800286c:	d000      	beq.n	8002870 <__aeabi_dsub+0x1dc>
 800286e:	e120      	b.n	8002ab2 <__aeabi_dsub+0x41e>
 8002870:	464c      	mov	r4, r9
 8002872:	431c      	orrs	r4, r3
 8002874:	d100      	bne.n	8002878 <__aeabi_dsub+0x1e4>
 8002876:	e1c7      	b.n	8002c08 <__aeabi_dsub+0x574>
 8002878:	4661      	mov	r1, ip
 800287a:	1e4c      	subs	r4, r1, #1
 800287c:	2901      	cmp	r1, #1
 800287e:	d100      	bne.n	8002882 <__aeabi_dsub+0x1ee>
 8002880:	e223      	b.n	8002cca <__aeabi_dsub+0x636>
 8002882:	4d5e      	ldr	r5, [pc, #376]	; (80029fc <__aeabi_dsub+0x368>)
 8002884:	45ac      	cmp	ip, r5
 8002886:	d100      	bne.n	800288a <__aeabi_dsub+0x1f6>
 8002888:	e1d8      	b.n	8002c3c <__aeabi_dsub+0x5a8>
 800288a:	46a4      	mov	ip, r4
 800288c:	e11a      	b.n	8002ac4 <__aeabi_dsub+0x430>
 800288e:	003a      	movs	r2, r7
 8002890:	4302      	orrs	r2, r0
 8002892:	d100      	bne.n	8002896 <__aeabi_dsub+0x202>
 8002894:	e0e4      	b.n	8002a60 <__aeabi_dsub+0x3cc>
 8002896:	0022      	movs	r2, r4
 8002898:	3a01      	subs	r2, #1
 800289a:	2c01      	cmp	r4, #1
 800289c:	d100      	bne.n	80028a0 <__aeabi_dsub+0x20c>
 800289e:	e1c3      	b.n	8002c28 <__aeabi_dsub+0x594>
 80028a0:	4956      	ldr	r1, [pc, #344]	; (80029fc <__aeabi_dsub+0x368>)
 80028a2:	428c      	cmp	r4, r1
 80028a4:	d100      	bne.n	80028a8 <__aeabi_dsub+0x214>
 80028a6:	e0b1      	b.n	8002a0c <__aeabi_dsub+0x378>
 80028a8:	4694      	mov	ip, r2
 80028aa:	e72b      	b.n	8002704 <__aeabi_dsub+0x70>
 80028ac:	2401      	movs	r4, #1
 80028ae:	4061      	eors	r1, r4
 80028b0:	468b      	mov	fp, r1
 80028b2:	428d      	cmp	r5, r1
 80028b4:	d000      	beq.n	80028b8 <__aeabi_dsub+0x224>
 80028b6:	e716      	b.n	80026e6 <__aeabi_dsub+0x52>
 80028b8:	4952      	ldr	r1, [pc, #328]	; (8002a04 <__aeabi_dsub+0x370>)
 80028ba:	468c      	mov	ip, r1
 80028bc:	44b4      	add	ip, r6
 80028be:	4664      	mov	r4, ip
 80028c0:	2c00      	cmp	r4, #0
 80028c2:	d100      	bne.n	80028c6 <__aeabi_dsub+0x232>
 80028c4:	e0d3      	b.n	8002a6e <__aeabi_dsub+0x3da>
 80028c6:	1b91      	subs	r1, r2, r6
 80028c8:	468c      	mov	ip, r1
 80028ca:	2e00      	cmp	r6, #0
 80028cc:	d100      	bne.n	80028d0 <__aeabi_dsub+0x23c>
 80028ce:	e15e      	b.n	8002b8e <__aeabi_dsub+0x4fa>
 80028d0:	494a      	ldr	r1, [pc, #296]	; (80029fc <__aeabi_dsub+0x368>)
 80028d2:	428a      	cmp	r2, r1
 80028d4:	d100      	bne.n	80028d8 <__aeabi_dsub+0x244>
 80028d6:	e1be      	b.n	8002c56 <__aeabi_dsub+0x5c2>
 80028d8:	2180      	movs	r1, #128	; 0x80
 80028da:	464c      	mov	r4, r9
 80028dc:	0409      	lsls	r1, r1, #16
 80028de:	430c      	orrs	r4, r1
 80028e0:	46a1      	mov	r9, r4
 80028e2:	4661      	mov	r1, ip
 80028e4:	2938      	cmp	r1, #56	; 0x38
 80028e6:	dd00      	ble.n	80028ea <__aeabi_dsub+0x256>
 80028e8:	e1ba      	b.n	8002c60 <__aeabi_dsub+0x5cc>
 80028ea:	291f      	cmp	r1, #31
 80028ec:	dd00      	ble.n	80028f0 <__aeabi_dsub+0x25c>
 80028ee:	e227      	b.n	8002d40 <__aeabi_dsub+0x6ac>
 80028f0:	2420      	movs	r4, #32
 80028f2:	1a64      	subs	r4, r4, r1
 80028f4:	4649      	mov	r1, r9
 80028f6:	40a1      	lsls	r1, r4
 80028f8:	001e      	movs	r6, r3
 80028fa:	4688      	mov	r8, r1
 80028fc:	4661      	mov	r1, ip
 80028fe:	40a3      	lsls	r3, r4
 8002900:	40ce      	lsrs	r6, r1
 8002902:	4641      	mov	r1, r8
 8002904:	1e5c      	subs	r4, r3, #1
 8002906:	41a3      	sbcs	r3, r4
 8002908:	4331      	orrs	r1, r6
 800290a:	4319      	orrs	r1, r3
 800290c:	000c      	movs	r4, r1
 800290e:	4663      	mov	r3, ip
 8002910:	4649      	mov	r1, r9
 8002912:	40d9      	lsrs	r1, r3
 8002914:	187f      	adds	r7, r7, r1
 8002916:	1824      	adds	r4, r4, r0
 8002918:	4284      	cmp	r4, r0
 800291a:	419b      	sbcs	r3, r3
 800291c:	425b      	negs	r3, r3
 800291e:	469a      	mov	sl, r3
 8002920:	0016      	movs	r6, r2
 8002922:	44ba      	add	sl, r7
 8002924:	e05d      	b.n	80029e2 <__aeabi_dsub+0x34e>
 8002926:	4c38      	ldr	r4, [pc, #224]	; (8002a08 <__aeabi_dsub+0x374>)
 8002928:	1c72      	adds	r2, r6, #1
 800292a:	4222      	tst	r2, r4
 800292c:	d000      	beq.n	8002930 <__aeabi_dsub+0x29c>
 800292e:	e0df      	b.n	8002af0 <__aeabi_dsub+0x45c>
 8002930:	464a      	mov	r2, r9
 8002932:	431a      	orrs	r2, r3
 8002934:	2e00      	cmp	r6, #0
 8002936:	d000      	beq.n	800293a <__aeabi_dsub+0x2a6>
 8002938:	e15c      	b.n	8002bf4 <__aeabi_dsub+0x560>
 800293a:	2a00      	cmp	r2, #0
 800293c:	d100      	bne.n	8002940 <__aeabi_dsub+0x2ac>
 800293e:	e1cf      	b.n	8002ce0 <__aeabi_dsub+0x64c>
 8002940:	003a      	movs	r2, r7
 8002942:	4302      	orrs	r2, r0
 8002944:	d100      	bne.n	8002948 <__aeabi_dsub+0x2b4>
 8002946:	e17f      	b.n	8002c48 <__aeabi_dsub+0x5b4>
 8002948:	1a1c      	subs	r4, r3, r0
 800294a:	464a      	mov	r2, r9
 800294c:	42a3      	cmp	r3, r4
 800294e:	4189      	sbcs	r1, r1
 8002950:	1bd2      	subs	r2, r2, r7
 8002952:	4249      	negs	r1, r1
 8002954:	1a52      	subs	r2, r2, r1
 8002956:	4692      	mov	sl, r2
 8002958:	0212      	lsls	r2, r2, #8
 800295a:	d400      	bmi.n	800295e <__aeabi_dsub+0x2ca>
 800295c:	e20a      	b.n	8002d74 <__aeabi_dsub+0x6e0>
 800295e:	1ac4      	subs	r4, r0, r3
 8002960:	42a0      	cmp	r0, r4
 8002962:	4180      	sbcs	r0, r0
 8002964:	464b      	mov	r3, r9
 8002966:	4240      	negs	r0, r0
 8002968:	1aff      	subs	r7, r7, r3
 800296a:	1a3b      	subs	r3, r7, r0
 800296c:	469a      	mov	sl, r3
 800296e:	465d      	mov	r5, fp
 8002970:	e71a      	b.n	80027a8 <__aeabi_dsub+0x114>
 8002972:	003a      	movs	r2, r7
 8002974:	4302      	orrs	r2, r0
 8002976:	d073      	beq.n	8002a60 <__aeabi_dsub+0x3cc>
 8002978:	0022      	movs	r2, r4
 800297a:	3a01      	subs	r2, #1
 800297c:	2c01      	cmp	r4, #1
 800297e:	d100      	bne.n	8002982 <__aeabi_dsub+0x2ee>
 8002980:	e0cb      	b.n	8002b1a <__aeabi_dsub+0x486>
 8002982:	4554      	cmp	r4, sl
 8002984:	d042      	beq.n	8002a0c <__aeabi_dsub+0x378>
 8002986:	4694      	mov	ip, r2
 8002988:	e748      	b.n	800281c <__aeabi_dsub+0x188>
 800298a:	0010      	movs	r0, r2
 800298c:	3b1f      	subs	r3, #31
 800298e:	40d8      	lsrs	r0, r3
 8002990:	2920      	cmp	r1, #32
 8002992:	d003      	beq.n	800299c <__aeabi_dsub+0x308>
 8002994:	2340      	movs	r3, #64	; 0x40
 8002996:	1a5b      	subs	r3, r3, r1
 8002998:	409a      	lsls	r2, r3
 800299a:	4314      	orrs	r4, r2
 800299c:	1e63      	subs	r3, r4, #1
 800299e:	419c      	sbcs	r4, r3
 80029a0:	2300      	movs	r3, #0
 80029a2:	2600      	movs	r6, #0
 80029a4:	469a      	mov	sl, r3
 80029a6:	4304      	orrs	r4, r0
 80029a8:	0763      	lsls	r3, r4, #29
 80029aa:	d000      	beq.n	80029ae <__aeabi_dsub+0x31a>
 80029ac:	e6fe      	b.n	80027ac <__aeabi_dsub+0x118>
 80029ae:	4652      	mov	r2, sl
 80029b0:	08e3      	lsrs	r3, r4, #3
 80029b2:	0752      	lsls	r2, r2, #29
 80029b4:	4313      	orrs	r3, r2
 80029b6:	4652      	mov	r2, sl
 80029b8:	46b4      	mov	ip, r6
 80029ba:	08d2      	lsrs	r2, r2, #3
 80029bc:	490f      	ldr	r1, [pc, #60]	; (80029fc <__aeabi_dsub+0x368>)
 80029be:	458c      	cmp	ip, r1
 80029c0:	d02a      	beq.n	8002a18 <__aeabi_dsub+0x384>
 80029c2:	0312      	lsls	r2, r2, #12
 80029c4:	0b14      	lsrs	r4, r2, #12
 80029c6:	4662      	mov	r2, ip
 80029c8:	0552      	lsls	r2, r2, #21
 80029ca:	0d52      	lsrs	r2, r2, #21
 80029cc:	e70c      	b.n	80027e8 <__aeabi_dsub+0x154>
 80029ce:	003c      	movs	r4, r7
 80029d0:	4304      	orrs	r4, r0
 80029d2:	1e62      	subs	r2, r4, #1
 80029d4:	4194      	sbcs	r4, r2
 80029d6:	18e4      	adds	r4, r4, r3
 80029d8:	429c      	cmp	r4, r3
 80029da:	4192      	sbcs	r2, r2
 80029dc:	4252      	negs	r2, r2
 80029de:	444a      	add	r2, r9
 80029e0:	4692      	mov	sl, r2
 80029e2:	4653      	mov	r3, sl
 80029e4:	021b      	lsls	r3, r3, #8
 80029e6:	d5df      	bpl.n	80029a8 <__aeabi_dsub+0x314>
 80029e8:	4b04      	ldr	r3, [pc, #16]	; (80029fc <__aeabi_dsub+0x368>)
 80029ea:	3601      	adds	r6, #1
 80029ec:	429e      	cmp	r6, r3
 80029ee:	d000      	beq.n	80029f2 <__aeabi_dsub+0x35e>
 80029f0:	e0a0      	b.n	8002b34 <__aeabi_dsub+0x4a0>
 80029f2:	0032      	movs	r2, r6
 80029f4:	2400      	movs	r4, #0
 80029f6:	2300      	movs	r3, #0
 80029f8:	e6f6      	b.n	80027e8 <__aeabi_dsub+0x154>
 80029fa:	46c0      	nop			; (mov r8, r8)
 80029fc:	000007ff 	.word	0x000007ff
 8002a00:	ff7fffff 	.word	0xff7fffff
 8002a04:	fffff801 	.word	0xfffff801
 8002a08:	000007fe 	.word	0x000007fe
 8002a0c:	08db      	lsrs	r3, r3, #3
 8002a0e:	464a      	mov	r2, r9
 8002a10:	0752      	lsls	r2, r2, #29
 8002a12:	4313      	orrs	r3, r2
 8002a14:	464a      	mov	r2, r9
 8002a16:	08d2      	lsrs	r2, r2, #3
 8002a18:	0019      	movs	r1, r3
 8002a1a:	4311      	orrs	r1, r2
 8002a1c:	d100      	bne.n	8002a20 <__aeabi_dsub+0x38c>
 8002a1e:	e1b5      	b.n	8002d8c <__aeabi_dsub+0x6f8>
 8002a20:	2480      	movs	r4, #128	; 0x80
 8002a22:	0324      	lsls	r4, r4, #12
 8002a24:	4314      	orrs	r4, r2
 8002a26:	0324      	lsls	r4, r4, #12
 8002a28:	4ad5      	ldr	r2, [pc, #852]	; (8002d80 <__aeabi_dsub+0x6ec>)
 8002a2a:	0b24      	lsrs	r4, r4, #12
 8002a2c:	e6dc      	b.n	80027e8 <__aeabi_dsub+0x154>
 8002a2e:	0020      	movs	r0, r4
 8002a30:	f000 fa9e 	bl	8002f70 <__clzsi2>
 8002a34:	0003      	movs	r3, r0
 8002a36:	3318      	adds	r3, #24
 8002a38:	2b1f      	cmp	r3, #31
 8002a3a:	dc00      	bgt.n	8002a3e <__aeabi_dsub+0x3aa>
 8002a3c:	e695      	b.n	800276a <__aeabi_dsub+0xd6>
 8002a3e:	0022      	movs	r2, r4
 8002a40:	3808      	subs	r0, #8
 8002a42:	4082      	lsls	r2, r0
 8002a44:	2400      	movs	r4, #0
 8002a46:	429e      	cmp	r6, r3
 8002a48:	dc00      	bgt.n	8002a4c <__aeabi_dsub+0x3b8>
 8002a4a:	e69a      	b.n	8002782 <__aeabi_dsub+0xee>
 8002a4c:	1af6      	subs	r6, r6, r3
 8002a4e:	4bcd      	ldr	r3, [pc, #820]	; (8002d84 <__aeabi_dsub+0x6f0>)
 8002a50:	401a      	ands	r2, r3
 8002a52:	4692      	mov	sl, r2
 8002a54:	e6a8      	b.n	80027a8 <__aeabi_dsub+0x114>
 8002a56:	003c      	movs	r4, r7
 8002a58:	4304      	orrs	r4, r0
 8002a5a:	1e62      	subs	r2, r4, #1
 8002a5c:	4194      	sbcs	r4, r2
 8002a5e:	e66c      	b.n	800273a <__aeabi_dsub+0xa6>
 8002a60:	464a      	mov	r2, r9
 8002a62:	08db      	lsrs	r3, r3, #3
 8002a64:	0752      	lsls	r2, r2, #29
 8002a66:	4313      	orrs	r3, r2
 8002a68:	464a      	mov	r2, r9
 8002a6a:	08d2      	lsrs	r2, r2, #3
 8002a6c:	e7a6      	b.n	80029bc <__aeabi_dsub+0x328>
 8002a6e:	4cc6      	ldr	r4, [pc, #792]	; (8002d88 <__aeabi_dsub+0x6f4>)
 8002a70:	1c72      	adds	r2, r6, #1
 8002a72:	4222      	tst	r2, r4
 8002a74:	d000      	beq.n	8002a78 <__aeabi_dsub+0x3e4>
 8002a76:	e0ac      	b.n	8002bd2 <__aeabi_dsub+0x53e>
 8002a78:	464a      	mov	r2, r9
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	2e00      	cmp	r6, #0
 8002a7e:	d000      	beq.n	8002a82 <__aeabi_dsub+0x3ee>
 8002a80:	e105      	b.n	8002c8e <__aeabi_dsub+0x5fa>
 8002a82:	2a00      	cmp	r2, #0
 8002a84:	d100      	bne.n	8002a88 <__aeabi_dsub+0x3f4>
 8002a86:	e156      	b.n	8002d36 <__aeabi_dsub+0x6a2>
 8002a88:	003a      	movs	r2, r7
 8002a8a:	4302      	orrs	r2, r0
 8002a8c:	d100      	bne.n	8002a90 <__aeabi_dsub+0x3fc>
 8002a8e:	e0db      	b.n	8002c48 <__aeabi_dsub+0x5b4>
 8002a90:	181c      	adds	r4, r3, r0
 8002a92:	429c      	cmp	r4, r3
 8002a94:	419b      	sbcs	r3, r3
 8002a96:	444f      	add	r7, r9
 8002a98:	46ba      	mov	sl, r7
 8002a9a:	425b      	negs	r3, r3
 8002a9c:	449a      	add	sl, r3
 8002a9e:	4653      	mov	r3, sl
 8002aa0:	021b      	lsls	r3, r3, #8
 8002aa2:	d400      	bmi.n	8002aa6 <__aeabi_dsub+0x412>
 8002aa4:	e780      	b.n	80029a8 <__aeabi_dsub+0x314>
 8002aa6:	4652      	mov	r2, sl
 8002aa8:	4bb6      	ldr	r3, [pc, #728]	; (8002d84 <__aeabi_dsub+0x6f0>)
 8002aaa:	2601      	movs	r6, #1
 8002aac:	401a      	ands	r2, r3
 8002aae:	4692      	mov	sl, r2
 8002ab0:	e77a      	b.n	80029a8 <__aeabi_dsub+0x314>
 8002ab2:	4cb3      	ldr	r4, [pc, #716]	; (8002d80 <__aeabi_dsub+0x6ec>)
 8002ab4:	42a2      	cmp	r2, r4
 8002ab6:	d100      	bne.n	8002aba <__aeabi_dsub+0x426>
 8002ab8:	e0c0      	b.n	8002c3c <__aeabi_dsub+0x5a8>
 8002aba:	2480      	movs	r4, #128	; 0x80
 8002abc:	464d      	mov	r5, r9
 8002abe:	0424      	lsls	r4, r4, #16
 8002ac0:	4325      	orrs	r5, r4
 8002ac2:	46a9      	mov	r9, r5
 8002ac4:	4664      	mov	r4, ip
 8002ac6:	2c38      	cmp	r4, #56	; 0x38
 8002ac8:	dc53      	bgt.n	8002b72 <__aeabi_dsub+0x4de>
 8002aca:	4661      	mov	r1, ip
 8002acc:	2c1f      	cmp	r4, #31
 8002ace:	dd00      	ble.n	8002ad2 <__aeabi_dsub+0x43e>
 8002ad0:	e0cd      	b.n	8002c6e <__aeabi_dsub+0x5da>
 8002ad2:	2520      	movs	r5, #32
 8002ad4:	001e      	movs	r6, r3
 8002ad6:	1b2d      	subs	r5, r5, r4
 8002ad8:	464c      	mov	r4, r9
 8002ada:	40ab      	lsls	r3, r5
 8002adc:	40ac      	lsls	r4, r5
 8002ade:	40ce      	lsrs	r6, r1
 8002ae0:	1e5d      	subs	r5, r3, #1
 8002ae2:	41ab      	sbcs	r3, r5
 8002ae4:	4334      	orrs	r4, r6
 8002ae6:	4323      	orrs	r3, r4
 8002ae8:	464c      	mov	r4, r9
 8002aea:	40cc      	lsrs	r4, r1
 8002aec:	1b3f      	subs	r7, r7, r4
 8002aee:	e045      	b.n	8002b7c <__aeabi_dsub+0x4e8>
 8002af0:	464a      	mov	r2, r9
 8002af2:	1a1c      	subs	r4, r3, r0
 8002af4:	1bd1      	subs	r1, r2, r7
 8002af6:	42a3      	cmp	r3, r4
 8002af8:	4192      	sbcs	r2, r2
 8002afa:	4252      	negs	r2, r2
 8002afc:	4692      	mov	sl, r2
 8002afe:	000a      	movs	r2, r1
 8002b00:	4651      	mov	r1, sl
 8002b02:	1a52      	subs	r2, r2, r1
 8002b04:	4692      	mov	sl, r2
 8002b06:	0212      	lsls	r2, r2, #8
 8002b08:	d500      	bpl.n	8002b0c <__aeabi_dsub+0x478>
 8002b0a:	e083      	b.n	8002c14 <__aeabi_dsub+0x580>
 8002b0c:	4653      	mov	r3, sl
 8002b0e:	4323      	orrs	r3, r4
 8002b10:	d000      	beq.n	8002b14 <__aeabi_dsub+0x480>
 8002b12:	e621      	b.n	8002758 <__aeabi_dsub+0xc4>
 8002b14:	2200      	movs	r2, #0
 8002b16:	2500      	movs	r5, #0
 8002b18:	e753      	b.n	80029c2 <__aeabi_dsub+0x32e>
 8002b1a:	181c      	adds	r4, r3, r0
 8002b1c:	429c      	cmp	r4, r3
 8002b1e:	419b      	sbcs	r3, r3
 8002b20:	444f      	add	r7, r9
 8002b22:	46ba      	mov	sl, r7
 8002b24:	425b      	negs	r3, r3
 8002b26:	449a      	add	sl, r3
 8002b28:	4653      	mov	r3, sl
 8002b2a:	2601      	movs	r6, #1
 8002b2c:	021b      	lsls	r3, r3, #8
 8002b2e:	d400      	bmi.n	8002b32 <__aeabi_dsub+0x49e>
 8002b30:	e73a      	b.n	80029a8 <__aeabi_dsub+0x314>
 8002b32:	2602      	movs	r6, #2
 8002b34:	4652      	mov	r2, sl
 8002b36:	4b93      	ldr	r3, [pc, #588]	; (8002d84 <__aeabi_dsub+0x6f0>)
 8002b38:	2101      	movs	r1, #1
 8002b3a:	401a      	ands	r2, r3
 8002b3c:	0013      	movs	r3, r2
 8002b3e:	4021      	ands	r1, r4
 8002b40:	0862      	lsrs	r2, r4, #1
 8002b42:	430a      	orrs	r2, r1
 8002b44:	07dc      	lsls	r4, r3, #31
 8002b46:	085b      	lsrs	r3, r3, #1
 8002b48:	469a      	mov	sl, r3
 8002b4a:	4314      	orrs	r4, r2
 8002b4c:	e62c      	b.n	80027a8 <__aeabi_dsub+0x114>
 8002b4e:	0039      	movs	r1, r7
 8002b50:	3a20      	subs	r2, #32
 8002b52:	40d1      	lsrs	r1, r2
 8002b54:	4662      	mov	r2, ip
 8002b56:	2a20      	cmp	r2, #32
 8002b58:	d006      	beq.n	8002b68 <__aeabi_dsub+0x4d4>
 8002b5a:	4664      	mov	r4, ip
 8002b5c:	2240      	movs	r2, #64	; 0x40
 8002b5e:	1b12      	subs	r2, r2, r4
 8002b60:	003c      	movs	r4, r7
 8002b62:	4094      	lsls	r4, r2
 8002b64:	4304      	orrs	r4, r0
 8002b66:	9401      	str	r4, [sp, #4]
 8002b68:	9c01      	ldr	r4, [sp, #4]
 8002b6a:	1e62      	subs	r2, r4, #1
 8002b6c:	4194      	sbcs	r4, r2
 8002b6e:	430c      	orrs	r4, r1
 8002b70:	e5e3      	b.n	800273a <__aeabi_dsub+0xa6>
 8002b72:	4649      	mov	r1, r9
 8002b74:	4319      	orrs	r1, r3
 8002b76:	000b      	movs	r3, r1
 8002b78:	1e5c      	subs	r4, r3, #1
 8002b7a:	41a3      	sbcs	r3, r4
 8002b7c:	1ac4      	subs	r4, r0, r3
 8002b7e:	42a0      	cmp	r0, r4
 8002b80:	419b      	sbcs	r3, r3
 8002b82:	425b      	negs	r3, r3
 8002b84:	1afb      	subs	r3, r7, r3
 8002b86:	469a      	mov	sl, r3
 8002b88:	465d      	mov	r5, fp
 8002b8a:	0016      	movs	r6, r2
 8002b8c:	e5dc      	b.n	8002748 <__aeabi_dsub+0xb4>
 8002b8e:	4649      	mov	r1, r9
 8002b90:	4319      	orrs	r1, r3
 8002b92:	d100      	bne.n	8002b96 <__aeabi_dsub+0x502>
 8002b94:	e0ae      	b.n	8002cf4 <__aeabi_dsub+0x660>
 8002b96:	4661      	mov	r1, ip
 8002b98:	4664      	mov	r4, ip
 8002b9a:	3901      	subs	r1, #1
 8002b9c:	2c01      	cmp	r4, #1
 8002b9e:	d100      	bne.n	8002ba2 <__aeabi_dsub+0x50e>
 8002ba0:	e0e0      	b.n	8002d64 <__aeabi_dsub+0x6d0>
 8002ba2:	4c77      	ldr	r4, [pc, #476]	; (8002d80 <__aeabi_dsub+0x6ec>)
 8002ba4:	45a4      	cmp	ip, r4
 8002ba6:	d056      	beq.n	8002c56 <__aeabi_dsub+0x5c2>
 8002ba8:	468c      	mov	ip, r1
 8002baa:	e69a      	b.n	80028e2 <__aeabi_dsub+0x24e>
 8002bac:	4661      	mov	r1, ip
 8002bae:	2220      	movs	r2, #32
 8002bb0:	003c      	movs	r4, r7
 8002bb2:	1a52      	subs	r2, r2, r1
 8002bb4:	4094      	lsls	r4, r2
 8002bb6:	0001      	movs	r1, r0
 8002bb8:	4090      	lsls	r0, r2
 8002bba:	46a0      	mov	r8, r4
 8002bbc:	4664      	mov	r4, ip
 8002bbe:	1e42      	subs	r2, r0, #1
 8002bc0:	4190      	sbcs	r0, r2
 8002bc2:	4662      	mov	r2, ip
 8002bc4:	40e1      	lsrs	r1, r4
 8002bc6:	4644      	mov	r4, r8
 8002bc8:	40d7      	lsrs	r7, r2
 8002bca:	430c      	orrs	r4, r1
 8002bcc:	4304      	orrs	r4, r0
 8002bce:	44b9      	add	r9, r7
 8002bd0:	e701      	b.n	80029d6 <__aeabi_dsub+0x342>
 8002bd2:	496b      	ldr	r1, [pc, #428]	; (8002d80 <__aeabi_dsub+0x6ec>)
 8002bd4:	428a      	cmp	r2, r1
 8002bd6:	d100      	bne.n	8002bda <__aeabi_dsub+0x546>
 8002bd8:	e70c      	b.n	80029f4 <__aeabi_dsub+0x360>
 8002bda:	1818      	adds	r0, r3, r0
 8002bdc:	4298      	cmp	r0, r3
 8002bde:	419b      	sbcs	r3, r3
 8002be0:	444f      	add	r7, r9
 8002be2:	425b      	negs	r3, r3
 8002be4:	18fb      	adds	r3, r7, r3
 8002be6:	07dc      	lsls	r4, r3, #31
 8002be8:	0840      	lsrs	r0, r0, #1
 8002bea:	085b      	lsrs	r3, r3, #1
 8002bec:	469a      	mov	sl, r3
 8002bee:	0016      	movs	r6, r2
 8002bf0:	4304      	orrs	r4, r0
 8002bf2:	e6d9      	b.n	80029a8 <__aeabi_dsub+0x314>
 8002bf4:	2a00      	cmp	r2, #0
 8002bf6:	d000      	beq.n	8002bfa <__aeabi_dsub+0x566>
 8002bf8:	e081      	b.n	8002cfe <__aeabi_dsub+0x66a>
 8002bfa:	003b      	movs	r3, r7
 8002bfc:	4303      	orrs	r3, r0
 8002bfe:	d11d      	bne.n	8002c3c <__aeabi_dsub+0x5a8>
 8002c00:	2280      	movs	r2, #128	; 0x80
 8002c02:	2500      	movs	r5, #0
 8002c04:	0312      	lsls	r2, r2, #12
 8002c06:	e70b      	b.n	8002a20 <__aeabi_dsub+0x38c>
 8002c08:	08c0      	lsrs	r0, r0, #3
 8002c0a:	077b      	lsls	r3, r7, #29
 8002c0c:	465d      	mov	r5, fp
 8002c0e:	4303      	orrs	r3, r0
 8002c10:	08fa      	lsrs	r2, r7, #3
 8002c12:	e6d3      	b.n	80029bc <__aeabi_dsub+0x328>
 8002c14:	1ac4      	subs	r4, r0, r3
 8002c16:	42a0      	cmp	r0, r4
 8002c18:	4180      	sbcs	r0, r0
 8002c1a:	464b      	mov	r3, r9
 8002c1c:	4240      	negs	r0, r0
 8002c1e:	1aff      	subs	r7, r7, r3
 8002c20:	1a3b      	subs	r3, r7, r0
 8002c22:	469a      	mov	sl, r3
 8002c24:	465d      	mov	r5, fp
 8002c26:	e597      	b.n	8002758 <__aeabi_dsub+0xc4>
 8002c28:	1a1c      	subs	r4, r3, r0
 8002c2a:	464a      	mov	r2, r9
 8002c2c:	42a3      	cmp	r3, r4
 8002c2e:	419b      	sbcs	r3, r3
 8002c30:	1bd7      	subs	r7, r2, r7
 8002c32:	425b      	negs	r3, r3
 8002c34:	1afb      	subs	r3, r7, r3
 8002c36:	469a      	mov	sl, r3
 8002c38:	2601      	movs	r6, #1
 8002c3a:	e585      	b.n	8002748 <__aeabi_dsub+0xb4>
 8002c3c:	08c0      	lsrs	r0, r0, #3
 8002c3e:	077b      	lsls	r3, r7, #29
 8002c40:	465d      	mov	r5, fp
 8002c42:	4303      	orrs	r3, r0
 8002c44:	08fa      	lsrs	r2, r7, #3
 8002c46:	e6e7      	b.n	8002a18 <__aeabi_dsub+0x384>
 8002c48:	464a      	mov	r2, r9
 8002c4a:	08db      	lsrs	r3, r3, #3
 8002c4c:	0752      	lsls	r2, r2, #29
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	464a      	mov	r2, r9
 8002c52:	08d2      	lsrs	r2, r2, #3
 8002c54:	e6b5      	b.n	80029c2 <__aeabi_dsub+0x32e>
 8002c56:	08c0      	lsrs	r0, r0, #3
 8002c58:	077b      	lsls	r3, r7, #29
 8002c5a:	4303      	orrs	r3, r0
 8002c5c:	08fa      	lsrs	r2, r7, #3
 8002c5e:	e6db      	b.n	8002a18 <__aeabi_dsub+0x384>
 8002c60:	4649      	mov	r1, r9
 8002c62:	4319      	orrs	r1, r3
 8002c64:	000b      	movs	r3, r1
 8002c66:	1e59      	subs	r1, r3, #1
 8002c68:	418b      	sbcs	r3, r1
 8002c6a:	001c      	movs	r4, r3
 8002c6c:	e653      	b.n	8002916 <__aeabi_dsub+0x282>
 8002c6e:	464d      	mov	r5, r9
 8002c70:	3c20      	subs	r4, #32
 8002c72:	40e5      	lsrs	r5, r4
 8002c74:	2920      	cmp	r1, #32
 8002c76:	d005      	beq.n	8002c84 <__aeabi_dsub+0x5f0>
 8002c78:	2440      	movs	r4, #64	; 0x40
 8002c7a:	1a64      	subs	r4, r4, r1
 8002c7c:	4649      	mov	r1, r9
 8002c7e:	40a1      	lsls	r1, r4
 8002c80:	430b      	orrs	r3, r1
 8002c82:	4698      	mov	r8, r3
 8002c84:	4643      	mov	r3, r8
 8002c86:	1e5c      	subs	r4, r3, #1
 8002c88:	41a3      	sbcs	r3, r4
 8002c8a:	432b      	orrs	r3, r5
 8002c8c:	e776      	b.n	8002b7c <__aeabi_dsub+0x4e8>
 8002c8e:	2a00      	cmp	r2, #0
 8002c90:	d0e1      	beq.n	8002c56 <__aeabi_dsub+0x5c2>
 8002c92:	003a      	movs	r2, r7
 8002c94:	08db      	lsrs	r3, r3, #3
 8002c96:	4302      	orrs	r2, r0
 8002c98:	d100      	bne.n	8002c9c <__aeabi_dsub+0x608>
 8002c9a:	e6b8      	b.n	8002a0e <__aeabi_dsub+0x37a>
 8002c9c:	464a      	mov	r2, r9
 8002c9e:	0752      	lsls	r2, r2, #29
 8002ca0:	2480      	movs	r4, #128	; 0x80
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	464a      	mov	r2, r9
 8002ca6:	0324      	lsls	r4, r4, #12
 8002ca8:	08d2      	lsrs	r2, r2, #3
 8002caa:	4222      	tst	r2, r4
 8002cac:	d007      	beq.n	8002cbe <__aeabi_dsub+0x62a>
 8002cae:	08fe      	lsrs	r6, r7, #3
 8002cb0:	4226      	tst	r6, r4
 8002cb2:	d104      	bne.n	8002cbe <__aeabi_dsub+0x62a>
 8002cb4:	465d      	mov	r5, fp
 8002cb6:	0032      	movs	r2, r6
 8002cb8:	08c3      	lsrs	r3, r0, #3
 8002cba:	077f      	lsls	r7, r7, #29
 8002cbc:	433b      	orrs	r3, r7
 8002cbe:	0f59      	lsrs	r1, r3, #29
 8002cc0:	00db      	lsls	r3, r3, #3
 8002cc2:	0749      	lsls	r1, r1, #29
 8002cc4:	08db      	lsrs	r3, r3, #3
 8002cc6:	430b      	orrs	r3, r1
 8002cc8:	e6a6      	b.n	8002a18 <__aeabi_dsub+0x384>
 8002cca:	1ac4      	subs	r4, r0, r3
 8002ccc:	42a0      	cmp	r0, r4
 8002cce:	4180      	sbcs	r0, r0
 8002cd0:	464b      	mov	r3, r9
 8002cd2:	4240      	negs	r0, r0
 8002cd4:	1aff      	subs	r7, r7, r3
 8002cd6:	1a3b      	subs	r3, r7, r0
 8002cd8:	469a      	mov	sl, r3
 8002cda:	465d      	mov	r5, fp
 8002cdc:	2601      	movs	r6, #1
 8002cde:	e533      	b.n	8002748 <__aeabi_dsub+0xb4>
 8002ce0:	003b      	movs	r3, r7
 8002ce2:	4303      	orrs	r3, r0
 8002ce4:	d100      	bne.n	8002ce8 <__aeabi_dsub+0x654>
 8002ce6:	e715      	b.n	8002b14 <__aeabi_dsub+0x480>
 8002ce8:	08c0      	lsrs	r0, r0, #3
 8002cea:	077b      	lsls	r3, r7, #29
 8002cec:	465d      	mov	r5, fp
 8002cee:	4303      	orrs	r3, r0
 8002cf0:	08fa      	lsrs	r2, r7, #3
 8002cf2:	e666      	b.n	80029c2 <__aeabi_dsub+0x32e>
 8002cf4:	08c0      	lsrs	r0, r0, #3
 8002cf6:	077b      	lsls	r3, r7, #29
 8002cf8:	4303      	orrs	r3, r0
 8002cfa:	08fa      	lsrs	r2, r7, #3
 8002cfc:	e65e      	b.n	80029bc <__aeabi_dsub+0x328>
 8002cfe:	003a      	movs	r2, r7
 8002d00:	08db      	lsrs	r3, r3, #3
 8002d02:	4302      	orrs	r2, r0
 8002d04:	d100      	bne.n	8002d08 <__aeabi_dsub+0x674>
 8002d06:	e682      	b.n	8002a0e <__aeabi_dsub+0x37a>
 8002d08:	464a      	mov	r2, r9
 8002d0a:	0752      	lsls	r2, r2, #29
 8002d0c:	2480      	movs	r4, #128	; 0x80
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	464a      	mov	r2, r9
 8002d12:	0324      	lsls	r4, r4, #12
 8002d14:	08d2      	lsrs	r2, r2, #3
 8002d16:	4222      	tst	r2, r4
 8002d18:	d007      	beq.n	8002d2a <__aeabi_dsub+0x696>
 8002d1a:	08fe      	lsrs	r6, r7, #3
 8002d1c:	4226      	tst	r6, r4
 8002d1e:	d104      	bne.n	8002d2a <__aeabi_dsub+0x696>
 8002d20:	465d      	mov	r5, fp
 8002d22:	0032      	movs	r2, r6
 8002d24:	08c3      	lsrs	r3, r0, #3
 8002d26:	077f      	lsls	r7, r7, #29
 8002d28:	433b      	orrs	r3, r7
 8002d2a:	0f59      	lsrs	r1, r3, #29
 8002d2c:	00db      	lsls	r3, r3, #3
 8002d2e:	08db      	lsrs	r3, r3, #3
 8002d30:	0749      	lsls	r1, r1, #29
 8002d32:	430b      	orrs	r3, r1
 8002d34:	e670      	b.n	8002a18 <__aeabi_dsub+0x384>
 8002d36:	08c0      	lsrs	r0, r0, #3
 8002d38:	077b      	lsls	r3, r7, #29
 8002d3a:	4303      	orrs	r3, r0
 8002d3c:	08fa      	lsrs	r2, r7, #3
 8002d3e:	e640      	b.n	80029c2 <__aeabi_dsub+0x32e>
 8002d40:	464c      	mov	r4, r9
 8002d42:	3920      	subs	r1, #32
 8002d44:	40cc      	lsrs	r4, r1
 8002d46:	4661      	mov	r1, ip
 8002d48:	2920      	cmp	r1, #32
 8002d4a:	d006      	beq.n	8002d5a <__aeabi_dsub+0x6c6>
 8002d4c:	4666      	mov	r6, ip
 8002d4e:	2140      	movs	r1, #64	; 0x40
 8002d50:	1b89      	subs	r1, r1, r6
 8002d52:	464e      	mov	r6, r9
 8002d54:	408e      	lsls	r6, r1
 8002d56:	4333      	orrs	r3, r6
 8002d58:	4698      	mov	r8, r3
 8002d5a:	4643      	mov	r3, r8
 8002d5c:	1e59      	subs	r1, r3, #1
 8002d5e:	418b      	sbcs	r3, r1
 8002d60:	431c      	orrs	r4, r3
 8002d62:	e5d8      	b.n	8002916 <__aeabi_dsub+0x282>
 8002d64:	181c      	adds	r4, r3, r0
 8002d66:	4284      	cmp	r4, r0
 8002d68:	4180      	sbcs	r0, r0
 8002d6a:	444f      	add	r7, r9
 8002d6c:	46ba      	mov	sl, r7
 8002d6e:	4240      	negs	r0, r0
 8002d70:	4482      	add	sl, r0
 8002d72:	e6d9      	b.n	8002b28 <__aeabi_dsub+0x494>
 8002d74:	4653      	mov	r3, sl
 8002d76:	4323      	orrs	r3, r4
 8002d78:	d100      	bne.n	8002d7c <__aeabi_dsub+0x6e8>
 8002d7a:	e6cb      	b.n	8002b14 <__aeabi_dsub+0x480>
 8002d7c:	e614      	b.n	80029a8 <__aeabi_dsub+0x314>
 8002d7e:	46c0      	nop			; (mov r8, r8)
 8002d80:	000007ff 	.word	0x000007ff
 8002d84:	ff7fffff 	.word	0xff7fffff
 8002d88:	000007fe 	.word	0x000007fe
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	4a01      	ldr	r2, [pc, #4]	; (8002d94 <__aeabi_dsub+0x700>)
 8002d90:	001c      	movs	r4, r3
 8002d92:	e529      	b.n	80027e8 <__aeabi_dsub+0x154>
 8002d94:	000007ff 	.word	0x000007ff

08002d98 <__aeabi_dcmpun>:
 8002d98:	b570      	push	{r4, r5, r6, lr}
 8002d9a:	0005      	movs	r5, r0
 8002d9c:	480c      	ldr	r0, [pc, #48]	; (8002dd0 <__aeabi_dcmpun+0x38>)
 8002d9e:	031c      	lsls	r4, r3, #12
 8002da0:	0016      	movs	r6, r2
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	030a      	lsls	r2, r1, #12
 8002da6:	0049      	lsls	r1, r1, #1
 8002da8:	0b12      	lsrs	r2, r2, #12
 8002daa:	0d49      	lsrs	r1, r1, #21
 8002dac:	0b24      	lsrs	r4, r4, #12
 8002dae:	0d5b      	lsrs	r3, r3, #21
 8002db0:	4281      	cmp	r1, r0
 8002db2:	d008      	beq.n	8002dc6 <__aeabi_dcmpun+0x2e>
 8002db4:	4a06      	ldr	r2, [pc, #24]	; (8002dd0 <__aeabi_dcmpun+0x38>)
 8002db6:	2000      	movs	r0, #0
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d103      	bne.n	8002dc4 <__aeabi_dcmpun+0x2c>
 8002dbc:	0020      	movs	r0, r4
 8002dbe:	4330      	orrs	r0, r6
 8002dc0:	1e43      	subs	r3, r0, #1
 8002dc2:	4198      	sbcs	r0, r3
 8002dc4:	bd70      	pop	{r4, r5, r6, pc}
 8002dc6:	2001      	movs	r0, #1
 8002dc8:	432a      	orrs	r2, r5
 8002dca:	d1fb      	bne.n	8002dc4 <__aeabi_dcmpun+0x2c>
 8002dcc:	e7f2      	b.n	8002db4 <__aeabi_dcmpun+0x1c>
 8002dce:	46c0      	nop			; (mov r8, r8)
 8002dd0:	000007ff 	.word	0x000007ff

08002dd4 <__aeabi_f2d>:
 8002dd4:	b570      	push	{r4, r5, r6, lr}
 8002dd6:	0242      	lsls	r2, r0, #9
 8002dd8:	0043      	lsls	r3, r0, #1
 8002dda:	0fc4      	lsrs	r4, r0, #31
 8002ddc:	20fe      	movs	r0, #254	; 0xfe
 8002dde:	0e1b      	lsrs	r3, r3, #24
 8002de0:	1c59      	adds	r1, r3, #1
 8002de2:	0a55      	lsrs	r5, r2, #9
 8002de4:	4208      	tst	r0, r1
 8002de6:	d00c      	beq.n	8002e02 <__aeabi_f2d+0x2e>
 8002de8:	21e0      	movs	r1, #224	; 0xe0
 8002dea:	0089      	lsls	r1, r1, #2
 8002dec:	468c      	mov	ip, r1
 8002dee:	076d      	lsls	r5, r5, #29
 8002df0:	0b12      	lsrs	r2, r2, #12
 8002df2:	4463      	add	r3, ip
 8002df4:	051b      	lsls	r3, r3, #20
 8002df6:	4313      	orrs	r3, r2
 8002df8:	07e4      	lsls	r4, r4, #31
 8002dfa:	4323      	orrs	r3, r4
 8002dfc:	0028      	movs	r0, r5
 8002dfe:	0019      	movs	r1, r3
 8002e00:	bd70      	pop	{r4, r5, r6, pc}
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d114      	bne.n	8002e30 <__aeabi_f2d+0x5c>
 8002e06:	2d00      	cmp	r5, #0
 8002e08:	d01b      	beq.n	8002e42 <__aeabi_f2d+0x6e>
 8002e0a:	0028      	movs	r0, r5
 8002e0c:	f000 f8b0 	bl	8002f70 <__clzsi2>
 8002e10:	280a      	cmp	r0, #10
 8002e12:	dc1c      	bgt.n	8002e4e <__aeabi_f2d+0x7a>
 8002e14:	230b      	movs	r3, #11
 8002e16:	002a      	movs	r2, r5
 8002e18:	1a1b      	subs	r3, r3, r0
 8002e1a:	40da      	lsrs	r2, r3
 8002e1c:	0003      	movs	r3, r0
 8002e1e:	3315      	adds	r3, #21
 8002e20:	409d      	lsls	r5, r3
 8002e22:	4b0e      	ldr	r3, [pc, #56]	; (8002e5c <__aeabi_f2d+0x88>)
 8002e24:	0312      	lsls	r2, r2, #12
 8002e26:	1a1b      	subs	r3, r3, r0
 8002e28:	055b      	lsls	r3, r3, #21
 8002e2a:	0b12      	lsrs	r2, r2, #12
 8002e2c:	0d5b      	lsrs	r3, r3, #21
 8002e2e:	e7e1      	b.n	8002df4 <__aeabi_f2d+0x20>
 8002e30:	2d00      	cmp	r5, #0
 8002e32:	d009      	beq.n	8002e48 <__aeabi_f2d+0x74>
 8002e34:	0b13      	lsrs	r3, r2, #12
 8002e36:	2280      	movs	r2, #128	; 0x80
 8002e38:	0312      	lsls	r2, r2, #12
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	076d      	lsls	r5, r5, #29
 8002e3e:	4b08      	ldr	r3, [pc, #32]	; (8002e60 <__aeabi_f2d+0x8c>)
 8002e40:	e7d8      	b.n	8002df4 <__aeabi_f2d+0x20>
 8002e42:	2300      	movs	r3, #0
 8002e44:	2200      	movs	r2, #0
 8002e46:	e7d5      	b.n	8002df4 <__aeabi_f2d+0x20>
 8002e48:	2200      	movs	r2, #0
 8002e4a:	4b05      	ldr	r3, [pc, #20]	; (8002e60 <__aeabi_f2d+0x8c>)
 8002e4c:	e7d2      	b.n	8002df4 <__aeabi_f2d+0x20>
 8002e4e:	0003      	movs	r3, r0
 8002e50:	002a      	movs	r2, r5
 8002e52:	3b0b      	subs	r3, #11
 8002e54:	409a      	lsls	r2, r3
 8002e56:	2500      	movs	r5, #0
 8002e58:	e7e3      	b.n	8002e22 <__aeabi_f2d+0x4e>
 8002e5a:	46c0      	nop			; (mov r8, r8)
 8002e5c:	00000389 	.word	0x00000389
 8002e60:	000007ff 	.word	0x000007ff

08002e64 <__aeabi_d2f>:
 8002e64:	0002      	movs	r2, r0
 8002e66:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e68:	004b      	lsls	r3, r1, #1
 8002e6a:	030d      	lsls	r5, r1, #12
 8002e6c:	0f40      	lsrs	r0, r0, #29
 8002e6e:	0d5b      	lsrs	r3, r3, #21
 8002e70:	0fcc      	lsrs	r4, r1, #31
 8002e72:	0a6d      	lsrs	r5, r5, #9
 8002e74:	493a      	ldr	r1, [pc, #232]	; (8002f60 <__aeabi_d2f+0xfc>)
 8002e76:	4305      	orrs	r5, r0
 8002e78:	1c58      	adds	r0, r3, #1
 8002e7a:	00d7      	lsls	r7, r2, #3
 8002e7c:	4208      	tst	r0, r1
 8002e7e:	d00a      	beq.n	8002e96 <__aeabi_d2f+0x32>
 8002e80:	4938      	ldr	r1, [pc, #224]	; (8002f64 <__aeabi_d2f+0x100>)
 8002e82:	1859      	adds	r1, r3, r1
 8002e84:	29fe      	cmp	r1, #254	; 0xfe
 8002e86:	dd16      	ble.n	8002eb6 <__aeabi_d2f+0x52>
 8002e88:	20ff      	movs	r0, #255	; 0xff
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	05c0      	lsls	r0, r0, #23
 8002e8e:	4310      	orrs	r0, r2
 8002e90:	07e4      	lsls	r4, r4, #31
 8002e92:	4320      	orrs	r0, r4
 8002e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d106      	bne.n	8002ea8 <__aeabi_d2f+0x44>
 8002e9a:	433d      	orrs	r5, r7
 8002e9c:	d026      	beq.n	8002eec <__aeabi_d2f+0x88>
 8002e9e:	2205      	movs	r2, #5
 8002ea0:	0192      	lsls	r2, r2, #6
 8002ea2:	0a52      	lsrs	r2, r2, #9
 8002ea4:	b2d8      	uxtb	r0, r3
 8002ea6:	e7f1      	b.n	8002e8c <__aeabi_d2f+0x28>
 8002ea8:	432f      	orrs	r7, r5
 8002eaa:	d0ed      	beq.n	8002e88 <__aeabi_d2f+0x24>
 8002eac:	2280      	movs	r2, #128	; 0x80
 8002eae:	03d2      	lsls	r2, r2, #15
 8002eb0:	20ff      	movs	r0, #255	; 0xff
 8002eb2:	432a      	orrs	r2, r5
 8002eb4:	e7ea      	b.n	8002e8c <__aeabi_d2f+0x28>
 8002eb6:	2900      	cmp	r1, #0
 8002eb8:	dd1b      	ble.n	8002ef2 <__aeabi_d2f+0x8e>
 8002eba:	0192      	lsls	r2, r2, #6
 8002ebc:	1e50      	subs	r0, r2, #1
 8002ebe:	4182      	sbcs	r2, r0
 8002ec0:	00ed      	lsls	r5, r5, #3
 8002ec2:	0f7f      	lsrs	r7, r7, #29
 8002ec4:	432a      	orrs	r2, r5
 8002ec6:	433a      	orrs	r2, r7
 8002ec8:	0753      	lsls	r3, r2, #29
 8002eca:	d047      	beq.n	8002f5c <__aeabi_d2f+0xf8>
 8002ecc:	230f      	movs	r3, #15
 8002ece:	4013      	ands	r3, r2
 8002ed0:	2b04      	cmp	r3, #4
 8002ed2:	d000      	beq.n	8002ed6 <__aeabi_d2f+0x72>
 8002ed4:	3204      	adds	r2, #4
 8002ed6:	2380      	movs	r3, #128	; 0x80
 8002ed8:	04db      	lsls	r3, r3, #19
 8002eda:	4013      	ands	r3, r2
 8002edc:	d03e      	beq.n	8002f5c <__aeabi_d2f+0xf8>
 8002ede:	1c48      	adds	r0, r1, #1
 8002ee0:	29fe      	cmp	r1, #254	; 0xfe
 8002ee2:	d0d1      	beq.n	8002e88 <__aeabi_d2f+0x24>
 8002ee4:	0192      	lsls	r2, r2, #6
 8002ee6:	0a52      	lsrs	r2, r2, #9
 8002ee8:	b2c0      	uxtb	r0, r0
 8002eea:	e7cf      	b.n	8002e8c <__aeabi_d2f+0x28>
 8002eec:	2000      	movs	r0, #0
 8002eee:	2200      	movs	r2, #0
 8002ef0:	e7cc      	b.n	8002e8c <__aeabi_d2f+0x28>
 8002ef2:	000a      	movs	r2, r1
 8002ef4:	3217      	adds	r2, #23
 8002ef6:	db2f      	blt.n	8002f58 <__aeabi_d2f+0xf4>
 8002ef8:	2680      	movs	r6, #128	; 0x80
 8002efa:	0436      	lsls	r6, r6, #16
 8002efc:	432e      	orrs	r6, r5
 8002efe:	251e      	movs	r5, #30
 8002f00:	1a6d      	subs	r5, r5, r1
 8002f02:	2d1f      	cmp	r5, #31
 8002f04:	dd11      	ble.n	8002f2a <__aeabi_d2f+0xc6>
 8002f06:	2202      	movs	r2, #2
 8002f08:	4252      	negs	r2, r2
 8002f0a:	1a52      	subs	r2, r2, r1
 8002f0c:	0031      	movs	r1, r6
 8002f0e:	40d1      	lsrs	r1, r2
 8002f10:	2d20      	cmp	r5, #32
 8002f12:	d004      	beq.n	8002f1e <__aeabi_d2f+0xba>
 8002f14:	4a14      	ldr	r2, [pc, #80]	; (8002f68 <__aeabi_d2f+0x104>)
 8002f16:	4694      	mov	ip, r2
 8002f18:	4463      	add	r3, ip
 8002f1a:	409e      	lsls	r6, r3
 8002f1c:	4337      	orrs	r7, r6
 8002f1e:	003a      	movs	r2, r7
 8002f20:	1e53      	subs	r3, r2, #1
 8002f22:	419a      	sbcs	r2, r3
 8002f24:	430a      	orrs	r2, r1
 8002f26:	2100      	movs	r1, #0
 8002f28:	e7ce      	b.n	8002ec8 <__aeabi_d2f+0x64>
 8002f2a:	4a10      	ldr	r2, [pc, #64]	; (8002f6c <__aeabi_d2f+0x108>)
 8002f2c:	0038      	movs	r0, r7
 8002f2e:	4694      	mov	ip, r2
 8002f30:	4463      	add	r3, ip
 8002f32:	4098      	lsls	r0, r3
 8002f34:	003a      	movs	r2, r7
 8002f36:	1e41      	subs	r1, r0, #1
 8002f38:	4188      	sbcs	r0, r1
 8002f3a:	409e      	lsls	r6, r3
 8002f3c:	40ea      	lsrs	r2, r5
 8002f3e:	4330      	orrs	r0, r6
 8002f40:	4302      	orrs	r2, r0
 8002f42:	2100      	movs	r1, #0
 8002f44:	0753      	lsls	r3, r2, #29
 8002f46:	d1c1      	bne.n	8002ecc <__aeabi_d2f+0x68>
 8002f48:	2180      	movs	r1, #128	; 0x80
 8002f4a:	0013      	movs	r3, r2
 8002f4c:	04c9      	lsls	r1, r1, #19
 8002f4e:	2001      	movs	r0, #1
 8002f50:	400b      	ands	r3, r1
 8002f52:	420a      	tst	r2, r1
 8002f54:	d1c6      	bne.n	8002ee4 <__aeabi_d2f+0x80>
 8002f56:	e7a3      	b.n	8002ea0 <__aeabi_d2f+0x3c>
 8002f58:	2300      	movs	r3, #0
 8002f5a:	e7a0      	b.n	8002e9e <__aeabi_d2f+0x3a>
 8002f5c:	000b      	movs	r3, r1
 8002f5e:	e79f      	b.n	8002ea0 <__aeabi_d2f+0x3c>
 8002f60:	000007fe 	.word	0x000007fe
 8002f64:	fffffc80 	.word	0xfffffc80
 8002f68:	fffffca2 	.word	0xfffffca2
 8002f6c:	fffffc82 	.word	0xfffffc82

08002f70 <__clzsi2>:
 8002f70:	211c      	movs	r1, #28
 8002f72:	2301      	movs	r3, #1
 8002f74:	041b      	lsls	r3, r3, #16
 8002f76:	4298      	cmp	r0, r3
 8002f78:	d301      	bcc.n	8002f7e <__clzsi2+0xe>
 8002f7a:	0c00      	lsrs	r0, r0, #16
 8002f7c:	3910      	subs	r1, #16
 8002f7e:	0a1b      	lsrs	r3, r3, #8
 8002f80:	4298      	cmp	r0, r3
 8002f82:	d301      	bcc.n	8002f88 <__clzsi2+0x18>
 8002f84:	0a00      	lsrs	r0, r0, #8
 8002f86:	3908      	subs	r1, #8
 8002f88:	091b      	lsrs	r3, r3, #4
 8002f8a:	4298      	cmp	r0, r3
 8002f8c:	d301      	bcc.n	8002f92 <__clzsi2+0x22>
 8002f8e:	0900      	lsrs	r0, r0, #4
 8002f90:	3904      	subs	r1, #4
 8002f92:	a202      	add	r2, pc, #8	; (adr r2, 8002f9c <__clzsi2+0x2c>)
 8002f94:	5c10      	ldrb	r0, [r2, r0]
 8002f96:	1840      	adds	r0, r0, r1
 8002f98:	4770      	bx	lr
 8002f9a:	46c0      	nop			; (mov r8, r8)
 8002f9c:	02020304 	.word	0x02020304
 8002fa0:	01010101 	.word	0x01010101
	...

08002fac <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	085b      	lsrs	r3, r3, #1
 8002fba:	1c18      	adds	r0, r3, #0
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	b002      	add	sp, #8
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <_ZN5Accel7readI2CEtPht>:
static int16_t data_raw_acceleration[3];

#define BOOT_TIME 50 // ms
#define TIMEOUT 100

HAL_StatusTypeDef Accel::readI2C(uint16_t MemAddress, uint8_t *pData, uint16_t Size){
 8002fc2:	b5b0      	push	{r4, r5, r7, lr}
 8002fc4:	b088      	sub	sp, #32
 8002fc6:	af04      	add	r7, sp, #16
 8002fc8:	60f8      	str	r0, [r7, #12]
 8002fca:	0008      	movs	r0, r1
 8002fcc:	607a      	str	r2, [r7, #4]
 8002fce:	0019      	movs	r1, r3
 8002fd0:	240a      	movs	r4, #10
 8002fd2:	193b      	adds	r3, r7, r4
 8002fd4:	1c02      	adds	r2, r0, #0
 8002fd6:	801a      	strh	r2, [r3, #0]
 8002fd8:	2508      	movs	r5, #8
 8002fda:	197b      	adds	r3, r7, r5
 8002fdc:	1c0a      	adds	r2, r1, #0
 8002fde:	801a      	strh	r2, [r3, #0]
	return HAL_I2C_Mem_Read(I2Cx, deviceAddress, MemAddress, I2C_MEMADD_SIZE_8BIT, pData, Size, TIMEOUT);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6818      	ldr	r0, [r3, #0]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	8899      	ldrh	r1, [r3, #4]
 8002fe8:	193b      	adds	r3, r7, r4
 8002fea:	881a      	ldrh	r2, [r3, #0]
 8002fec:	2364      	movs	r3, #100	; 0x64
 8002fee:	9302      	str	r3, [sp, #8]
 8002ff0:	197b      	adds	r3, r7, r5
 8002ff2:	881b      	ldrh	r3, [r3, #0]
 8002ff4:	9301      	str	r3, [sp, #4]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	9300      	str	r3, [sp, #0]
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	f002 fcfe 	bl	80059fc <HAL_I2C_Mem_Read>
 8003000:	0003      	movs	r3, r0
}
 8003002:	0018      	movs	r0, r3
 8003004:	46bd      	mov	sp, r7
 8003006:	b004      	add	sp, #16
 8003008:	bdb0      	pop	{r4, r5, r7, pc}

0800300a <_ZN5Accel8writeI2CEtPht>:

HAL_StatusTypeDef Accel::writeI2C(uint16_t MemAddress, uint8_t *pData, uint16_t Size){
 800300a:	b5b0      	push	{r4, r5, r7, lr}
 800300c:	b088      	sub	sp, #32
 800300e:	af04      	add	r7, sp, #16
 8003010:	60f8      	str	r0, [r7, #12]
 8003012:	0008      	movs	r0, r1
 8003014:	607a      	str	r2, [r7, #4]
 8003016:	0019      	movs	r1, r3
 8003018:	240a      	movs	r4, #10
 800301a:	193b      	adds	r3, r7, r4
 800301c:	1c02      	adds	r2, r0, #0
 800301e:	801a      	strh	r2, [r3, #0]
 8003020:	2508      	movs	r5, #8
 8003022:	197b      	adds	r3, r7, r5
 8003024:	1c0a      	adds	r2, r1, #0
 8003026:	801a      	strh	r2, [r3, #0]
	return HAL_I2C_Mem_Write(I2Cx, deviceAddress, MemAddress, I2C_MEMADD_SIZE_8BIT, pData, Size, TIMEOUT);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6818      	ldr	r0, [r3, #0]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	8899      	ldrh	r1, [r3, #4]
 8003030:	193b      	adds	r3, r7, r4
 8003032:	881a      	ldrh	r2, [r3, #0]
 8003034:	2364      	movs	r3, #100	; 0x64
 8003036:	9302      	str	r3, [sp, #8]
 8003038:	197b      	adds	r3, r7, r5
 800303a:	881b      	ldrh	r3, [r3, #0]
 800303c:	9301      	str	r3, [sp, #4]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	9300      	str	r3, [sp, #0]
 8003042:	2301      	movs	r3, #1
 8003044:	f002 fbac 	bl	80057a0 <HAL_I2C_Mem_Write>
 8003048:	0003      	movs	r3, r0
}
 800304a:	0018      	movs	r0, r3
 800304c:	46bd      	mov	sp, r7
 800304e:	b004      	add	sp, #16
 8003050:	bdb0      	pop	{r4, r5, r7, pc}

08003052 <_ZN5AccelC1EP19__I2C_HandleTypeDeft>:

Accel::Accel(I2C_HandleTypeDef *I2Cx, uint16_t deviceAddress) :
 8003052:	b580      	push	{r7, lr}
 8003054:	b084      	sub	sp, #16
 8003056:	af00      	add	r7, sp, #0
 8003058:	60f8      	str	r0, [r7, #12]
 800305a:	60b9      	str	r1, [r7, #8]
 800305c:	1dbb      	adds	r3, r7, #6
 800305e:	801a      	strh	r2, [r3, #0]
	I2Cx(I2Cx),
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	68ba      	ldr	r2, [r7, #8]
 8003064:	601a      	str	r2, [r3, #0]
	deviceAddress(deviceAddress)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	1dba      	adds	r2, r7, #6
 800306a:	8812      	ldrh	r2, [r2, #0]
 800306c:	809a      	strh	r2, [r3, #4]
	{}
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	0018      	movs	r0, r3
 8003072:	46bd      	mov	sp, r7
 8003074:	b004      	add	sp, #16
 8003076:	bd80      	pop	{r7, pc}

08003078 <_ZN5Accel4initEv>:

uint8_t Accel::init()
{
 8003078:	b5f0      	push	{r4, r5, r6, r7, lr}
 800307a:	b089      	sub	sp, #36	; 0x24
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
	HAL_Delay(BOOT_TIME);
 8003080:	2032      	movs	r0, #50	; 0x32
 8003082:	f001 ffbf 	bl	8005004 <HAL_Delay>
	HAL_StatusTypeDef ret;

	uint8_t whoamI;
	readI2C(LIS2DW12_WHO_AM_I, &whoamI, 1);
 8003086:	241d      	movs	r4, #29
 8003088:	193a      	adds	r2, r7, r4
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	2301      	movs	r3, #1
 800308e:	210f      	movs	r1, #15
 8003090:	f7ff ff97 	bl	8002fc2 <_ZN5Accel7readI2CEtPht>
	if (whoamI != LIS2DW12_ID) {
 8003094:	193b      	adds	r3, r7, r4
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	2b44      	cmp	r3, #68	; 0x44
 800309a:	d000      	beq.n	800309e <_ZN5Accel4initEv+0x26>
		while (1) { }
 800309c:	e7fe      	b.n	800309c <_ZN5Accel4initEv+0x24>
	}
	/* Restore default configuration */
	lis2dw12_ctrl2_t reg2;
	if (readI2C(LIS2DW12_CTRL2, (uint8_t *) &reg2, 1) == HAL_OK)
 800309e:	241c      	movs	r4, #28
 80030a0:	193a      	adds	r2, r7, r4
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	2301      	movs	r3, #1
 80030a6:	2121      	movs	r1, #33	; 0x21
 80030a8:	f7ff ff8b 	bl	8002fc2 <_ZN5Accel7readI2CEtPht>
 80030ac:	0003      	movs	r3, r0
 80030ae:	425a      	negs	r2, r3
 80030b0:	4153      	adcs	r3, r2
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00a      	beq.n	80030ce <_ZN5Accel4initEv+0x56>
	{
		reg2.soft_reset = PROPERTY_ENABLE;
 80030b8:	193b      	adds	r3, r7, r4
 80030ba:	781a      	ldrb	r2, [r3, #0]
 80030bc:	2140      	movs	r1, #64	; 0x40
 80030be:	430a      	orrs	r2, r1
 80030c0:	701a      	strb	r2, [r3, #0]
		writeI2C(LIS2DW12_CTRL2, (uint8_t *) &reg2, 1);
 80030c2:	193a      	adds	r2, r7, r4
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	2301      	movs	r3, #1
 80030c8:	2121      	movs	r1, #33	; 0x21
 80030ca:	f7ff ff9e 	bl	800300a <_ZN5Accel8writeI2CEtPht>
	}

	uint8_t rst;
	do {
		readI2C(LIS2DW12_CTRL2, (uint8_t *) &reg2, 1);
 80030ce:	241c      	movs	r4, #28
 80030d0:	193a      	adds	r2, r7, r4
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	2301      	movs	r3, #1
 80030d6:	2121      	movs	r1, #33	; 0x21
 80030d8:	f7ff ff73 	bl	8002fc2 <_ZN5Accel7readI2CEtPht>
		rst = reg2.soft_reset;
 80030dc:	0021      	movs	r1, r4
 80030de:	187b      	adds	r3, r7, r1
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	065b      	lsls	r3, r3, #25
 80030e4:	0fdb      	lsrs	r3, r3, #31
 80030e6:	b2da      	uxtb	r2, r3
 80030e8:	201e      	movs	r0, #30
 80030ea:	183b      	adds	r3, r7, r0
 80030ec:	701a      	strb	r2, [r3, #0]
	} while (rst);
 80030ee:	183b      	adds	r3, r7, r0
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1eb      	bne.n	80030ce <_ZN5Accel4initEv+0x56>

	/* Enable Block Data Update */
	if (readI2C(LIS2DW12_CTRL2, (uint8_t *) &reg2, 1) == HAL_OK)
 80030f6:	000c      	movs	r4, r1
 80030f8:	187a      	adds	r2, r7, r1
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	2301      	movs	r3, #1
 80030fe:	2121      	movs	r1, #33	; 0x21
 8003100:	f7ff ff5f 	bl	8002fc2 <_ZN5Accel7readI2CEtPht>
 8003104:	0003      	movs	r3, r0
 8003106:	425a      	negs	r2, r3
 8003108:	4153      	adcs	r3, r2
 800310a:	b2db      	uxtb	r3, r3
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00a      	beq.n	8003126 <_ZN5Accel4initEv+0xae>
	{
		reg2.bdu = PROPERTY_ENABLE;
 8003110:	193b      	adds	r3, r7, r4
 8003112:	781a      	ldrb	r2, [r3, #0]
 8003114:	2108      	movs	r1, #8
 8003116:	430a      	orrs	r2, r1
 8003118:	701a      	strb	r2, [r3, #0]
		writeI2C(LIS2DW12_CTRL2, (uint8_t *) &reg2, 1);
 800311a:	193a      	adds	r2, r7, r4
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	2301      	movs	r3, #1
 8003120:	2121      	movs	r1, #33	; 0x21
 8003122:	f7ff ff72 	bl	800300a <_ZN5Accel8writeI2CEtPht>
	}

	/* Set full scale */
	lis2dw12_ctrl6_t reg6;
	if (readI2C(LIS2DW12_CTRL6, (uint8_t *) &reg6, 1) == HAL_OK)
 8003126:	2418      	movs	r4, #24
 8003128:	193a      	adds	r2, r7, r4
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	2301      	movs	r3, #1
 800312e:	2125      	movs	r1, #37	; 0x25
 8003130:	f7ff ff47 	bl	8002fc2 <_ZN5Accel7readI2CEtPht>
 8003134:	0003      	movs	r3, r0
 8003136:	425a      	negs	r2, r3
 8003138:	4153      	adcs	r3, r2
 800313a:	b2db      	uxtb	r3, r3
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00a      	beq.n	8003156 <_ZN5Accel4initEv+0xde>
	{
		reg6.fs = LIS2DW12_2g;
 8003140:	193b      	adds	r3, r7, r4
 8003142:	781a      	ldrb	r2, [r3, #0]
 8003144:	2130      	movs	r1, #48	; 0x30
 8003146:	438a      	bics	r2, r1
 8003148:	701a      	strb	r2, [r3, #0]
		writeI2C(LIS2DW12_CTRL6, (uint8_t *) &reg6, 1);
 800314a:	193a      	adds	r2, r7, r4
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	2301      	movs	r3, #1
 8003150:	2125      	movs	r1, #37	; 0x25
 8003152:	f7ff ff5a 	bl	800300a <_ZN5Accel8writeI2CEtPht>

	/* Configure filtering chain
	* Accelerometer - filter path / bandwidth
	*/
	lis2dw12_ctrl_reg7_t reg7;
	ret = readI2C(LIS2DW12_CTRL6, (uint8_t *) &reg6, 1);
 8003156:	251f      	movs	r5, #31
 8003158:	197c      	adds	r4, r7, r5
 800315a:	2618      	movs	r6, #24
 800315c:	19ba      	adds	r2, r7, r6
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	2301      	movs	r3, #1
 8003162:	2125      	movs	r1, #37	; 0x25
 8003164:	f7ff ff2d 	bl	8002fc2 <_ZN5Accel7readI2CEtPht>
 8003168:	0003      	movs	r3, r0
 800316a:	7023      	strb	r3, [r4, #0]
	if (ret == HAL_OK)
 800316c:	0028      	movs	r0, r5
 800316e:	183b      	adds	r3, r7, r0
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d10d      	bne.n	8003192 <_ZN5Accel4initEv+0x11a>
	{
		reg6.fds = ((uint8_t) LIS2DW12_LPF_ON_OUT & 0x10U) >> 4;
 8003176:	19bb      	adds	r3, r7, r6
 8003178:	781a      	ldrb	r2, [r3, #0]
 800317a:	2108      	movs	r1, #8
 800317c:	438a      	bics	r2, r1
 800317e:	701a      	strb	r2, [r3, #0]
		ret = readI2C(LIS2DW12_CTRL6, (uint8_t *) &reg6, 1);
 8003180:	183c      	adds	r4, r7, r0
 8003182:	19ba      	adds	r2, r7, r6
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	2301      	movs	r3, #1
 8003188:	2125      	movs	r1, #37	; 0x25
 800318a:	f7ff ff1a 	bl	8002fc2 <_ZN5Accel7readI2CEtPht>
 800318e:	0003      	movs	r3, r0
 8003190:	7023      	strb	r3, [r4, #0]
	}

	if (ret == HAL_OK)
 8003192:	221f      	movs	r2, #31
 8003194:	18bb      	adds	r3, r7, r2
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d109      	bne.n	80031b0 <_ZN5Accel4initEv+0x138>
	{
		ret = readI2C(LIS2DW12_CTRL_REG7, (uint8_t *) &reg7, 1);
 800319c:	18bc      	adds	r4, r7, r2
 800319e:	2314      	movs	r3, #20
 80031a0:	18fa      	adds	r2, r7, r3
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	2301      	movs	r3, #1
 80031a6:	213f      	movs	r1, #63	; 0x3f
 80031a8:	f7ff ff0b 	bl	8002fc2 <_ZN5Accel7readI2CEtPht>
 80031ac:	0003      	movs	r3, r0
 80031ae:	7023      	strb	r3, [r4, #0]
	}

	if (ret == HAL_OK)
 80031b0:	201f      	movs	r0, #31
 80031b2:	183b      	adds	r3, r7, r0
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d10e      	bne.n	80031d8 <_ZN5Accel4initEv+0x160>
	{
		reg7.usr_off_on_out = (uint8_t) LIS2DW12_LPF_ON_OUT & 0x01U;
 80031ba:	2514      	movs	r5, #20
 80031bc:	197b      	adds	r3, r7, r5
 80031be:	781a      	ldrb	r2, [r3, #0]
 80031c0:	2110      	movs	r1, #16
 80031c2:	438a      	bics	r2, r1
 80031c4:	701a      	strb	r2, [r3, #0]
		ret = readI2C(LIS2DW12_CTRL_REG7, (uint8_t *) &reg7, 1);
 80031c6:	183c      	adds	r4, r7, r0
 80031c8:	197a      	adds	r2, r7, r5
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	2301      	movs	r3, #1
 80031ce:	213f      	movs	r1, #63	; 0x3f
 80031d0:	f7ff fef7 	bl	8002fc2 <_ZN5Accel7readI2CEtPht>
 80031d4:	0003      	movs	r3, r0
 80031d6:	7023      	strb	r3, [r4, #0]
	}


  	ret = readI2C(LIS2DW12_CTRL6, (uint8_t *) &reg6, 1);
 80031d8:	251f      	movs	r5, #31
 80031da:	197c      	adds	r4, r7, r5
 80031dc:	2618      	movs	r6, #24
 80031de:	19ba      	adds	r2, r7, r6
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	2301      	movs	r3, #1
 80031e4:	2125      	movs	r1, #37	; 0x25
 80031e6:	f7ff feec 	bl	8002fc2 <_ZN5Accel7readI2CEtPht>
 80031ea:	0003      	movs	r3, r0
 80031ec:	7023      	strb	r3, [r4, #0]
	if (ret == HAL_OK)
 80031ee:	0028      	movs	r0, r5
 80031f0:	183b      	adds	r3, r7, r0
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d111      	bne.n	800321c <_ZN5Accel4initEv+0x1a4>
	{
		reg6.bw_filt = (uint8_t) LIS2DW12_ODR_DIV_4;
 80031f8:	0035      	movs	r5, r6
 80031fa:	197b      	adds	r3, r7, r5
 80031fc:	781a      	ldrb	r2, [r3, #0]
 80031fe:	213f      	movs	r1, #63	; 0x3f
 8003200:	400a      	ands	r2, r1
 8003202:	1c11      	adds	r1, r2, #0
 8003204:	2240      	movs	r2, #64	; 0x40
 8003206:	430a      	orrs	r2, r1
 8003208:	701a      	strb	r2, [r3, #0]
		ret = writeI2C(LIS2DW12_CTRL6, (uint8_t *) &reg6, 1);
 800320a:	183c      	adds	r4, r7, r0
 800320c:	197a      	adds	r2, r7, r5
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	2301      	movs	r3, #1
 8003212:	2125      	movs	r1, #37	; 0x25
 8003214:	f7ff fef9 	bl	800300a <_ZN5Accel8writeI2CEtPht>
 8003218:	0003      	movs	r3, r0
 800321a:	7023      	strb	r3, [r4, #0]
	}

	/* Configure power mode */

	lis2dw12_ctrl1_t reg1;
	ret = readI2C(LIS2DW12_CTRL1, (uint8_t *) &reg1, 1);
 800321c:	261f      	movs	r6, #31
 800321e:	19bc      	adds	r4, r7, r6
 8003220:	2510      	movs	r5, #16
 8003222:	197a      	adds	r2, r7, r5
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	2301      	movs	r3, #1
 8003228:	2120      	movs	r1, #32
 800322a:	f7ff feca 	bl	8002fc2 <_ZN5Accel7readI2CEtPht>
 800322e:	0003      	movs	r3, r0
 8003230:	7023      	strb	r3, [r4, #0]
	if (ret == HAL_OK)
 8003232:	0030      	movs	r0, r6
 8003234:	183b      	adds	r3, r7, r0
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d115      	bne.n	8003268 <_ZN5Accel4initEv+0x1f0>
	{
		reg1.mode = ((uint8_t) LIS2DW12_HIGH_PERFORMANCE & 0x0CU) >> 2;
 800323c:	197b      	adds	r3, r7, r5
 800323e:	781a      	ldrb	r2, [r3, #0]
 8003240:	210c      	movs	r1, #12
 8003242:	438a      	bics	r2, r1
 8003244:	1c11      	adds	r1, r2, #0
 8003246:	2204      	movs	r2, #4
 8003248:	430a      	orrs	r2, r1
 800324a:	701a      	strb	r2, [r3, #0]
		reg1.lp_mode = (uint8_t) LIS2DW12_HIGH_PERFORMANCE & 0x03U ;
 800324c:	197b      	adds	r3, r7, r5
 800324e:	781a      	ldrb	r2, [r3, #0]
 8003250:	2103      	movs	r1, #3
 8003252:	438a      	bics	r2, r1
 8003254:	701a      	strb	r2, [r3, #0]
		ret = writeI2C(LIS2DW12_CTRL1, (uint8_t *) &reg1, 1);
 8003256:	183c      	adds	r4, r7, r0
 8003258:	197a      	adds	r2, r7, r5
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	2301      	movs	r3, #1
 800325e:	2120      	movs	r1, #32
 8003260:	f7ff fed3 	bl	800300a <_ZN5Accel8writeI2CEtPht>
 8003264:	0003      	movs	r3, r0
 8003266:	7023      	strb	r3, [r4, #0]
	}

	if (ret == HAL_OK)
 8003268:	221f      	movs	r2, #31
 800326a:	18bb      	adds	r3, r7, r2
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d109      	bne.n	8003286 <_ZN5Accel4initEv+0x20e>
	{
		ret = readI2C(LIS2DW12_CTRL6, (uint8_t *) &reg6, 1);
 8003272:	18bc      	adds	r4, r7, r2
 8003274:	2318      	movs	r3, #24
 8003276:	18fa      	adds	r2, r7, r3
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	2301      	movs	r3, #1
 800327c:	2125      	movs	r1, #37	; 0x25
 800327e:	f7ff fea0 	bl	8002fc2 <_ZN5Accel7readI2CEtPht>
 8003282:	0003      	movs	r3, r0
 8003284:	7023      	strb	r3, [r4, #0]
	}

	if (ret == HAL_OK)
 8003286:	201f      	movs	r0, #31
 8003288:	183b      	adds	r3, r7, r0
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d10e      	bne.n	80032ae <_ZN5Accel4initEv+0x236>
	{
		reg6.low_noise = ((uint8_t) LIS2DW12_HIGH_PERFORMANCE & 0x10U) >> 4;
 8003290:	2518      	movs	r5, #24
 8003292:	197b      	adds	r3, r7, r5
 8003294:	781a      	ldrb	r2, [r3, #0]
 8003296:	2104      	movs	r1, #4
 8003298:	438a      	bics	r2, r1
 800329a:	701a      	strb	r2, [r3, #0]
		ret = writeI2C(LIS2DW12_CTRL6, (uint8_t *) &reg6, 1);
 800329c:	183c      	adds	r4, r7, r0
 800329e:	197a      	adds	r2, r7, r5
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	2301      	movs	r3, #1
 80032a4:	2125      	movs	r1, #37	; 0x25
 80032a6:	f7ff feb0 	bl	800300a <_ZN5Accel8writeI2CEtPht>
 80032aa:	0003      	movs	r3, r0
 80032ac:	7023      	strb	r3, [r4, #0]
	}

	/* Set Output Data Rate */
	lis2dw12_ctrl3_t reg3;
	ret = readI2C(LIS2DW12_CTRL1, (uint8_t *) &reg1, 1);
 80032ae:	251f      	movs	r5, #31
 80032b0:	197c      	adds	r4, r7, r5
 80032b2:	2610      	movs	r6, #16
 80032b4:	19ba      	adds	r2, r7, r6
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	2301      	movs	r3, #1
 80032ba:	2120      	movs	r1, #32
 80032bc:	f7ff fe81 	bl	8002fc2 <_ZN5Accel7readI2CEtPht>
 80032c0:	0003      	movs	r3, r0
 80032c2:	7023      	strb	r3, [r4, #0]
	if (ret == HAL_OK)
 80032c4:	0028      	movs	r0, r5
 80032c6:	183b      	adds	r3, r7, r0
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d111      	bne.n	80032f2 <_ZN5Accel4initEv+0x27a>
	{
		reg1.odr = (uint8_t) LIS2DW12_XL_ODR_25Hz;
 80032ce:	0035      	movs	r5, r6
 80032d0:	197b      	adds	r3, r7, r5
 80032d2:	781a      	ldrb	r2, [r3, #0]
 80032d4:	210f      	movs	r1, #15
 80032d6:	400a      	ands	r2, r1
 80032d8:	1c11      	adds	r1, r2, #0
 80032da:	2230      	movs	r2, #48	; 0x30
 80032dc:	430a      	orrs	r2, r1
 80032de:	701a      	strb	r2, [r3, #0]
		ret = writeI2C(LIS2DW12_CTRL1, (uint8_t *) &reg1, 1);
 80032e0:	183c      	adds	r4, r7, r0
 80032e2:	197a      	adds	r2, r7, r5
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	2301      	movs	r3, #1
 80032e8:	2120      	movs	r1, #32
 80032ea:	f7ff fe8e 	bl	800300a <_ZN5Accel8writeI2CEtPht>
 80032ee:	0003      	movs	r3, r0
 80032f0:	7023      	strb	r3, [r4, #0]
	}

	if (ret == HAL_OK)
 80032f2:	221f      	movs	r2, #31
 80032f4:	18bb      	adds	r3, r7, r2
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d109      	bne.n	8003310 <_ZN5Accel4initEv+0x298>
	{
		ret = readI2C(LIS2DW12_CTRL3, (uint8_t *) &reg3, 1);
 80032fc:	18bc      	adds	r4, r7, r2
 80032fe:	230c      	movs	r3, #12
 8003300:	18fa      	adds	r2, r7, r3
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	2301      	movs	r3, #1
 8003306:	2122      	movs	r1, #34	; 0x22
 8003308:	f7ff fe5b 	bl	8002fc2 <_ZN5Accel7readI2CEtPht>
 800330c:	0003      	movs	r3, r0
 800330e:	7023      	strb	r3, [r4, #0]
	}

	if (ret == HAL_OK)
 8003310:	201f      	movs	r0, #31
 8003312:	183b      	adds	r3, r7, r0
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d10e      	bne.n	8003338 <_ZN5Accel4initEv+0x2c0>
	{
		reg3.slp_mode = ((uint8_t) LIS2DW12_XL_ODR_25Hz & 0x30U) >> 4;
 800331a:	250c      	movs	r5, #12
 800331c:	197b      	adds	r3, r7, r5
 800331e:	781a      	ldrb	r2, [r3, #0]
 8003320:	2103      	movs	r1, #3
 8003322:	438a      	bics	r2, r1
 8003324:	701a      	strb	r2, [r3, #0]
		ret = writeI2C(LIS2DW12_CTRL3, (uint8_t *) &reg3, 1);
 8003326:	183c      	adds	r4, r7, r0
 8003328:	197a      	adds	r2, r7, r5
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	2301      	movs	r3, #1
 800332e:	2122      	movs	r1, #34	; 0x22
 8003330:	f7ff fe6b 	bl	800300a <_ZN5Accel8writeI2CEtPht>
 8003334:	0003      	movs	r3, r0
 8003336:	7023      	strb	r3, [r4, #0]
	}

    Ndetection = 32;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	225c      	movs	r2, #92	; 0x5c
 800333c:	2120      	movs	r1, #32
 800333e:	5299      	strh	r1, [r3, r2]
	Ncalibration = 500;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	225e      	movs	r2, #94	; 0x5e
 8003344:	21fa      	movs	r1, #250	; 0xfa
 8003346:	0049      	lsls	r1, r1, #1
 8003348:	5299      	strh	r1, [r3, r2]
	refAngle = 3.5;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a03      	ldr	r2, [pc, #12]	; (800335c <_ZN5Accel4initEv+0x2e4>)
 800334e:	649a      	str	r2, [r3, #72]	; 0x48
	return 1;
 8003350:	2301      	movs	r3, #1
}
 8003352:	0018      	movs	r0, r3
 8003354:	46bd      	mov	sp, r7
 8003356:	b009      	add	sp, #36	; 0x24
 8003358:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800335a:	46c0      	nop			; (mov r8, r8)
 800335c:	40600000 	.word	0x40600000

08003360 <_ZN5Accel9readAccelEv>:

void Accel::readAccel()
{
 8003360:	b590      	push	{r4, r7, lr}
 8003362:	b087      	sub	sp, #28
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
	uint8_t available;

	lis2dw12_status_t status;
	readI2C(LIS2DW12_STATUS, (uint8_t *) &status, 1);
 8003368:	2414      	movs	r4, #20
 800336a:	193a      	adds	r2, r7, r4
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	2301      	movs	r3, #1
 8003370:	2127      	movs	r1, #39	; 0x27
 8003372:	f7ff fe26 	bl	8002fc2 <_ZN5Accel7readI2CEtPht>
	available = status.drdy;
 8003376:	193b      	adds	r3, r7, r4
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	07db      	lsls	r3, r3, #31
 800337c:	0fdb      	lsrs	r3, r3, #31
 800337e:	b2da      	uxtb	r2, r3
 8003380:	2117      	movs	r1, #23
 8003382:	187b      	adds	r3, r7, r1
 8003384:	701a      	strb	r2, [r3, #0]

    if (available) {
 8003386:	187b      	adds	r3, r7, r1
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d100      	bne.n	8003390 <_ZN5Accel9readAccelEv+0x30>
 800338e:	e082      	b.n	8003496 <_ZN5Accel9readAccelEv+0x136>
		/* Read acceleration data */
		memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8003390:	4b43      	ldr	r3, [pc, #268]	; (80034a0 <_ZN5Accel9readAccelEv+0x140>)
 8003392:	2206      	movs	r2, #6
 8003394:	2100      	movs	r1, #0
 8003396:	0018      	movs	r0, r3
 8003398:	f005 fe60 	bl	800905c <memset>
		uint8_t buff[6];
		readI2C(LIS2DW12_OUT_X_L, buff, 6);
 800339c:	240c      	movs	r4, #12
 800339e:	193a      	adds	r2, r7, r4
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	2306      	movs	r3, #6
 80033a4:	2128      	movs	r1, #40	; 0x28
 80033a6:	f7ff fe0c 	bl	8002fc2 <_ZN5Accel7readI2CEtPht>
		data_raw_acceleration[0] = (int16_t)buff[1];
 80033aa:	0021      	movs	r1, r4
 80033ac:	187b      	adds	r3, r7, r1
 80033ae:	785b      	ldrb	r3, [r3, #1]
 80033b0:	b21a      	sxth	r2, r3
 80033b2:	4b3b      	ldr	r3, [pc, #236]	; (80034a0 <_ZN5Accel9readAccelEv+0x140>)
 80033b4:	801a      	strh	r2, [r3, #0]
		data_raw_acceleration[0] = (data_raw_acceleration[0] * 256) + (int16_t)buff[0];
 80033b6:	4b3a      	ldr	r3, [pc, #232]	; (80034a0 <_ZN5Accel9readAccelEv+0x140>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	5e9b      	ldrsh	r3, [r3, r2]
 80033bc:	b29b      	uxth	r3, r3
 80033be:	021b      	lsls	r3, r3, #8
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	187b      	adds	r3, r7, r1
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	18d3      	adds	r3, r2, r3
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	b21a      	sxth	r2, r3
 80033ce:	4b34      	ldr	r3, [pc, #208]	; (80034a0 <_ZN5Accel9readAccelEv+0x140>)
 80033d0:	801a      	strh	r2, [r3, #0]
		data_raw_acceleration[1] = (int16_t)buff[3];
 80033d2:	187b      	adds	r3, r7, r1
 80033d4:	78db      	ldrb	r3, [r3, #3]
 80033d6:	b21a      	sxth	r2, r3
 80033d8:	4b31      	ldr	r3, [pc, #196]	; (80034a0 <_ZN5Accel9readAccelEv+0x140>)
 80033da:	805a      	strh	r2, [r3, #2]
		data_raw_acceleration[1] = (data_raw_acceleration[1] * 256) + (int16_t)buff[2];
 80033dc:	4b30      	ldr	r3, [pc, #192]	; (80034a0 <_ZN5Accel9readAccelEv+0x140>)
 80033de:	2202      	movs	r2, #2
 80033e0:	5e9b      	ldrsh	r3, [r3, r2]
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	021b      	lsls	r3, r3, #8
 80033e6:	b29a      	uxth	r2, r3
 80033e8:	187b      	adds	r3, r7, r1
 80033ea:	789b      	ldrb	r3, [r3, #2]
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	18d3      	adds	r3, r2, r3
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	b21a      	sxth	r2, r3
 80033f4:	4b2a      	ldr	r3, [pc, #168]	; (80034a0 <_ZN5Accel9readAccelEv+0x140>)
 80033f6:	805a      	strh	r2, [r3, #2]
		data_raw_acceleration[2] = (int16_t)buff[5];
 80033f8:	187b      	adds	r3, r7, r1
 80033fa:	795b      	ldrb	r3, [r3, #5]
 80033fc:	b21a      	sxth	r2, r3
 80033fe:	4b28      	ldr	r3, [pc, #160]	; (80034a0 <_ZN5Accel9readAccelEv+0x140>)
 8003400:	809a      	strh	r2, [r3, #4]
		data_raw_acceleration[2] = (data_raw_acceleration[2] * 256) + (int16_t)buff[4];
 8003402:	4b27      	ldr	r3, [pc, #156]	; (80034a0 <_ZN5Accel9readAccelEv+0x140>)
 8003404:	2204      	movs	r2, #4
 8003406:	5e9b      	ldrsh	r3, [r3, r2]
 8003408:	b29b      	uxth	r3, r3
 800340a:	021b      	lsls	r3, r3, #8
 800340c:	b29a      	uxth	r2, r3
 800340e:	187b      	adds	r3, r7, r1
 8003410:	791b      	ldrb	r3, [r3, #4]
 8003412:	b29b      	uxth	r3, r3
 8003414:	18d3      	adds	r3, r2, r3
 8003416:	b29b      	uxth	r3, r3
 8003418:	b21a      	sxth	r2, r3
 800341a:	4b21      	ldr	r3, [pc, #132]	; (80034a0 <_ZN5Accel9readAccelEv+0x140>)
 800341c:	809a      	strh	r2, [r3, #4]

		// LSB to mg
		Ax = ((float_t)data_raw_acceleration[0]) * 0.061f;
 800341e:	4b20      	ldr	r3, [pc, #128]	; (80034a0 <_ZN5Accel9readAccelEv+0x140>)
 8003420:	2200      	movs	r2, #0
 8003422:	5e9b      	ldrsh	r3, [r3, r2]
 8003424:	0018      	movs	r0, r3
 8003426:	f7fd fec7 	bl	80011b8 <__aeabi_i2f>
 800342a:	1c03      	adds	r3, r0, #0
 800342c:	491d      	ldr	r1, [pc, #116]	; (80034a4 <_ZN5Accel9readAccelEv+0x144>)
 800342e:	1c18      	adds	r0, r3, #0
 8003430:	f7fd fbbe 	bl	8000bb0 <__aeabi_fmul>
 8003434:	1c03      	adds	r3, r0, #0
 8003436:	1c18      	adds	r0, r3, #0
 8003438:	f7ff fccc 	bl	8002dd4 <__aeabi_f2d>
 800343c:	0002      	movs	r2, r0
 800343e:	000b      	movs	r3, r1
 8003440:	6879      	ldr	r1, [r7, #4]
 8003442:	618a      	str	r2, [r1, #24]
 8003444:	61cb      	str	r3, [r1, #28]
		Ay = ((float_t)data_raw_acceleration[1]) * 0.061f;
 8003446:	4b16      	ldr	r3, [pc, #88]	; (80034a0 <_ZN5Accel9readAccelEv+0x140>)
 8003448:	2202      	movs	r2, #2
 800344a:	5e9b      	ldrsh	r3, [r3, r2]
 800344c:	0018      	movs	r0, r3
 800344e:	f7fd feb3 	bl	80011b8 <__aeabi_i2f>
 8003452:	1c03      	adds	r3, r0, #0
 8003454:	4913      	ldr	r1, [pc, #76]	; (80034a4 <_ZN5Accel9readAccelEv+0x144>)
 8003456:	1c18      	adds	r0, r3, #0
 8003458:	f7fd fbaa 	bl	8000bb0 <__aeabi_fmul>
 800345c:	1c03      	adds	r3, r0, #0
 800345e:	1c18      	adds	r0, r3, #0
 8003460:	f7ff fcb8 	bl	8002dd4 <__aeabi_f2d>
 8003464:	0002      	movs	r2, r0
 8003466:	000b      	movs	r3, r1
 8003468:	6879      	ldr	r1, [r7, #4]
 800346a:	620a      	str	r2, [r1, #32]
 800346c:	624b      	str	r3, [r1, #36]	; 0x24
		Az = ((float_t)data_raw_acceleration[2]) * 0.061f;
 800346e:	4b0c      	ldr	r3, [pc, #48]	; (80034a0 <_ZN5Accel9readAccelEv+0x140>)
 8003470:	2204      	movs	r2, #4
 8003472:	5e9b      	ldrsh	r3, [r3, r2]
 8003474:	0018      	movs	r0, r3
 8003476:	f7fd fe9f 	bl	80011b8 <__aeabi_i2f>
 800347a:	1c03      	adds	r3, r0, #0
 800347c:	4909      	ldr	r1, [pc, #36]	; (80034a4 <_ZN5Accel9readAccelEv+0x144>)
 800347e:	1c18      	adds	r0, r3, #0
 8003480:	f7fd fb96 	bl	8000bb0 <__aeabi_fmul>
 8003484:	1c03      	adds	r3, r0, #0
 8003486:	1c18      	adds	r0, r3, #0
 8003488:	f7ff fca4 	bl	8002dd4 <__aeabi_f2d>
 800348c:	0002      	movs	r2, r0
 800348e:	000b      	movs	r3, r1
 8003490:	6879      	ldr	r1, [r7, #4]
 8003492:	628a      	str	r2, [r1, #40]	; 0x28
 8003494:	62cb      	str	r3, [r1, #44]	; 0x2c
    }
}
 8003496:	46c0      	nop			; (mov r8, r8)
 8003498:	46bd      	mov	sp, r7
 800349a:	b007      	add	sp, #28
 800349c:	bd90      	pop	{r4, r7, pc}
 800349e:	46c0      	nop			; (mov r8, r8)
 80034a0:	200000ac 	.word	0x200000ac
 80034a4:	3d79db23 	.word	0x3d79db23

080034a8 <_ZN5Accel14detectAbnormalER5Siren>:

void Accel::detectAbnormal(Siren& mySiren) {
 80034a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034aa:	b089      	sub	sp, #36	; 0x24
 80034ac:	af04      	add	r7, sp, #16
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
	meanAx = 0;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	64da      	str	r2, [r3, #76]	; 0x4c
	meanAy = 0;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	651a      	str	r2, [r3, #80]	; 0x50
	meanAz = 0;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	655a      	str	r2, [r3, #84]	; 0x54
	for (int i=0; i<Ndetection;i++) {
 80034c4:	2300      	movs	r3, #0
 80034c6:	60fb      	str	r3, [r7, #12]
 80034c8:	e03f      	b.n	800354a <_ZN5Accel14detectAbnormalER5Siren+0xa2>
		readAccel();
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	0018      	movs	r0, r3
 80034ce:	f7ff ff47 	bl	8003360 <_ZN5Accel9readAccelEv>
		meanAx += Ax;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034d6:	1c18      	adds	r0, r3, #0
 80034d8:	f7ff fc7c 	bl	8002dd4 <__aeabi_f2d>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	699a      	ldr	r2, [r3, #24]
 80034e0:	69db      	ldr	r3, [r3, #28]
 80034e2:	f7fd febb 	bl	800125c <__aeabi_dadd>
 80034e6:	0002      	movs	r2, r0
 80034e8:	000b      	movs	r3, r1
 80034ea:	0010      	movs	r0, r2
 80034ec:	0019      	movs	r1, r3
 80034ee:	f7ff fcb9 	bl	8002e64 <__aeabi_d2f>
 80034f2:	1c02      	adds	r2, r0, #0
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	64da      	str	r2, [r3, #76]	; 0x4c
		meanAy += Ay;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034fc:	1c18      	adds	r0, r3, #0
 80034fe:	f7ff fc69 	bl	8002dd4 <__aeabi_f2d>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a1a      	ldr	r2, [r3, #32]
 8003506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003508:	f7fd fea8 	bl	800125c <__aeabi_dadd>
 800350c:	0002      	movs	r2, r0
 800350e:	000b      	movs	r3, r1
 8003510:	0010      	movs	r0, r2
 8003512:	0019      	movs	r1, r3
 8003514:	f7ff fca6 	bl	8002e64 <__aeabi_d2f>
 8003518:	1c02      	adds	r2, r0, #0
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	651a      	str	r2, [r3, #80]	; 0x50
		meanAz += Az;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003522:	1c18      	adds	r0, r3, #0
 8003524:	f7ff fc56 	bl	8002dd4 <__aeabi_f2d>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800352c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352e:	f7fd fe95 	bl	800125c <__aeabi_dadd>
 8003532:	0002      	movs	r2, r0
 8003534:	000b      	movs	r3, r1
 8003536:	0010      	movs	r0, r2
 8003538:	0019      	movs	r1, r3
 800353a:	f7ff fc93 	bl	8002e64 <__aeabi_d2f>
 800353e:	1c02      	adds	r2, r0, #0
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	655a      	str	r2, [r3, #84]	; 0x54
	for (int i=0; i<Ndetection;i++) {
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	3301      	adds	r3, #1
 8003548:	60fb      	str	r3, [r7, #12]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	225c      	movs	r2, #92	; 0x5c
 800354e:	5a9b      	ldrh	r3, [r3, r2]
 8003550:	001a      	movs	r2, r3
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	4293      	cmp	r3, r2
 8003556:	dbb8      	blt.n	80034ca <_ZN5Accel14detectAbnormalER5Siren+0x22>
	}

	meanAx /= Ndetection;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	225c      	movs	r2, #92	; 0x5c
 8003560:	5a9b      	ldrh	r3, [r3, r2]
 8003562:	0018      	movs	r0, r3
 8003564:	f7fd fe28 	bl	80011b8 <__aeabi_i2f>
 8003568:	1c03      	adds	r3, r0, #0
 800356a:	1c19      	adds	r1, r3, #0
 800356c:	1c20      	adds	r0, r4, #0
 800356e:	f7fd f955 	bl	800081c <__aeabi_fdiv>
 8003572:	1c03      	adds	r3, r0, #0
 8003574:	1c1a      	adds	r2, r3, #0
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	64da      	str	r2, [r3, #76]	; 0x4c
	meanAy /= Ndetection;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	225c      	movs	r2, #92	; 0x5c
 8003582:	5a9b      	ldrh	r3, [r3, r2]
 8003584:	0018      	movs	r0, r3
 8003586:	f7fd fe17 	bl	80011b8 <__aeabi_i2f>
 800358a:	1c03      	adds	r3, r0, #0
 800358c:	1c19      	adds	r1, r3, #0
 800358e:	1c20      	adds	r0, r4, #0
 8003590:	f7fd f944 	bl	800081c <__aeabi_fdiv>
 8003594:	1c03      	adds	r3, r0, #0
 8003596:	1c1a      	adds	r2, r3, #0
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	651a      	str	r2, [r3, #80]	; 0x50
	meanAz /= Ndetection;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6d5c      	ldr	r4, [r3, #84]	; 0x54
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	225c      	movs	r2, #92	; 0x5c
 80035a4:	5a9b      	ldrh	r3, [r3, r2]
 80035a6:	0018      	movs	r0, r3
 80035a8:	f7fd fe06 	bl	80011b8 <__aeabi_i2f>
 80035ac:	1c03      	adds	r3, r0, #0
 80035ae:	1c19      	adds	r1, r3, #0
 80035b0:	1c20      	adds	r0, r4, #0
 80035b2:	f7fd f933 	bl	800081c <__aeabi_fdiv>
 80035b6:	1c03      	adds	r3, r0, #0
 80035b8:	1c1a      	adds	r2, r3, #0
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	655a      	str	r2, [r3, #84]	; 0x54

	angle = angleBetweenVectors(meanAx, meanAy, meanAz, refAx, refAy, refAz);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6d5e      	ldr	r6, [r3, #84]	; 0x54
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	9302      	str	r3, [sp, #8]
 80035da:	9101      	str	r1, [sp, #4]
 80035dc:	9200      	str	r2, [sp, #0]
 80035de:	1c33      	adds	r3, r6, #0
 80035e0:	1c2a      	adds	r2, r5, #0
 80035e2:	1c21      	adds	r1, r4, #0
 80035e4:	f000 f958 	bl	8003898 <_ZN5Accel19angleBetweenVectorsEffffff>
 80035e8:	1c02      	adds	r2, r0, #0
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	645a      	str	r2, [r3, #68]	; 0x44
	Acc = sqrt(Ax*Ax + Ay*Ay + Az*Az);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6998      	ldr	r0, [r3, #24]
 80035f2:	69d9      	ldr	r1, [r3, #28]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	699a      	ldr	r2, [r3, #24]
 80035f8:	69db      	ldr	r3, [r3, #28]
 80035fa:	f7fe fd89 	bl	8002110 <__aeabi_dmul>
 80035fe:	0002      	movs	r2, r0
 8003600:	000b      	movs	r3, r1
 8003602:	0014      	movs	r4, r2
 8003604:	001d      	movs	r5, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a18      	ldr	r0, [r3, #32]
 800360a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a1a      	ldr	r2, [r3, #32]
 8003610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003612:	f7fe fd7d 	bl	8002110 <__aeabi_dmul>
 8003616:	0002      	movs	r2, r0
 8003618:	000b      	movs	r3, r1
 800361a:	0020      	movs	r0, r4
 800361c:	0029      	movs	r1, r5
 800361e:	f7fd fe1d 	bl	800125c <__aeabi_dadd>
 8003622:	0002      	movs	r2, r0
 8003624:	000b      	movs	r3, r1
 8003626:	0014      	movs	r4, r2
 8003628:	001d      	movs	r5, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800362e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003636:	f7fe fd6b 	bl	8002110 <__aeabi_dmul>
 800363a:	0002      	movs	r2, r0
 800363c:	000b      	movs	r3, r1
 800363e:	0020      	movs	r0, r4
 8003640:	0029      	movs	r1, r5
 8003642:	f7fd fe0b 	bl	800125c <__aeabi_dadd>
 8003646:	0002      	movs	r2, r0
 8003648:	000b      	movs	r3, r1
 800364a:	0010      	movs	r0, r2
 800364c:	0019      	movs	r1, r3
 800364e:	f005 f9d5 	bl	80089fc <sqrt>
 8003652:	0002      	movs	r2, r0
 8003654:	000b      	movs	r3, r1
 8003656:	0010      	movs	r0, r2
 8003658:	0019      	movs	r1, r3
 800365a:	f7ff fc03 	bl	8002e64 <__aeabi_d2f>
 800365e:	1c02      	adds	r2, r0, #0
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	63da      	str	r2, [r3, #60]	; 0x3c

//	if (angle > refAngle || abs(Acc-refAcc) > 4)
	if ((abs(Acc-refAcc) > 8) || (angle > refAngle))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366c:	1c19      	adds	r1, r3, #0
 800366e:	1c10      	adds	r0, r2, #0
 8003670:	f7fd fbec 	bl	8000e4c <__aeabi_fsub>
 8003674:	1c03      	adds	r3, r0, #0
 8003676:	1c18      	adds	r0, r3, #0
 8003678:	f7ff fc98 	bl	8002fac <_ZSt3absf>
 800367c:	1c03      	adds	r3, r0, #0
 800367e:	2182      	movs	r1, #130	; 0x82
 8003680:	05c9      	lsls	r1, r1, #23
 8003682:	1c18      	adds	r0, r3, #0
 8003684:	f7fc ff16 	bl	80004b4 <__aeabi_fcmpgt>
 8003688:	1e03      	subs	r3, r0, #0
 800368a:	d109      	bne.n	80036a0 <_ZN5Accel14detectAbnormalER5Siren+0x1f8>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003694:	1c19      	adds	r1, r3, #0
 8003696:	1c10      	adds	r0, r2, #0
 8003698:	f7fc ff0c 	bl	80004b4 <__aeabi_fcmpgt>
 800369c:	1e03      	subs	r3, r0, #0
 800369e:	d001      	beq.n	80036a4 <_ZN5Accel14detectAbnormalER5Siren+0x1fc>
 80036a0:	2301      	movs	r3, #1
 80036a2:	e000      	b.n	80036a6 <_ZN5Accel14detectAbnormalER5Siren+0x1fe>
 80036a4:	2300      	movs	r3, #0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d004      	beq.n	80036b4 <_ZN5Accel14detectAbnormalER5Siren+0x20c>
	{
		mySiren.handleStart();
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	0018      	movs	r0, r3
 80036ae:	f000 fc4b 	bl	8003f48 <_ZN5Siren11handleStartEv>
//			inte = true;
//			HAL_Delay(500);
//		} else {
//			inte = false;
//		}
}
 80036b2:	e003      	b.n	80036bc <_ZN5Accel14detectAbnormalER5Siren+0x214>
		mySiren.handleStop();
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	0018      	movs	r0, r3
 80036b8:	f000 fca6 	bl	8004008 <_ZN5Siren10handleStopEv>
}
 80036bc:	46c0      	nop			; (mov r8, r8)
 80036be:	46bd      	mov	sp, r7
 80036c0:	b005      	add	sp, #20
 80036c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080036c4 <_ZN5Accel9calibrateEv>:

// TODO : Mettre un timer pour qu'il execute @freq pendant @T
// Enregistrement des valeurs extrêmes pour chaque axe
void Accel::calibrate() {
 80036c4:	b5b0      	push	{r4, r5, r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
	refAx = 0;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	631a      	str	r2, [r3, #48]	; 0x30
	refAy = 0;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	635a      	str	r2, [r3, #52]	; 0x34
	refAz = 0;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	639a      	str	r2, [r3, #56]	; 0x38
	refAcc = 0;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	641a      	str	r2, [r3, #64]	; 0x40

	for (int i=0; i < Ncalibration; i++) {
 80036e4:	2300      	movs	r3, #0
 80036e6:	60fb      	str	r3, [r7, #12]
 80036e8:	e086      	b.n	80037f8 <_ZN5Accel9calibrateEv+0x134>
		readAccel();
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	0018      	movs	r0, r3
 80036ee:	f7ff fe37 	bl	8003360 <_ZN5Accel9readAccelEv>
		refAx += Ax;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f6:	1c18      	adds	r0, r3, #0
 80036f8:	f7ff fb6c 	bl	8002dd4 <__aeabi_f2d>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	699a      	ldr	r2, [r3, #24]
 8003700:	69db      	ldr	r3, [r3, #28]
 8003702:	f7fd fdab 	bl	800125c <__aeabi_dadd>
 8003706:	0002      	movs	r2, r0
 8003708:	000b      	movs	r3, r1
 800370a:	0010      	movs	r0, r2
 800370c:	0019      	movs	r1, r3
 800370e:	f7ff fba9 	bl	8002e64 <__aeabi_d2f>
 8003712:	1c02      	adds	r2, r0, #0
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	631a      	str	r2, [r3, #48]	; 0x30
		refAy += Ay;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800371c:	1c18      	adds	r0, r3, #0
 800371e:	f7ff fb59 	bl	8002dd4 <__aeabi_f2d>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a1a      	ldr	r2, [r3, #32]
 8003726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003728:	f7fd fd98 	bl	800125c <__aeabi_dadd>
 800372c:	0002      	movs	r2, r0
 800372e:	000b      	movs	r3, r1
 8003730:	0010      	movs	r0, r2
 8003732:	0019      	movs	r1, r3
 8003734:	f7ff fb96 	bl	8002e64 <__aeabi_d2f>
 8003738:	1c02      	adds	r2, r0, #0
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	635a      	str	r2, [r3, #52]	; 0x34
		refAz += Az;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003742:	1c18      	adds	r0, r3, #0
 8003744:	f7ff fb46 	bl	8002dd4 <__aeabi_f2d>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800374c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374e:	f7fd fd85 	bl	800125c <__aeabi_dadd>
 8003752:	0002      	movs	r2, r0
 8003754:	000b      	movs	r3, r1
 8003756:	0010      	movs	r0, r2
 8003758:	0019      	movs	r1, r3
 800375a:	f7ff fb83 	bl	8002e64 <__aeabi_d2f>
 800375e:	1c02      	adds	r2, r0, #0
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	639a      	str	r2, [r3, #56]	; 0x38
		Acc = sqrt(Ax*Ax+Ay*Ay+Az*Az);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6998      	ldr	r0, [r3, #24]
 8003768:	69d9      	ldr	r1, [r3, #28]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	699a      	ldr	r2, [r3, #24]
 800376e:	69db      	ldr	r3, [r3, #28]
 8003770:	f7fe fcce 	bl	8002110 <__aeabi_dmul>
 8003774:	0002      	movs	r2, r0
 8003776:	000b      	movs	r3, r1
 8003778:	0014      	movs	r4, r2
 800377a:	001d      	movs	r5, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a18      	ldr	r0, [r3, #32]
 8003780:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a1a      	ldr	r2, [r3, #32]
 8003786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003788:	f7fe fcc2 	bl	8002110 <__aeabi_dmul>
 800378c:	0002      	movs	r2, r0
 800378e:	000b      	movs	r3, r1
 8003790:	0020      	movs	r0, r4
 8003792:	0029      	movs	r1, r5
 8003794:	f7fd fd62 	bl	800125c <__aeabi_dadd>
 8003798:	0002      	movs	r2, r0
 800379a:	000b      	movs	r3, r1
 800379c:	0014      	movs	r4, r2
 800379e:	001d      	movs	r5, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80037a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ac:	f7fe fcb0 	bl	8002110 <__aeabi_dmul>
 80037b0:	0002      	movs	r2, r0
 80037b2:	000b      	movs	r3, r1
 80037b4:	0020      	movs	r0, r4
 80037b6:	0029      	movs	r1, r5
 80037b8:	f7fd fd50 	bl	800125c <__aeabi_dadd>
 80037bc:	0002      	movs	r2, r0
 80037be:	000b      	movs	r3, r1
 80037c0:	0010      	movs	r0, r2
 80037c2:	0019      	movs	r1, r3
 80037c4:	f005 f91a 	bl	80089fc <sqrt>
 80037c8:	0002      	movs	r2, r0
 80037ca:	000b      	movs	r3, r1
 80037cc:	0010      	movs	r0, r2
 80037ce:	0019      	movs	r1, r3
 80037d0:	f7ff fb48 	bl	8002e64 <__aeabi_d2f>
 80037d4:	1c02      	adds	r2, r0, #0
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	63da      	str	r2, [r3, #60]	; 0x3c
//		if (refAcc < Acc) {
//			refAcc = Acc;
//		}
		refAcc += Acc;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037e2:	1c19      	adds	r1, r3, #0
 80037e4:	1c10      	adds	r0, r2, #0
 80037e6:	f7fc fe79 	bl	80004dc <__aeabi_fadd>
 80037ea:	1c03      	adds	r3, r0, #0
 80037ec:	1c1a      	adds	r2, r3, #0
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	641a      	str	r2, [r3, #64]	; 0x40
	for (int i=0; i < Ncalibration; i++) {
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	3301      	adds	r3, #1
 80037f6:	60fb      	str	r3, [r7, #12]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	225e      	movs	r2, #94	; 0x5e
 80037fc:	5a9b      	ldrh	r3, [r3, r2]
 80037fe:	001a      	movs	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	4293      	cmp	r3, r2
 8003804:	da00      	bge.n	8003808 <_ZN5Accel9calibrateEv+0x144>
 8003806:	e770      	b.n	80036ea <_ZN5Accel9calibrateEv+0x26>
	}
	// SEUIL FIXE
	refAcc=refAcc/Ncalibration;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	225e      	movs	r2, #94	; 0x5e
 8003810:	5a9b      	ldrh	r3, [r3, r2]
 8003812:	0018      	movs	r0, r3
 8003814:	f7fd fcd0 	bl	80011b8 <__aeabi_i2f>
 8003818:	1c03      	adds	r3, r0, #0
 800381a:	1c19      	adds	r1, r3, #0
 800381c:	1c20      	adds	r0, r4, #0
 800381e:	f7fc fffd 	bl	800081c <__aeabi_fdiv>
 8003822:	1c03      	adds	r3, r0, #0
 8003824:	1c1a      	adds	r2, r3, #0
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	641a      	str	r2, [r3, #64]	; 0x40

	refAx /= Ncalibration;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	225e      	movs	r2, #94	; 0x5e
 8003832:	5a9b      	ldrh	r3, [r3, r2]
 8003834:	0018      	movs	r0, r3
 8003836:	f7fd fcbf 	bl	80011b8 <__aeabi_i2f>
 800383a:	1c03      	adds	r3, r0, #0
 800383c:	1c19      	adds	r1, r3, #0
 800383e:	1c20      	adds	r0, r4, #0
 8003840:	f7fc ffec 	bl	800081c <__aeabi_fdiv>
 8003844:	1c03      	adds	r3, r0, #0
 8003846:	1c1a      	adds	r2, r3, #0
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	631a      	str	r2, [r3, #48]	; 0x30
	refAy /= Ncalibration;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	225e      	movs	r2, #94	; 0x5e
 8003854:	5a9b      	ldrh	r3, [r3, r2]
 8003856:	0018      	movs	r0, r3
 8003858:	f7fd fcae 	bl	80011b8 <__aeabi_i2f>
 800385c:	1c03      	adds	r3, r0, #0
 800385e:	1c19      	adds	r1, r3, #0
 8003860:	1c20      	adds	r0, r4, #0
 8003862:	f7fc ffdb 	bl	800081c <__aeabi_fdiv>
 8003866:	1c03      	adds	r3, r0, #0
 8003868:	1c1a      	adds	r2, r3, #0
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	635a      	str	r2, [r3, #52]	; 0x34
	refAz /= Ncalibration;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	225e      	movs	r2, #94	; 0x5e
 8003876:	5a9b      	ldrh	r3, [r3, r2]
 8003878:	0018      	movs	r0, r3
 800387a:	f7fd fc9d 	bl	80011b8 <__aeabi_i2f>
 800387e:	1c03      	adds	r3, r0, #0
 8003880:	1c19      	adds	r1, r3, #0
 8003882:	1c20      	adds	r0, r4, #0
 8003884:	f7fc ffca 	bl	800081c <__aeabi_fdiv>
 8003888:	1c03      	adds	r3, r0, #0
 800388a:	1c1a      	adds	r2, r3, #0
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003890:	46c0      	nop			; (mov r8, r8)
 8003892:	46bd      	mov	sp, r7
 8003894:	b004      	add	sp, #16
 8003896:	bdb0      	pop	{r4, r5, r7, pc}

08003898 <_ZN5Accel19angleBetweenVectorsEffffff>:

float Accel::angleBetweenVectors(float x1, float y1, float z1, float x2, float y2, float z2)
{
 8003898:	b5b0      	push	{r4, r5, r7, lr}
 800389a:	b088      	sub	sp, #32
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
 80038a4:	603b      	str	r3, [r7, #0]
    float dot_product = x1*x2 + y1*y2 + z1*z2;
 80038a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80038a8:	68b8      	ldr	r0, [r7, #8]
 80038aa:	f7fd f981 	bl	8000bb0 <__aeabi_fmul>
 80038ae:	1c03      	adds	r3, r0, #0
 80038b0:	1c1c      	adds	r4, r3, #0
 80038b2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f7fd f97b 	bl	8000bb0 <__aeabi_fmul>
 80038ba:	1c03      	adds	r3, r0, #0
 80038bc:	1c19      	adds	r1, r3, #0
 80038be:	1c20      	adds	r0, r4, #0
 80038c0:	f7fc fe0c 	bl	80004dc <__aeabi_fadd>
 80038c4:	1c03      	adds	r3, r0, #0
 80038c6:	1c1c      	adds	r4, r3, #0
 80038c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80038ca:	6838      	ldr	r0, [r7, #0]
 80038cc:	f7fd f970 	bl	8000bb0 <__aeabi_fmul>
 80038d0:	1c03      	adds	r3, r0, #0
 80038d2:	1c19      	adds	r1, r3, #0
 80038d4:	1c20      	adds	r0, r4, #0
 80038d6:	f7fc fe01 	bl	80004dc <__aeabi_fadd>
 80038da:	1c03      	adds	r3, r0, #0
 80038dc:	61fb      	str	r3, [r7, #28]
    float norm_product = sqrtf(x1*x1 + y1*y1 + z1*z1) * sqrtf(x2*x2 + y2*y2 + z2*z2);
 80038de:	68b9      	ldr	r1, [r7, #8]
 80038e0:	68b8      	ldr	r0, [r7, #8]
 80038e2:	f7fd f965 	bl	8000bb0 <__aeabi_fmul>
 80038e6:	1c03      	adds	r3, r0, #0
 80038e8:	1c1c      	adds	r4, r3, #0
 80038ea:	6879      	ldr	r1, [r7, #4]
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f7fd f95f 	bl	8000bb0 <__aeabi_fmul>
 80038f2:	1c03      	adds	r3, r0, #0
 80038f4:	1c19      	adds	r1, r3, #0
 80038f6:	1c20      	adds	r0, r4, #0
 80038f8:	f7fc fdf0 	bl	80004dc <__aeabi_fadd>
 80038fc:	1c03      	adds	r3, r0, #0
 80038fe:	1c1c      	adds	r4, r3, #0
 8003900:	6839      	ldr	r1, [r7, #0]
 8003902:	6838      	ldr	r0, [r7, #0]
 8003904:	f7fd f954 	bl	8000bb0 <__aeabi_fmul>
 8003908:	1c03      	adds	r3, r0, #0
 800390a:	1c19      	adds	r1, r3, #0
 800390c:	1c20      	adds	r0, r4, #0
 800390e:	f7fc fde5 	bl	80004dc <__aeabi_fadd>
 8003912:	1c03      	adds	r3, r0, #0
 8003914:	1c18      	adds	r0, r3, #0
 8003916:	f005 f8b7 	bl	8008a88 <sqrtf>
 800391a:	1c04      	adds	r4, r0, #0
 800391c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800391e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003920:	f7fd f946 	bl	8000bb0 <__aeabi_fmul>
 8003924:	1c03      	adds	r3, r0, #0
 8003926:	1c1d      	adds	r5, r3, #0
 8003928:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800392a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800392c:	f7fd f940 	bl	8000bb0 <__aeabi_fmul>
 8003930:	1c03      	adds	r3, r0, #0
 8003932:	1c19      	adds	r1, r3, #0
 8003934:	1c28      	adds	r0, r5, #0
 8003936:	f7fc fdd1 	bl	80004dc <__aeabi_fadd>
 800393a:	1c03      	adds	r3, r0, #0
 800393c:	1c1d      	adds	r5, r3, #0
 800393e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003940:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003942:	f7fd f935 	bl	8000bb0 <__aeabi_fmul>
 8003946:	1c03      	adds	r3, r0, #0
 8003948:	1c19      	adds	r1, r3, #0
 800394a:	1c28      	adds	r0, r5, #0
 800394c:	f7fc fdc6 	bl	80004dc <__aeabi_fadd>
 8003950:	1c03      	adds	r3, r0, #0
 8003952:	1c18      	adds	r0, r3, #0
 8003954:	f005 f898 	bl	8008a88 <sqrtf>
 8003958:	1c03      	adds	r3, r0, #0
 800395a:	1c19      	adds	r1, r3, #0
 800395c:	1c20      	adds	r0, r4, #0
 800395e:	f7fd f927 	bl	8000bb0 <__aeabi_fmul>
 8003962:	1c03      	adds	r3, r0, #0
 8003964:	61bb      	str	r3, [r7, #24]
    float angle = acosf(dot_product / norm_product);
 8003966:	69b9      	ldr	r1, [r7, #24]
 8003968:	69f8      	ldr	r0, [r7, #28]
 800396a:	f7fc ff57 	bl	800081c <__aeabi_fdiv>
 800396e:	1c03      	adds	r3, r0, #0
 8003970:	1c18      	adds	r0, r3, #0
 8003972:	f005 f869 	bl	8008a48 <acosf>
 8003976:	1c03      	adds	r3, r0, #0
 8003978:	617b      	str	r3, [r7, #20]
    return angle * 180.0f / 3.14159265359f; // rad => deg
 800397a:	4907      	ldr	r1, [pc, #28]	; (8003998 <_ZN5Accel19angleBetweenVectorsEffffff+0x100>)
 800397c:	6978      	ldr	r0, [r7, #20]
 800397e:	f7fd f917 	bl	8000bb0 <__aeabi_fmul>
 8003982:	1c03      	adds	r3, r0, #0
 8003984:	4905      	ldr	r1, [pc, #20]	; (800399c <_ZN5Accel19angleBetweenVectorsEffffff+0x104>)
 8003986:	1c18      	adds	r0, r3, #0
 8003988:	f7fc ff48 	bl	800081c <__aeabi_fdiv>
 800398c:	1c03      	adds	r3, r0, #0
}
 800398e:	1c18      	adds	r0, r3, #0
 8003990:	46bd      	mov	sp, r7
 8003992:	b008      	add	sp, #32
 8003994:	bdb0      	pop	{r4, r5, r7, pc}
 8003996:	46c0      	nop			; (mov r8, r8)
 8003998:	43340000 	.word	0x43340000
 800399c:	40490fdb 	.word	0x40490fdb

080039a0 <_ZN3Log11getInstanceEv>:
#include "Log.hpp"			// Module Log
#include "error.hpp"		// Module Erreur
#include "global.h"         // Paramètres et définitions générales

// Retourne le singleton
Log& Log::getInstance() {
 80039a0:	b580      	push	{r7, lr}
 80039a2:	af00      	add	r7, sp, #0
    static Log instance; // Instance unique créée une seule fois lors de l'appel de cette fonction
    return instance;
 80039a4:	4b01      	ldr	r3, [pc, #4]	; (80039ac <_ZN3Log11getInstanceEv+0xc>)
}
 80039a6:	0018      	movs	r0, r3
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	200000b4 	.word	0x200000b4

080039b0 <_ZNK3Log18getIndexPlusOffsetEj>:

// Parcourt circulairement le Log par offset i
size_t Log::getIndexPlusOffset(size_t i) const {
 80039b0:	b590      	push	{r4, r7, lr}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
    return (currentIndex + i % MAX_LOG_SIZE + MAX_LOG_SIZE) % MAX_LOG_SIZE;
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	23c8      	movs	r3, #200	; 0xc8
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	58d4      	ldr	r4, [r2, r3]
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	2164      	movs	r1, #100	; 0x64
 80039c6:	0018      	movs	r0, r3
 80039c8:	f7fc fc20 	bl	800020c <__aeabi_uidivmod>
 80039cc:	000b      	movs	r3, r1
 80039ce:	18e3      	adds	r3, r4, r3
 80039d0:	3364      	adds	r3, #100	; 0x64
 80039d2:	2164      	movs	r1, #100	; 0x64
 80039d4:	0018      	movs	r0, r3
 80039d6:	f7fc fc19 	bl	800020c <__aeabi_uidivmod>
 80039da:	000b      	movs	r3, r1
}
 80039dc:	0018      	movs	r0, r3
 80039de:	46bd      	mov	sp, r7
 80039e0:	b003      	add	sp, #12
 80039e2:	bd90      	pop	{r4, r7, pc}

080039e4 <_ZN3Log8addEntryE8LogEntry>:

// Ajoute une entré au Log
void Log::addEntry(LogEntry entry) {
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	1d3b      	adds	r3, r7, #4
 80039ee:	6019      	str	r1, [r3, #0]
 80039f0:	605a      	str	r2, [r3, #4]
    currentIndex = getIndexPlusOffset(1);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2101      	movs	r1, #1
 80039f6:	0018      	movs	r0, r3
 80039f8:	f7ff ffda 	bl	80039b0 <_ZNK3Log18getIndexPlusOffsetEj>
 80039fc:	0001      	movs	r1, r0
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	23c8      	movs	r3, #200	; 0xc8
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	50d1      	str	r1, [r2, r3]
    LogEntries[currentIndex] = entry;
 8003a06:	68f8      	ldr	r0, [r7, #12]
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	23c8      	movs	r3, #200	; 0xc8
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	58d3      	ldr	r3, [r2, r3]
 8003a10:	0019      	movs	r1, r3
 8003a12:	f000 fa51 	bl	8003eb8 <_ZNSt5arrayI8LogEntryLj100EEixEj>
 8003a16:	0003      	movs	r3, r0
 8003a18:	1d3a      	adds	r2, r7, #4
 8003a1a:	ca03      	ldmia	r2!, {r0, r1}
 8003a1c:	c303      	stmia	r3!, {r0, r1}
}
 8003a1e:	46c0      	nop			; (mov r8, r8)
 8003a20:	46bd      	mov	sp, r7
 8003a22:	b004      	add	sp, #16
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <_ZN3Log4initEv>:

// Initialise le Log
void Log::init() {
 8003a26:	b580      	push	{r7, lr}
 8003a28:	b084      	sub	sp, #16
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
    // Commencer le premier addEntry à l'indice 0
    currentIndex = MAX_LOG_SIZE - 1;
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	23c8      	movs	r3, #200	; 0xc8
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	2163      	movs	r1, #99	; 0x63
 8003a36:	50d1      	str	r1, [r2, r3]

    // Initialiser chaque élément du tableau LogEntries
    for (size_t i = 0; i < MAX_LOG_SIZE; ++i) {
 8003a38:	2300      	movs	r3, #0
 8003a3a:	60fb      	str	r3, [r7, #12]
 8003a3c:	e014      	b.n	8003a68 <_ZN3Log4initEv+0x42>
        // Pour chaque élément, initialisez les champs de startTime et stopTime à des valeurs par défaut
        LogEntries[i].startTimestamp = 0;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	68fa      	ldr	r2, [r7, #12]
 8003a42:	0011      	movs	r1, r2
 8003a44:	0018      	movs	r0, r3
 8003a46:	f000 fa37 	bl	8003eb8 <_ZNSt5arrayI8LogEntryLj100EEixEj>
 8003a4a:	0003      	movs	r3, r0
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	601a      	str	r2, [r3, #0]
        LogEntries[i].stopTimestamp = 0;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	0011      	movs	r1, r2
 8003a56:	0018      	movs	r0, r3
 8003a58:	f000 fa2e 	bl	8003eb8 <_ZNSt5arrayI8LogEntryLj100EEixEj>
 8003a5c:	0003      	movs	r3, r0
 8003a5e:	2200      	movs	r2, #0
 8003a60:	605a      	str	r2, [r3, #4]
    for (size_t i = 0; i < MAX_LOG_SIZE; ++i) {
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	3301      	adds	r3, #1
 8003a66:	60fb      	str	r3, [r7, #12]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2b63      	cmp	r3, #99	; 0x63
 8003a6c:	d9e7      	bls.n	8003a3e <_ZN3Log4initEv+0x18>
    }
    setTime();
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	0018      	movs	r0, r3
 8003a72:	f000 f901 	bl	8003c78 <_ZN3Log7setTimeEv>
}
 8003a76:	46c0      	nop			; (mov r8, r8)
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	b004      	add	sp, #16
 8003a7c:	bd80      	pop	{r7, pc}

08003a7e <_ZNK3Log16isLastEntryEmptyEv>:

// Teste si la dernière entrée du journal est vide
bool Log::isLastEntryEmpty() const {
 8003a7e:	b580      	push	{r7, lr}
 8003a80:	b084      	sub	sp, #16
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
    bool isEmpty = (LogEntries[currentIndex].startTimestamp == 0)
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	23c8      	movs	r3, #200	; 0xc8
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	58d3      	ldr	r3, [r2, r3]
 8003a90:	0019      	movs	r1, r3
 8003a92:	f000 fa21 	bl	8003ed8 <_ZNKSt5arrayI8LogEntryLj100EEixEj>
 8003a96:	0003      	movs	r3, r0
 8003a98:	681b      	ldr	r3, [r3, #0]
    && (LogEntries[currentIndex].stopTimestamp == 0);
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d10d      	bne.n	8003aba <_ZNK3Log16isLastEntryEmptyEv+0x3c>
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	23c8      	movs	r3, #200	; 0xc8
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	58d3      	ldr	r3, [r2, r3]
 8003aa8:	0019      	movs	r1, r3
 8003aaa:	f000 fa15 	bl	8003ed8 <_ZNKSt5arrayI8LogEntryLj100EEixEj>
 8003aae:	0003      	movs	r3, r0
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <_ZNK3Log16isLastEntryEmptyEv+0x3c>
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	e000      	b.n	8003abc <_ZNK3Log16isLastEntryEmptyEv+0x3e>
 8003aba:	2200      	movs	r2, #0
 8003abc:	210f      	movs	r1, #15
 8003abe:	187b      	adds	r3, r7, r1
 8003ac0:	701a      	strb	r2, [r3, #0]
    return isEmpty;
 8003ac2:	187b      	adds	r3, r7, r1
 8003ac4:	781b      	ldrb	r3, [r3, #0]
}
 8003ac6:	0018      	movs	r0, r3
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	b004      	add	sp, #16
 8003acc:	bd80      	pop	{r7, pc}

08003ace <_ZNK3Log15hasRungMoreThanEm>:

// Détermine si la sonnerie à sonné plus longtemps que "duration"
bool Log::hasRungMoreThan(uint32_t duration) const {
 8003ace:	b590      	push	{r4, r7, lr}
 8003ad0:	b089      	sub	sp, #36	; 0x24
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
 8003ad6:	6039      	str	r1, [r7, #0]
    uint32_t totalDuration = 0;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	61fb      	str	r3, [r7, #28]
    uint32_t deltaBetween = 0;
 8003adc:	2300      	movs	r3, #0
 8003ade:	61bb      	str	r3, [r7, #24]
	int i = currentIndex; 
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	23c8      	movs	r3, #200	; 0xc8
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	58d3      	ldr	r3, [r2, r3]
 8003ae8:	617b      	str	r3, [r7, #20]
    int j;
    uint32_t currentTimestamp = getTimestamp();
 8003aea:	f000 f919 	bl	8003d20 <_Z12getTimestampv>
 8003aee:	0003      	movs	r3, r0
 8003af0:	613b      	str	r3, [r7, #16]
    // Tant que le log considéré correspond à la sonnerie actuelle
    deltaBetween = currentTimestamp - LogEntries[i].stopTimestamp;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	697a      	ldr	r2, [r7, #20]
 8003af6:	0011      	movs	r1, r2
 8003af8:	0018      	movs	r0, r3
 8003afa:	f000 f9ed 	bl	8003ed8 <_ZNKSt5arrayI8LogEntryLj100EEixEj>
 8003afe:	0003      	movs	r3, r0
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	693a      	ldr	r2, [r7, #16]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	61bb      	str	r3, [r7, #24]
    while (deltaBetween < SIREN_MIN_DELAY_BETWEEN_TWO_TRIGGERS) {
 8003b08:	e030      	b.n	8003b6c <_ZNK3Log15hasRungMoreThanEm+0x9e>
        // Ajout de la durée du log actuel
        totalDuration += LogEntries[i].stopTimestamp - LogEntries[i].startTimestamp;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	697a      	ldr	r2, [r7, #20]
 8003b0e:	0011      	movs	r1, r2
 8003b10:	0018      	movs	r0, r3
 8003b12:	f000 f9e1 	bl	8003ed8 <_ZNKSt5arrayI8LogEntryLj100EEixEj>
 8003b16:	0003      	movs	r3, r0
 8003b18:	685c      	ldr	r4, [r3, #4]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	697a      	ldr	r2, [r7, #20]
 8003b1e:	0011      	movs	r1, r2
 8003b20:	0018      	movs	r0, r3
 8003b22:	f000 f9d9 	bl	8003ed8 <_ZNKSt5arrayI8LogEntryLj100EEixEj>
 8003b26:	0003      	movs	r3, r0
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	1ae3      	subs	r3, r4, r3
 8003b2c:	69fa      	ldr	r2, [r7, #28]
 8003b2e:	18d3      	adds	r3, r2, r3
 8003b30:	61fb      	str	r3, [r7, #28]
        // Calcul de la distance au log précédent
        j = getIndexPlusOffset(-1);
 8003b32:	2301      	movs	r3, #1
 8003b34:	425a      	negs	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	0011      	movs	r1, r2
 8003b3a:	0018      	movs	r0, r3
 8003b3c:	f7ff ff38 	bl	80039b0 <_ZNK3Log18getIndexPlusOffsetEj>
 8003b40:	0003      	movs	r3, r0
 8003b42:	60fb      	str	r3, [r7, #12]
        deltaBetween = LogEntries[j].stopTimestamp - LogEntries[i].startTimestamp;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	0011      	movs	r1, r2
 8003b4a:	0018      	movs	r0, r3
 8003b4c:	f000 f9c4 	bl	8003ed8 <_ZNKSt5arrayI8LogEntryLj100EEixEj>
 8003b50:	0003      	movs	r3, r0
 8003b52:	685c      	ldr	r4, [r3, #4]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	697a      	ldr	r2, [r7, #20]
 8003b58:	0011      	movs	r1, r2
 8003b5a:	0018      	movs	r0, r3
 8003b5c:	f000 f9bc 	bl	8003ed8 <_ZNKSt5arrayI8LogEntryLj100EEixEj>
 8003b60:	0003      	movs	r3, r0
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	1ae3      	subs	r3, r4, r3
 8003b66:	61bb      	str	r3, [r7, #24]
        i = j;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	617b      	str	r3, [r7, #20]
    while (deltaBetween < SIREN_MIN_DELAY_BETWEEN_TWO_TRIGGERS) {
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	23fa      	movs	r3, #250	; 0xfa
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d3c9      	bcc.n	8003b0a <_ZNK3Log15hasRungMoreThanEm+0x3c>
    }
    return (totalDuration > duration);
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	683a      	ldr	r2, [r7, #0]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	419b      	sbcs	r3, r3
 8003b7e:	425b      	negs	r3, r3
 8003b80:	b2db      	uxtb	r3, r3
}
 8003b82:	0018      	movs	r0, r3
 8003b84:	46bd      	mov	sp, r7
 8003b86:	b009      	add	sp, #36	; 0x24
 8003b88:	bd90      	pop	{r4, r7, pc}

08003b8a <_ZNK3Log19hasRungMoreThanXinXEmm>:

// Détermine si la sonnerie à sonné plus longtemps que "duration" pendant "durationRef"
bool Log::hasRungMoreThanXinX(uint32_t duration, uint32_t durationRef) const {
 8003b8a:	b590      	push	{r4, r7, lr}
 8003b8c:	b08d      	sub	sp, #52	; 0x34
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	60f8      	str	r0, [r7, #12]
 8003b92:	60b9      	str	r1, [r7, #8]
 8003b94:	607a      	str	r2, [r7, #4]
    uint32_t totalDuration = 0;
 8003b96:	2300      	movs	r3, #0
 8003b98:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t deltaBetween = 0;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	62bb      	str	r3, [r7, #40]	; 0x28

    uint32_t currentTimestamp = getTimestamp();
 8003b9e:	f000 f8bf 	bl	8003d20 <_Z12getTimestampv>
 8003ba2:	0003      	movs	r3, r0
 8003ba4:	61fb      	str	r3, [r7, #28]
    uint32_t clippedTimestamp;
    
    int i = currentIndex;
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	23c8      	movs	r3, #200	; 0xc8
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	58d3      	ldr	r3, [r2, r3]
 8003bae:	627b      	str	r3, [r7, #36]	; 0x24
    int j = 0;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	623b      	str	r3, [r7, #32]
    
    // Calcul de la distance au dernier log
    deltaBetween = LogEntries[i].stopTimestamp - currentTimestamp;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bb8:	0011      	movs	r1, r2
 8003bba:	0018      	movs	r0, r3
 8003bbc:	f000 f98c 	bl	8003ed8 <_ZNKSt5arrayI8LogEntryLj100EEixEj>
 8003bc0:	0003      	movs	r3, r0
 8003bc2:	685a      	ldr	r2, [r3, #4]
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	62bb      	str	r3, [r7, #40]	; 0x28
    
    // Vérifie si un log est assez récent pour être considéré ET que tous les logs n'ont pas été parcourus
    while (deltaBetween < durationRef && j < MAX_LOG_SIZE) {
 8003bca:	e044      	b.n	8003c56 <_ZNK3Log19hasRungMoreThanXinXEmm+0xcc>
        // Calcule la durée du log actuel
        uint32_t logDuration = LogEntries[i].stopTimestamp - LogEntries[i].startTimestamp;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bd0:	0011      	movs	r1, r2
 8003bd2:	0018      	movs	r0, r3
 8003bd4:	f000 f980 	bl	8003ed8 <_ZNKSt5arrayI8LogEntryLj100EEixEj>
 8003bd8:	0003      	movs	r3, r0
 8003bda:	685c      	ldr	r4, [r3, #4]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003be0:	0011      	movs	r1, r2
 8003be2:	0018      	movs	r0, r3
 8003be4:	f000 f978 	bl	8003ed8 <_ZNKSt5arrayI8LogEntryLj100EEixEj>
 8003be8:	0003      	movs	r3, r0
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	1ae3      	subs	r3, r4, r3
 8003bee:	61bb      	str	r3, [r7, #24]
        // Vérifie si l'entiereté du log est plus récent que durationRef
        if ((deltaBetween + logDuration) < durationRef) {
 8003bf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	18d3      	adds	r3, r2, r3
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d904      	bls.n	8003c06 <_ZNK3Log19hasRungMoreThanXinXEmm+0x7c>
            totalDuration += logDuration;
 8003bfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	18d3      	adds	r3, r2, r3
 8003c02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c04:	e010      	b.n	8003c28 <_ZNK3Log19hasRungMoreThanXinXEmm+0x9e>
        }
        // Sinon, une partie seulement du log est plus récente que durationRef
        else {
            // La partie concernée s'étend de stopTime à (currentTime-durationRef)
            clippedTimestamp = currentTimestamp - durationRef;
 8003c06:	69fa      	ldr	r2, [r7, #28]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	617b      	str	r3, [r7, #20]
            totalDuration += LogEntries[i].stopTimestamp - clippedTimestamp;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c12:	0011      	movs	r1, r2
 8003c14:	0018      	movs	r0, r3
 8003c16:	f000 f95f 	bl	8003ed8 <_ZNKSt5arrayI8LogEntryLj100EEixEj>
 8003c1a:	0003      	movs	r3, r0
 8003c1c:	685a      	ldr	r2, [r3, #4]
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c24:	18d3      	adds	r3, r2, r3
 8003c26:	62fb      	str	r3, [r7, #44]	; 0x2c
        }        
        // Calcul de la distance au log précédent
        i = getIndexPlusOffset(-1);
 8003c28:	2301      	movs	r3, #1
 8003c2a:	425a      	negs	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	0011      	movs	r1, r2
 8003c30:	0018      	movs	r0, r3
 8003c32:	f7ff febd 	bl	80039b0 <_ZNK3Log18getIndexPlusOffsetEj>
 8003c36:	0003      	movs	r3, r0
 8003c38:	627b      	str	r3, [r7, #36]	; 0x24
        deltaBetween = LogEntries[i].stopTimestamp - currentTimestamp;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c3e:	0011      	movs	r1, r2
 8003c40:	0018      	movs	r0, r3
 8003c42:	f000 f949 	bl	8003ed8 <_ZNKSt5arrayI8LogEntryLj100EEixEj>
 8003c46:	0003      	movs	r3, r0
 8003c48:	685a      	ldr	r2, [r3, #4]
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	62bb      	str	r3, [r7, #40]	; 0x28
        j++;
 8003c50:	6a3b      	ldr	r3, [r7, #32]
 8003c52:	3301      	adds	r3, #1
 8003c54:	623b      	str	r3, [r7, #32]
    while (deltaBetween < durationRef && j < MAX_LOG_SIZE) {
 8003c56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d202      	bcs.n	8003c64 <_ZNK3Log19hasRungMoreThanXinXEmm+0xda>
 8003c5e:	6a3b      	ldr	r3, [r7, #32]
 8003c60:	2b63      	cmp	r3, #99	; 0x63
 8003c62:	ddb3      	ble.n	8003bcc <_ZNK3Log19hasRungMoreThanXinXEmm+0x42>
    }
    return (totalDuration > duration);
 8003c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c66:	68ba      	ldr	r2, [r7, #8]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	419b      	sbcs	r3, r3
 8003c6c:	425b      	negs	r3, r3
 8003c6e:	b2db      	uxtb	r3, r3
}
 8003c70:	0018      	movs	r0, r3
 8003c72:	46bd      	mov	sp, r7
 8003c74:	b00d      	add	sp, #52	; 0x34
 8003c76:	bd90      	pop	{r4, r7, pc}

08003c78 <_ZN3Log7setTimeEv>:

// Régler l'horloge RTC
void Log::setTime(void) {
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b088      	sub	sp, #32
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef sTime;
  RTC_DateTypeDef sDate;
  // Récupérer Time du GPS, sinon :

  sTime.Hours = 0x0; // set hours
 8003c80:	210c      	movs	r1, #12
 8003c82:	187b      	adds	r3, r7, r1
 8003c84:	2200      	movs	r2, #0
 8003c86:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0; // set minutes
 8003c88:	187b      	adds	r3, r7, r1
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0; // set seconds
 8003c8e:	187b      	adds	r3, r7, r1
 8003c90:	2200      	movs	r2, #0
 8003c92:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003c94:	187b      	adds	r3, r7, r1
 8003c96:	2200      	movs	r2, #0
 8003c98:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003c9a:	187b      	adds	r3, r7, r1
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003ca0:	1879      	adds	r1, r7, r1
 8003ca2:	4b1d      	ldr	r3, [pc, #116]	; (8003d18 <_ZN3Log7setTimeEv+0xa0>)
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	0018      	movs	r0, r3
 8003ca8:	f003 fa46 	bl	8007138 <HAL_RTC_SetTime>
 8003cac:	0003      	movs	r3, r0
 8003cae:	1e5a      	subs	r2, r3, #1
 8003cb0:	4193      	sbcs	r3, r2
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d005      	beq.n	8003cc4 <_ZN3Log7setTimeEv+0x4c>
  {
    setError(errorRTC, true);
 8003cb8:	2380      	movs	r3, #128	; 0x80
 8003cba:	011b      	lsls	r3, r3, #4
 8003cbc:	2101      	movs	r1, #1
 8003cbe:	0018      	movs	r0, r3
 8003cc0:	f000 fc2e 	bl	8004520 <_Z8setError5Errorb>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003cc4:	2108      	movs	r1, #8
 8003cc6:	187b      	adds	r3, r7, r1
 8003cc8:	2201      	movs	r2, #1
 8003cca:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8003ccc:	187b      	adds	r3, r7, r1
 8003cce:	2201      	movs	r2, #1
 8003cd0:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x0; // date
 8003cd2:	187b      	adds	r3, r7, r1
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0; // year
 8003cd8:	187b      	adds	r3, r7, r1
 8003cda:	2200      	movs	r2, #0
 8003cdc:	70da      	strb	r2, [r3, #3]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003cde:	1879      	adds	r1, r7, r1
 8003ce0:	4b0d      	ldr	r3, [pc, #52]	; (8003d18 <_ZN3Log7setTimeEv+0xa0>)
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	0018      	movs	r0, r3
 8003ce6:	f003 fb2b 	bl	8007340 <HAL_RTC_SetDate>
 8003cea:	0003      	movs	r3, r0
 8003cec:	1e5a      	subs	r2, r3, #1
 8003cee:	4193      	sbcs	r3, r2
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d005      	beq.n	8003d02 <_ZN3Log7setTimeEv+0x8a>
  {
    setError(errorRTC, true);
 8003cf6:	2380      	movs	r3, #128	; 0x80
 8003cf8:	011b      	lsls	r3, r3, #4
 8003cfa:	2101      	movs	r1, #1
 8003cfc:	0018      	movs	r0, r3
 8003cfe:	f000 fc0f 	bl	8004520 <_Z8setError5Errorb>
  }

  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8003d02:	4a06      	ldr	r2, [pc, #24]	; (8003d1c <_ZN3Log7setTimeEv+0xa4>)
 8003d04:	4b04      	ldr	r3, [pc, #16]	; (8003d18 <_ZN3Log7setTimeEv+0xa0>)
 8003d06:	2101      	movs	r1, #1
 8003d08:	0018      	movs	r0, r3
 8003d0a:	f003 fcea 	bl	80076e2 <HAL_RTCEx_BKUPWrite>
}
 8003d0e:	46c0      	nop			; (mov r8, r8)
 8003d10:	46bd      	mov	sp, r7
 8003d12:	b008      	add	sp, #32
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	46c0      	nop			; (mov r8, r8)
 8003d18:	20000570 	.word	0x20000570
 8003d1c:	000032f2 	.word	0x000032f2

08003d20 <_Z12getTimestampv>:

// Retourne le Timestamp RTC
uint32_t getTimestamp(void)
{
 8003d20:	b590      	push	{r4, r7, lr}
 8003d22:	b089      	sub	sp, #36	; 0x24
 8003d24:	af02      	add	r7, sp, #8
    DateTime currentTime;
    HAL_RTC_GetTime(&hrtc, &currentTime.time, RTC_FORMAT_BIN);
 8003d26:	003b      	movs	r3, r7
 8003d28:	1d19      	adds	r1, r3, #4
 8003d2a:	4b0e      	ldr	r3, [pc, #56]	; (8003d64 <_Z12getTimestampv+0x44>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	0018      	movs	r0, r3
 8003d30:	f003 faaa 	bl	8007288 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &currentTime.date, RTC_FORMAT_BIN);
 8003d34:	0039      	movs	r1, r7
 8003d36:	4b0b      	ldr	r3, [pc, #44]	; (8003d64 <_Z12getTimestampv+0x44>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	0018      	movs	r0, r3
 8003d3c:	f003 fb92 	bl	8007464 <HAL_RTC_GetDate>
    return DateTimeToTimestamp(currentTime);
 8003d40:	003b      	movs	r3, r7
 8003d42:	466a      	mov	r2, sp
 8003d44:	0011      	movs	r1, r2
 8003d46:	001a      	movs	r2, r3
 8003d48:	3210      	adds	r2, #16
 8003d4a:	ca11      	ldmia	r2!, {r0, r4}
 8003d4c:	c111      	stmia	r1!, {r0, r4}
 8003d4e:	6818      	ldr	r0, [r3, #0]
 8003d50:	6859      	ldr	r1, [r3, #4]
 8003d52:	689a      	ldr	r2, [r3, #8]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	f000 f807 	bl	8003d68 <_Z19DateTimeToTimestamp8DateTime>
 8003d5a:	0003      	movs	r3, r0
}
 8003d5c:	0018      	movs	r0, r3
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	b007      	add	sp, #28
 8003d62:	bd90      	pop	{r4, r7, pc}
 8003d64:	20000570 	.word	0x20000570

08003d68 <_Z19DateTimeToTimestamp8DateTime>:

// Convertie un Datetime RTC en Timestamp UNIX
uint32_t DateTimeToTimestamp(DateTime DateTime)
{
 8003d68:	b084      	sub	sp, #16
 8003d6a:	b5b0      	push	{r4, r5, r7, lr}
 8003d6c:	b082      	sub	sp, #8
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	2518      	movs	r5, #24
 8003d72:	197c      	adds	r4, r7, r5
 8003d74:	6020      	str	r0, [r4, #0]
 8003d76:	6061      	str	r1, [r4, #4]
 8003d78:	60a2      	str	r2, [r4, #8]
 8003d7a:	60e3      	str	r3, [r4, #12]
	int i;
	uint32_t sec;

	sec = DateTime.date.Year * SECS_PER_YEAR;
 8003d7c:	197b      	adds	r3, r7, r5
 8003d7e:	78db      	ldrb	r3, [r3, #3]
 8003d80:	001a      	movs	r2, r3
 8003d82:	0013      	movs	r3, r2
 8003d84:	025b      	lsls	r3, r3, #9
 8003d86:	189b      	adds	r3, r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	189b      	adds	r3, r3, r2
 8003d8c:	00db      	lsls	r3, r3, #3
 8003d8e:	189b      	adds	r3, r3, r2
 8003d90:	011a      	lsls	r2, r3, #4
 8003d92:	1ad2      	subs	r2, r2, r3
 8003d94:	01d3      	lsls	r3, r2, #7
 8003d96:	001a      	movs	r2, r3
 8003d98:	0013      	movs	r3, r2
 8003d9a:	603b      	str	r3, [r7, #0]
	for (i = 0; i < DateTime.date.Year; i++) {
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	607b      	str	r3, [r7, #4]
 8003da0:	e01a      	b.n	8003dd8 <_Z19DateTimeToTimestamp8DateTime+0x70>
		if (IS_LEAP_YEAR(i))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2203      	movs	r2, #3
 8003da6:	4013      	ands	r3, r2
 8003da8:	d113      	bne.n	8003dd2 <_Z19DateTimeToTimestamp8DateTime+0x6a>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2164      	movs	r1, #100	; 0x64
 8003dae:	0018      	movs	r0, r3
 8003db0:	f7fc fb16 	bl	80003e0 <__aeabi_idivmod>
 8003db4:	1e0b      	subs	r3, r1, #0
 8003db6:	d107      	bne.n	8003dc8 <_Z19DateTimeToTimestamp8DateTime+0x60>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	22c8      	movs	r2, #200	; 0xc8
 8003dbc:	0051      	lsls	r1, r2, #1
 8003dbe:	0018      	movs	r0, r3
 8003dc0:	f7fc fb0e 	bl	80003e0 <__aeabi_idivmod>
 8003dc4:	1e0b      	subs	r3, r1, #0
 8003dc6:	d104      	bne.n	8003dd2 <_Z19DateTimeToTimestamp8DateTime+0x6a>
			sec += SECS_PER_DAY;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	4a38      	ldr	r2, [pc, #224]	; (8003eac <_Z19DateTimeToTimestamp8DateTime+0x144>)
 8003dcc:	4694      	mov	ip, r2
 8003dce:	4463      	add	r3, ip
 8003dd0:	603b      	str	r3, [r7, #0]
	for (i = 0; i < DateTime.date.Year; i++) {
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	607b      	str	r3, [r7, #4]
 8003dd8:	2118      	movs	r1, #24
 8003dda:	187b      	adds	r3, r7, r1
 8003ddc:	78db      	ldrb	r3, [r3, #3]
 8003dde:	001a      	movs	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4293      	cmp	r3, r2
 8003de4:	dbdd      	blt.n	8003da2 <_Z19DateTimeToTimestamp8DateTime+0x3a>
	}

	sec += (days_since_year_start[DateTime.date.Month - 1] +
 8003de6:	187b      	adds	r3, r7, r1
 8003de8:	785b      	ldrb	r3, [r3, #1]
 8003dea:	1e5a      	subs	r2, r3, #1
 8003dec:	4b30      	ldr	r3, [pc, #192]	; (8003eb0 <_Z19DateTimeToTimestamp8DateTime+0x148>)
 8003dee:	0052      	lsls	r2, r2, #1
 8003df0:	5ad3      	ldrh	r3, [r2, r3]
 8003df2:	001c      	movs	r4, r3
		(IS_LEAP_YEAR(DateTime.date.Year) && DateTime.date.Month > 2) +
 8003df4:	187b      	adds	r3, r7, r1
 8003df6:	78db      	ldrb	r3, [r3, #3]
 8003df8:	001a      	movs	r2, r3
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	d11b      	bne.n	8003e38 <_Z19DateTimeToTimestamp8DateTime+0xd0>
 8003e00:	000d      	movs	r5, r1
 8003e02:	187b      	adds	r3, r7, r1
 8003e04:	78db      	ldrb	r3, [r3, #3]
 8003e06:	2164      	movs	r1, #100	; 0x64
 8003e08:	0018      	movs	r0, r3
 8003e0a:	f7fc f9ff 	bl	800020c <__aeabi_uidivmod>
 8003e0e:	000b      	movs	r3, r1
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d109      	bne.n	8003e2a <_Z19DateTimeToTimestamp8DateTime+0xc2>
 8003e16:	197b      	adds	r3, r7, r5
 8003e18:	78db      	ldrb	r3, [r3, #3]
 8003e1a:	001a      	movs	r2, r3
 8003e1c:	23c8      	movs	r3, #200	; 0xc8
 8003e1e:	0059      	lsls	r1, r3, #1
 8003e20:	0010      	movs	r0, r2
 8003e22:	f7fc fadd 	bl	80003e0 <__aeabi_idivmod>
 8003e26:	1e0b      	subs	r3, r1, #0
 8003e28:	d106      	bne.n	8003e38 <_Z19DateTimeToTimestamp8DateTime+0xd0>
 8003e2a:	2318      	movs	r3, #24
 8003e2c:	18fb      	adds	r3, r7, r3
 8003e2e:	785b      	ldrb	r3, [r3, #1]
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d901      	bls.n	8003e38 <_Z19DateTimeToTimestamp8DateTime+0xd0>
 8003e34:	2301      	movs	r3, #1
 8003e36:	e000      	b.n	8003e3a <_Z19DateTimeToTimestamp8DateTime+0xd2>
 8003e38:	2300      	movs	r3, #0
	sec += (days_since_year_start[DateTime.date.Month - 1] +
 8003e3a:	18e2      	adds	r2, r4, r3
		(DateTime.date.Date - 1)) * SECS_PER_DAY;
 8003e3c:	2118      	movs	r1, #24
 8003e3e:	187b      	adds	r3, r7, r1
 8003e40:	789b      	ldrb	r3, [r3, #2]
 8003e42:	3b01      	subs	r3, #1
		(IS_LEAP_YEAR(DateTime.date.Year) && DateTime.date.Month > 2) +
 8003e44:	18d2      	adds	r2, r2, r3
		(DateTime.date.Date - 1)) * SECS_PER_DAY;
 8003e46:	0013      	movs	r3, r2
 8003e48:	005b      	lsls	r3, r3, #1
 8003e4a:	189b      	adds	r3, r3, r2
 8003e4c:	011a      	lsls	r2, r3, #4
 8003e4e:	1ad2      	subs	r2, r2, r3
 8003e50:	0113      	lsls	r3, r2, #4
 8003e52:	1a9b      	subs	r3, r3, r2
 8003e54:	01db      	lsls	r3, r3, #7
 8003e56:	001a      	movs	r2, r3
	sec += (days_since_year_start[DateTime.date.Month - 1] +
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	189b      	adds	r3, r3, r2
 8003e5c:	603b      	str	r3, [r7, #0]

    sec += DateTime.time.Hours * 3600 + DateTime.time.Minutes * 60 + DateTime.time.Seconds;
 8003e5e:	0008      	movs	r0, r1
 8003e60:	183b      	adds	r3, r7, r0
 8003e62:	791b      	ldrb	r3, [r3, #4]
 8003e64:	001a      	movs	r2, r3
 8003e66:	0013      	movs	r3, r2
 8003e68:	011b      	lsls	r3, r3, #4
 8003e6a:	1a9b      	subs	r3, r3, r2
 8003e6c:	011a      	lsls	r2, r3, #4
 8003e6e:	1ad2      	subs	r2, r2, r3
 8003e70:	0113      	lsls	r3, r2, #4
 8003e72:	001a      	movs	r2, r3
 8003e74:	0011      	movs	r1, r2
 8003e76:	183b      	adds	r3, r7, r0
 8003e78:	795b      	ldrb	r3, [r3, #5]
 8003e7a:	001a      	movs	r2, r3
 8003e7c:	0013      	movs	r3, r2
 8003e7e:	011b      	lsls	r3, r3, #4
 8003e80:	1a9b      	subs	r3, r3, r2
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	18ca      	adds	r2, r1, r3
 8003e86:	183b      	adds	r3, r7, r0
 8003e88:	799b      	ldrb	r3, [r3, #6]
 8003e8a:	18d3      	adds	r3, r2, r3
 8003e8c:	001a      	movs	r2, r3
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	189b      	adds	r3, r3, r2
 8003e92:	603b      	str	r3, [r7, #0]
	// Ajout des secondes écoulées entre 1970 et 2000
	return sec + SECS_TILL_YEAR_2K;
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	4a07      	ldr	r2, [pc, #28]	; (8003eb4 <_Z19DateTimeToTimestamp8DateTime+0x14c>)
 8003e98:	4694      	mov	ip, r2
 8003e9a:	4463      	add	r3, ip
}
 8003e9c:	0018      	movs	r0, r3
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	b002      	add	sp, #8
 8003ea2:	bcb0      	pop	{r4, r5, r7}
 8003ea4:	bc08      	pop	{r3}
 8003ea6:	b004      	add	sp, #16
 8003ea8:	4718      	bx	r3
 8003eaa:	46c0      	nop			; (mov r8, r8)
 8003eac:	00015180 	.word	0x00015180
 8003eb0:	20000000 	.word	0x20000000
 8003eb4:	386d4380 	.word	0x386d4380

08003eb8 <_ZNSt5arrayI8LogEntryLj100EEixEj>:
      _GLIBCXX_NODISCARD constexpr bool
      empty() const noexcept { return size() == 0; }

      // Element access.
      _GLIBCXX17_CONSTEXPR reference
      operator[](size_type __n) noexcept
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
      {
	__glibcxx_requires_subscript(__n);
	return _AT_Type::_S_ref(_M_elems, __n);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	683a      	ldr	r2, [r7, #0]
 8003ec6:	0011      	movs	r1, r2
 8003ec8:	0018      	movs	r0, r3
 8003eca:	f000 f815 	bl	8003ef8 <_ZNSt14__array_traitsI8LogEntryLj100EE6_S_refERA100_KS0_j>
 8003ece:	0003      	movs	r3, r0
      }
 8003ed0:	0018      	movs	r0, r3
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	b002      	add	sp, #8
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <_ZNKSt5arrayI8LogEntryLj100EEixEj>:

      constexpr const_reference
      operator[](size_type __n) const noexcept
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
      {
#if __cplusplus >= 201402L
	__glibcxx_requires_subscript(__n);
#endif
	return _AT_Type::_S_ref(_M_elems, __n);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	683a      	ldr	r2, [r7, #0]
 8003ee6:	0011      	movs	r1, r2
 8003ee8:	0018      	movs	r0, r3
 8003eea:	f000 f805 	bl	8003ef8 <_ZNSt14__array_traitsI8LogEntryLj100EE6_S_refERA100_KS0_j>
 8003eee:	0003      	movs	r3, r0
      }
 8003ef0:	0018      	movs	r0, r3
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	b002      	add	sp, #8
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <_ZNSt14__array_traitsI8LogEntryLj100EE6_S_refERA100_KS0_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	00db      	lsls	r3, r3, #3
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	18d3      	adds	r3, r2, r3
 8003f0a:	0018      	movs	r0, r3
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	b002      	add	sp, #8
 8003f10:	bd80      	pop	{r7, pc}
	...

08003f14 <_ZN5Siren11getInstanceEv>:
	SIREN_INTERMITTENT_MODE,
	SIREN_LOG_SIZE
};

// Retourne le singleton
Siren& Siren::getInstance() {
 8003f14:	b580      	push	{r7, lr}
 8003f16:	af00      	add	r7, sp, #0
    static Siren instance;
    return instance;
 8003f18:	4b01      	ldr	r3, [pc, #4]	; (8003f20 <_ZN5Siren11getInstanceEv+0xc>)
}
 8003f1a:	0018      	movs	r0, r3
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	200003d8 	.word	0x200003d8

08003f24 <_ZN5Siren4initER3Log>:

// Injection de dépendances
void Siren::init(Log& logInstance) {
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
    myLog = &logInstance;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	683a      	ldr	r2, [r7, #0]
 8003f32:	601a      	str	r2, [r3, #0]
	playing = false;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	711a      	strb	r2, [r3, #4]
	age = 0;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	715a      	strb	r2, [r3, #5]
}
 8003f40:	46c0      	nop			; (mov r8, r8)
 8003f42:	46bd      	mov	sp, r7
 8003f44:	b002      	add	sp, #8
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <_ZN5Siren11handleStartEv>:

// Routine de démarrage de la sirène
void Siren::handleStart() {
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
	// Première sonnerie
	if (myLog->isLastEntryEmpty() && !playing) {
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	0018      	movs	r0, r3
 8003f56:	f7ff fd92 	bl	8003a7e <_ZNK3Log16isLastEntryEmptyEv>
 8003f5a:	1e03      	subs	r3, r0, #0
 8003f5c:	d008      	beq.n	8003f70 <_ZN5Siren11handleStartEv+0x28>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	791b      	ldrb	r3, [r3, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	4053      	eors	r3, r2
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d001      	beq.n	8003f70 <_ZN5Siren11handleStartEv+0x28>
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e000      	b.n	8003f72 <_ZN5Siren11handleStartEv+0x2a>
 8003f70:	2300      	movs	r3, #0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d009      	beq.n	8003f8a <_ZN5Siren11handleStartEv+0x42>
		// Première sonnerie
		ringStartTimestamp = getTimestamp();
 8003f76:	f7ff fed3 	bl	8003d20 <_Z12getTimestampv>
 8003f7a:	0002      	movs	r2, r0
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	609a      	str	r2, [r3, #8]
		start();
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	0018      	movs	r0, r3
 8003f84:	f000 f878 	bl	8004078 <_ZN5Siren5startEv>
			}
			start();
			setError(errorSirenHasBeenPlayingForTooLong, false);
		}
	}
}
 8003f88:	e035      	b.n	8003ff6 <_ZN5Siren11handleStartEv+0xae>
		if (myLog->hasRungMoreThan(SIREN_DURATION_MAX)) {
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a1c      	ldr	r2, [pc, #112]	; (8004000 <_ZN5Siren11handleStartEv+0xb8>)
 8003f90:	0011      	movs	r1, r2
 8003f92:	0018      	movs	r0, r3
 8003f94:	f7ff fd9b 	bl	8003ace <_ZNK3Log15hasRungMoreThanEm>
 8003f98:	1e03      	subs	r3, r0, #0
 8003f9a:	d006      	beq.n	8003faa <_ZN5Siren11handleStartEv+0x62>
			setError(errorSirenHasBeenPlayingForTooLong, true);
 8003f9c:	2380      	movs	r3, #128	; 0x80
 8003f9e:	015b      	lsls	r3, r3, #5
 8003fa0:	2101      	movs	r1, #1
 8003fa2:	0018      	movs	r0, r3
 8003fa4:	f000 fabc 	bl	8004520 <_Z8setError5Errorb>
}
 8003fa8:	e025      	b.n	8003ff6 <_ZN5Siren11handleStartEv+0xae>
		else if (myLog->hasRungMoreThanXinX(SIREN_DURATION_MAX_IN_DURATION_REF, SIREN_DURATION_REF)) {
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a15      	ldr	r2, [pc, #84]	; (8004004 <_ZN5Siren11handleStartEv+0xbc>)
 8003fb0:	4913      	ldr	r1, [pc, #76]	; (8004000 <_ZN5Siren11handleStartEv+0xb8>)
 8003fb2:	0018      	movs	r0, r3
 8003fb4:	f7ff fde9 	bl	8003b8a <_ZNK3Log19hasRungMoreThanXinXEmm>
 8003fb8:	1e03      	subs	r3, r0, #0
 8003fba:	d006      	beq.n	8003fca <_ZN5Siren11handleStartEv+0x82>
			setError(errorSirenHasBeenPlayingForTooLong, true);
 8003fbc:	2380      	movs	r3, #128	; 0x80
 8003fbe:	015b      	lsls	r3, r3, #5
 8003fc0:	2101      	movs	r1, #1
 8003fc2:	0018      	movs	r0, r3
 8003fc4:	f000 faac 	bl	8004520 <_Z8setError5Errorb>
}
 8003fc8:	e015      	b.n	8003ff6 <_ZN5Siren11handleStartEv+0xae>
			if (!playing) {
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	791b      	ldrb	r3, [r3, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	4053      	eors	r3, r2
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d004      	beq.n	8003fe2 <_ZN5Siren11handleStartEv+0x9a>
				ringStartTimestamp = getTimestamp();
 8003fd8:	f7ff fea2 	bl	8003d20 <_Z12getTimestampv>
 8003fdc:	0002      	movs	r2, r0
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	609a      	str	r2, [r3, #8]
			start();
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	0018      	movs	r0, r3
 8003fe6:	f000 f847 	bl	8004078 <_ZN5Siren5startEv>
			setError(errorSirenHasBeenPlayingForTooLong, false);
 8003fea:	2380      	movs	r3, #128	; 0x80
 8003fec:	015b      	lsls	r3, r3, #5
 8003fee:	2100      	movs	r1, #0
 8003ff0:	0018      	movs	r0, r3
 8003ff2:	f000 fa95 	bl	8004520 <_Z8setError5Errorb>
}
 8003ff6:	46c0      	nop			; (mov r8, r8)
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	b002      	add	sp, #8
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	46c0      	nop			; (mov r8, r8)
 8004000:	000493e0 	.word	0x000493e0
 8004004:	001b7740 	.word	0x001b7740

08004008 <_ZN5Siren10handleStopEv>:

// Routine d'exctinction de la sirène hors interruption
void Siren::handleStop() {
 8004008:	b590      	push	{r4, r7, lr}
 800400a:	b085      	sub	sp, #20
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
	if (playing) {
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	791b      	ldrb	r3, [r3, #4]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d028      	beq.n	800406a <_ZN5Siren10handleStopEv+0x62>
		// Duréee minimale buzzer = age*(1/freq) = 100*10ms = 1s
		if (age > 100) {
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	795b      	ldrb	r3, [r3, #5]
 800401c:	2b64      	cmp	r3, #100	; 0x64
 800401e:	d91e      	bls.n	800405e <_ZN5Siren10handleStopEv+0x56>
			// Stop
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8004020:	2380      	movs	r3, #128	; 0x80
 8004022:	005b      	lsls	r3, r3, #1
 8004024:	4813      	ldr	r0, [pc, #76]	; (8004074 <_ZN5Siren10handleStopEv+0x6c>)
 8004026:	2200      	movs	r2, #0
 8004028:	0019      	movs	r1, r3
 800402a:	f001 facc 	bl	80055c6 <HAL_GPIO_WritePin>
			playing = false;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	711a      	strb	r2, [r3, #4]
			age = 0;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	715a      	strb	r2, [r3, #5]

			// Ajouter le log actuel
			LogEntry entry;
			entry.startTimestamp = ringStartTimestamp;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	689a      	ldr	r2, [r3, #8]
 800403e:	2408      	movs	r4, #8
 8004040:	193b      	adds	r3, r7, r4
 8004042:	601a      	str	r2, [r3, #0]
			entry.stopTimestamp = getTimestamp();
 8004044:	f7ff fe6c 	bl	8003d20 <_Z12getTimestampv>
 8004048:	0002      	movs	r2, r0
 800404a:	0021      	movs	r1, r4
 800404c:	187b      	adds	r3, r7, r1
 800404e:	605a      	str	r2, [r3, #4]
			myLog->addEntry(entry);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6818      	ldr	r0, [r3, #0]
 8004054:	187b      	adds	r3, r7, r1
 8004056:	6819      	ldr	r1, [r3, #0]
 8004058:	685a      	ldr	r2, [r3, #4]
 800405a:	f7ff fcc3 	bl	80039e4 <_ZN3Log8addEntryE8LogEntry>
		}
		age++;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	795b      	ldrb	r3, [r3, #5]
 8004062:	3301      	adds	r3, #1
 8004064:	b2da      	uxtb	r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	715a      	strb	r2, [r3, #5]
	}
}
 800406a:	46c0      	nop			; (mov r8, r8)
 800406c:	46bd      	mov	sp, r7
 800406e:	b005      	add	sp, #20
 8004070:	bd90      	pop	{r4, r7, pc}
 8004072:	46c0      	nop			; (mov r8, r8)
 8004074:	50000400 	.word	0x50000400

08004078 <_ZN5Siren5startEv>:
		myLog->addEntry(entry);
	}
}

// Démarrage de la sirène
void Siren::start() {
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8004080:	2380      	movs	r3, #128	; 0x80
 8004082:	005b      	lsls	r3, r3, #1
 8004084:	4807      	ldr	r0, [pc, #28]	; (80040a4 <_ZN5Siren5startEv+0x2c>)
 8004086:	2201      	movs	r2, #1
 8004088:	0019      	movs	r1, r3
 800408a:	f001 fa9c 	bl	80055c6 <HAL_GPIO_WritePin>
	playing = true;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2201      	movs	r2, #1
 8004092:	711a      	strb	r2, [r3, #4]
	age=0;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	715a      	strb	r2, [r3, #5]
}
 800409a:	46c0      	nop			; (mov r8, r8)
 800409c:	46bd      	mov	sp, r7
 800409e:	b002      	add	sp, #8
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	46c0      	nop			; (mov r8, r8)
 80040a4:	50000400 	.word	0x50000400

080040a8 <HAL_TIM_PeriodElapsedCallback>:
bool hist_hot[hist_n];
bool hist_blk[hist_n];

// Timer principal @100Hz
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b096      	sub	sp, #88	; 0x58
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
	if (htim == &htim3) {
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	4b92      	ldr	r3, [pc, #584]	; (80042fc <HAL_TIM_PeriodElapsedCallback+0x254>)
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d000      	beq.n	80040ba <HAL_TIM_PeriodElapsedCallback+0x12>
 80040b8:	e11c      	b.n	80042f4 <HAL_TIM_PeriodElapsedCallback+0x24c>
		/* PB CEM */
		// 1. hot front montant => blinker front montant
		// 2. blinker front montant => blinker front descendant
		// 3. detect => hot front montant

		n++; // NOTE: incrémenter n plus lentement si freq trop grande
 80040ba:	4b91      	ldr	r3, [pc, #580]	; (8004300 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	b25b      	sxtb	r3, r3
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	3301      	adds	r3, #1
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	b25a      	sxtb	r2, r3
 80040c8:	4b8d      	ldr	r3, [pc, #564]	; (8004300 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80040ca:	701a      	strb	r2, [r3, #0]

		// Solution PB CEM : Obtenir hot & blk fiables
		if (n>hist_n) {
 80040cc:	4b8c      	ldr	r3, [pc, #560]	; (8004300 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	b25b      	sxtb	r3, r3
 80040d2:	2b05      	cmp	r3, #5
 80040d4:	dc00      	bgt.n	80040d8 <HAL_TIM_PeriodElapsedCallback+0x30>
 80040d6:	e0aa      	b.n	800422e <HAL_TIM_PeriodElapsedCallback+0x186>
			n=0;
 80040d8:	4b89      	ldr	r3, [pc, #548]	; (8004300 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80040da:	2200      	movs	r2, #0
 80040dc:	701a      	strb	r2, [r3, #0]
			
			// Check si 5 derniers hot sont false
			bool every_hot = true;
 80040de:	2357      	movs	r3, #87	; 0x57
 80040e0:	18fb      	adds	r3, r7, r3
 80040e2:	2201      	movs	r2, #1
 80040e4:	701a      	strb	r2, [r3, #0]
			for (bool elem : hist_hot) {
 80040e6:	4b87      	ldr	r3, [pc, #540]	; (8004304 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80040e8:	637b      	str	r3, [r7, #52]	; 0x34
 80040ea:	4b86      	ldr	r3, [pc, #536]	; (8004304 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80040ec:	653b      	str	r3, [r7, #80]	; 0x50
 80040ee:	4b86      	ldr	r3, [pc, #536]	; (8004308 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80040f0:	633b      	str	r3, [r7, #48]	; 0x30
 80040f2:	e010      	b.n	8004116 <HAL_TIM_PeriodElapsedCallback+0x6e>
 80040f4:	212f      	movs	r1, #47	; 0x2f
 80040f6:	187b      	adds	r3, r7, r1
 80040f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80040fa:	7812      	ldrb	r2, [r2, #0]
 80040fc:	701a      	strb	r2, [r3, #0]
				if (elem) {
 80040fe:	187b      	adds	r3, r7, r1
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d004      	beq.n	8004110 <HAL_TIM_PeriodElapsedCallback+0x68>
					every_hot = false;
 8004106:	2357      	movs	r3, #87	; 0x57
 8004108:	18fb      	adds	r3, r7, r3
 800410a:	2200      	movs	r2, #0
 800410c:	701a      	strb	r2, [r3, #0]
					break;
 800410e:	e006      	b.n	800411e <HAL_TIM_PeriodElapsedCallback+0x76>
			for (bool elem : hist_hot) {
 8004110:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004112:	3301      	adds	r3, #1
 8004114:	653b      	str	r3, [r7, #80]	; 0x50
 8004116:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800411a:	429a      	cmp	r2, r3
 800411c:	d1ea      	bne.n	80040f4 <HAL_TIM_PeriodElapsedCallback+0x4c>
				}
			}
			if (every_hot) {
 800411e:	2357      	movs	r3, #87	; 0x57
 8004120:	18fb      	adds	r3, r7, r3
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d003      	beq.n	8004130 <HAL_TIM_PeriodElapsedCallback+0x88>
				hot = false;
 8004128:	4b78      	ldr	r3, [pc, #480]	; (800430c <HAL_TIM_PeriodElapsedCallback+0x264>)
 800412a:	2200      	movs	r2, #0
 800412c:	701a      	strb	r2, [r3, #0]
 800412e:	e02a      	b.n	8004186 <HAL_TIM_PeriodElapsedCallback+0xde>
			} else {
				// Check si 5 derniers hot sont vrais
				bool every_hot = true;
 8004130:	234f      	movs	r3, #79	; 0x4f
 8004132:	18fb      	adds	r3, r7, r3
 8004134:	2201      	movs	r2, #1
 8004136:	701a      	strb	r2, [r3, #0]
				for (bool elem : hist_hot) {
 8004138:	4b72      	ldr	r3, [pc, #456]	; (8004304 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800413a:	62bb      	str	r3, [r7, #40]	; 0x28
 800413c:	4b71      	ldr	r3, [pc, #452]	; (8004304 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800413e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004140:	4b71      	ldr	r3, [pc, #452]	; (8004308 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8004142:	627b      	str	r3, [r7, #36]	; 0x24
 8004144:	e013      	b.n	800416e <HAL_TIM_PeriodElapsedCallback+0xc6>
 8004146:	2123      	movs	r1, #35	; 0x23
 8004148:	187b      	adds	r3, r7, r1
 800414a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800414c:	7812      	ldrb	r2, [r2, #0]
 800414e:	701a      	strb	r2, [r3, #0]
					if (!elem) {
 8004150:	187b      	adds	r3, r7, r1
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	2201      	movs	r2, #1
 8004156:	4053      	eors	r3, r2
 8004158:	b2db      	uxtb	r3, r3
 800415a:	2b00      	cmp	r3, #0
 800415c:	d004      	beq.n	8004168 <HAL_TIM_PeriodElapsedCallback+0xc0>
						every_hot = false;
 800415e:	234f      	movs	r3, #79	; 0x4f
 8004160:	18fb      	adds	r3, r7, r3
 8004162:	2200      	movs	r2, #0
 8004164:	701a      	strb	r2, [r3, #0]
						break;
 8004166:	e006      	b.n	8004176 <HAL_TIM_PeriodElapsedCallback+0xce>
				for (bool elem : hist_hot) {
 8004168:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800416a:	3301      	adds	r3, #1
 800416c:	64bb      	str	r3, [r7, #72]	; 0x48
 800416e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004172:	429a      	cmp	r2, r3
 8004174:	d1e7      	bne.n	8004146 <HAL_TIM_PeriodElapsedCallback+0x9e>
					}
				}
				if (every_hot) {
 8004176:	234f      	movs	r3, #79	; 0x4f
 8004178:	18fb      	adds	r3, r7, r3
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d002      	beq.n	8004186 <HAL_TIM_PeriodElapsedCallback+0xde>
					hot = true;
 8004180:	4b62      	ldr	r3, [pc, #392]	; (800430c <HAL_TIM_PeriodElapsedCallback+0x264>)
 8004182:	2201      	movs	r2, #1
 8004184:	701a      	strb	r2, [r3, #0]
				}
			}

			// Check si 5 derniers blk sont false
			bool every_blk = true;
 8004186:	2347      	movs	r3, #71	; 0x47
 8004188:	18fb      	adds	r3, r7, r3
 800418a:	2201      	movs	r2, #1
 800418c:	701a      	strb	r2, [r3, #0]
			for (bool elem : hist_blk) {
 800418e:	4b60      	ldr	r3, [pc, #384]	; (8004310 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8004190:	61fb      	str	r3, [r7, #28]
 8004192:	4b5f      	ldr	r3, [pc, #380]	; (8004310 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8004194:	643b      	str	r3, [r7, #64]	; 0x40
 8004196:	4b5f      	ldr	r3, [pc, #380]	; (8004314 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8004198:	61bb      	str	r3, [r7, #24]
 800419a:	e010      	b.n	80041be <HAL_TIM_PeriodElapsedCallback+0x116>
 800419c:	2117      	movs	r1, #23
 800419e:	187b      	adds	r3, r7, r1
 80041a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80041a2:	7812      	ldrb	r2, [r2, #0]
 80041a4:	701a      	strb	r2, [r3, #0]
				if (elem) {
 80041a6:	187b      	adds	r3, r7, r1
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d004      	beq.n	80041b8 <HAL_TIM_PeriodElapsedCallback+0x110>
					every_blk = false;
 80041ae:	2347      	movs	r3, #71	; 0x47
 80041b0:	18fb      	adds	r3, r7, r3
 80041b2:	2200      	movs	r2, #0
 80041b4:	701a      	strb	r2, [r3, #0]
					break;
 80041b6:	e006      	b.n	80041c6 <HAL_TIM_PeriodElapsedCallback+0x11e>
			for (bool elem : hist_blk) {
 80041b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041ba:	3301      	adds	r3, #1
 80041bc:	643b      	str	r3, [r7, #64]	; 0x40
 80041be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d1ea      	bne.n	800419c <HAL_TIM_PeriodElapsedCallback+0xf4>
				}
			}
			if (every_blk) {
 80041c6:	2347      	movs	r3, #71	; 0x47
 80041c8:	18fb      	adds	r3, r7, r3
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d003      	beq.n	80041d8 <HAL_TIM_PeriodElapsedCallback+0x130>
				blk = false;
 80041d0:	4b51      	ldr	r3, [pc, #324]	; (8004318 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80041d2:	2200      	movs	r2, #0
 80041d4:	701a      	strb	r2, [r3, #0]
 80041d6:	e02a      	b.n	800422e <HAL_TIM_PeriodElapsedCallback+0x186>
			} else {
				// Check si 5 derniers blk sont vrais
				bool every_blk = true;
 80041d8:	233f      	movs	r3, #63	; 0x3f
 80041da:	18fb      	adds	r3, r7, r3
 80041dc:	2201      	movs	r2, #1
 80041de:	701a      	strb	r2, [r3, #0]
				for (bool elem : hist_blk) {
 80041e0:	4b4b      	ldr	r3, [pc, #300]	; (8004310 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80041e2:	613b      	str	r3, [r7, #16]
 80041e4:	4b4a      	ldr	r3, [pc, #296]	; (8004310 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80041e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80041e8:	4b4a      	ldr	r3, [pc, #296]	; (8004314 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80041ea:	60fb      	str	r3, [r7, #12]
 80041ec:	e013      	b.n	8004216 <HAL_TIM_PeriodElapsedCallback+0x16e>
 80041ee:	210b      	movs	r1, #11
 80041f0:	187b      	adds	r3, r7, r1
 80041f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80041f4:	7812      	ldrb	r2, [r2, #0]
 80041f6:	701a      	strb	r2, [r3, #0]
					if (!elem) {
 80041f8:	187b      	adds	r3, r7, r1
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	2201      	movs	r2, #1
 80041fe:	4053      	eors	r3, r2
 8004200:	b2db      	uxtb	r3, r3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d004      	beq.n	8004210 <HAL_TIM_PeriodElapsedCallback+0x168>
						every_blk = false;
 8004206:	233f      	movs	r3, #63	; 0x3f
 8004208:	18fb      	adds	r3, r7, r3
 800420a:	2200      	movs	r2, #0
 800420c:	701a      	strb	r2, [r3, #0]
						break;
 800420e:	e006      	b.n	800421e <HAL_TIM_PeriodElapsedCallback+0x176>
				for (bool elem : hist_blk) {
 8004210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004212:	3301      	adds	r3, #1
 8004214:	63bb      	str	r3, [r7, #56]	; 0x38
 8004216:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	429a      	cmp	r2, r3
 800421c:	d1e7      	bne.n	80041ee <HAL_TIM_PeriodElapsedCallback+0x146>
					}
				}
				if (every_blk) {
 800421e:	233f      	movs	r3, #63	; 0x3f
 8004220:	18fb      	adds	r3, r7, r3
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d002      	beq.n	800422e <HAL_TIM_PeriodElapsedCallback+0x186>
					blk = true;
 8004228:	4b3b      	ldr	r3, [pc, #236]	; (8004318 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800422a:	2201      	movs	r2, #1
 800422c:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		// Contournement CEM 3.
		hist_hot[n] = (HAL_GPIO_ReadPin(ACC_GPIO_Port, ACC_Pin) == GPIO_PIN_SET);
 800422e:	23a0      	movs	r3, #160	; 0xa0
 8004230:	05db      	lsls	r3, r3, #23
 8004232:	2101      	movs	r1, #1
 8004234:	0018      	movs	r0, r3
 8004236:	f001 f9a9 	bl	800558c <HAL_GPIO_ReadPin>
 800423a:	0003      	movs	r3, r0
 800423c:	0019      	movs	r1, r3
 800423e:	4b30      	ldr	r3, [pc, #192]	; (8004300 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	b25b      	sxtb	r3, r3
 8004244:	001a      	movs	r2, r3
 8004246:	1e4b      	subs	r3, r1, #1
 8004248:	4259      	negs	r1, r3
 800424a:	414b      	adcs	r3, r1
 800424c:	b2d9      	uxtb	r1, r3
 800424e:	4b2d      	ldr	r3, [pc, #180]	; (8004304 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8004250:	5499      	strb	r1, [r3, r2]
		hist_blk[n] = (HAL_GPIO_ReadPin(BLK_GPIO_Port, BLK_Pin) == GPIO_PIN_SET);
 8004252:	23a0      	movs	r3, #160	; 0xa0
 8004254:	05db      	lsls	r3, r3, #23
 8004256:	2102      	movs	r1, #2
 8004258:	0018      	movs	r0, r3
 800425a:	f001 f997 	bl	800558c <HAL_GPIO_ReadPin>
 800425e:	0003      	movs	r3, r0
 8004260:	0019      	movs	r1, r3
 8004262:	4b27      	ldr	r3, [pc, #156]	; (8004300 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	b25b      	sxtb	r3, r3
 8004268:	001a      	movs	r2, r3
 800426a:	1e4b      	subs	r3, r1, #1
 800426c:	4259      	negs	r1, r3
 800426e:	414b      	adcs	r3, r1
 8004270:	b2d9      	uxtb	r1, r3
 8004272:	4b27      	ldr	r3, [pc, #156]	; (8004310 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8004274:	5499      	strb	r1, [r3, r2]

		if (blk) {
 8004276:	4b28      	ldr	r3, [pc, #160]	; (8004318 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d020      	beq.n	80042c0 <HAL_TIM_PeriodElapsedCallback+0x218>
			firstStart = false;
 800427e:	4b27      	ldr	r3, [pc, #156]	; (800431c <HAL_TIM_PeriodElapsedCallback+0x274>)
 8004280:	2200      	movs	r2, #0
 8004282:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8004284:	2380      	movs	r3, #128	; 0x80
 8004286:	005b      	lsls	r3, r3, #1
 8004288:	4825      	ldr	r0, [pc, #148]	; (8004320 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800428a:	2200      	movs	r2, #0
 800428c:	0019      	movs	r1, r3
 800428e:	f001 f99a 	bl	80055c6 <HAL_GPIO_WritePin>

			HAL_TIM_Base_Stop_IT(&htim3);
 8004292:	4b1a      	ldr	r3, [pc, #104]	; (80042fc <HAL_TIM_PeriodElapsedCallback+0x254>)
 8004294:	0018      	movs	r0, r3
 8004296:	f003 fae7 	bl	8007868 <HAL_TIM_Base_Stop_IT>
			AccelOUT.calibrate();
 800429a:	4b22      	ldr	r3, [pc, #136]	; (8004324 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800429c:	0018      	movs	r0, r3
 800429e:	f7ff fa11 	bl	80036c4 <_ZN5Accel9calibrateEv>
			HAL_TIM_Base_Start_IT(&htim3);
 80042a2:	4b16      	ldr	r3, [pc, #88]	; (80042fc <HAL_TIM_PeriodElapsedCallback+0x254>)
 80042a4:	0018      	movs	r0, r3
 80042a6:	f003 fa91 	bl	80077cc <HAL_TIM_Base_Start_IT>

			if (!hot) {
 80042aa:	4b18      	ldr	r3, [pc, #96]	; (800430c <HAL_TIM_PeriodElapsedCallback+0x264>)
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	2201      	movs	r2, #1
 80042b2:	4053      	eors	r3, r2
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d002      	beq.n	80042c0 <HAL_TIM_PeriodElapsedCallback+0x218>
				detectOn = true;
 80042ba:	4b1b      	ldr	r3, [pc, #108]	; (8004328 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80042bc:	2201      	movs	r2, #1
 80042be:	701a      	strb	r2, [r3, #0]
			}
		}

		if (hot) {
 80042c0:	4b12      	ldr	r3, [pc, #72]	; (800430c <HAL_TIM_PeriodElapsedCallback+0x264>)
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d009      	beq.n	80042de <HAL_TIM_PeriodElapsedCallback+0x236>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80042ca:	2380      	movs	r3, #128	; 0x80
 80042cc:	005b      	lsls	r3, r3, #1
 80042ce:	4814      	ldr	r0, [pc, #80]	; (8004320 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80042d0:	2200      	movs	r2, #0
 80042d2:	0019      	movs	r1, r3
 80042d4:	f001 f977 	bl	80055c6 <HAL_GPIO_WritePin>
	    	detectOn = false;
 80042d8:	4b13      	ldr	r3, [pc, #76]	; (8004328 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80042da:	2200      	movs	r2, #0
 80042dc:	701a      	strb	r2, [r3, #0]
		}

		if (detectOn) {
 80042de:	4b12      	ldr	r3, [pc, #72]	; (8004328 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d006      	beq.n	80042f4 <HAL_TIM_PeriodElapsedCallback+0x24c>
			AccelOUT.detectAbnormal(mySiren);
 80042e6:	4b11      	ldr	r3, [pc, #68]	; (800432c <HAL_TIM_PeriodElapsedCallback+0x284>)
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	4b0e      	ldr	r3, [pc, #56]	; (8004324 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80042ec:	0011      	movs	r1, r2
 80042ee:	0018      	movs	r0, r3
 80042f0:	f7ff f8da 	bl	80034a8 <_ZN5Accel14detectAbnormalER5Siren>
		}
	}
}
 80042f4:	46c0      	nop			; (mov r8, r8)
 80042f6:	46bd      	mov	sp, r7
 80042f8:	b016      	add	sp, #88	; 0x58
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	2000059c 	.word	0x2000059c
 8004300:	200004b3 	.word	0x200004b3
 8004304:	200004b4 	.word	0x200004b4
 8004308:	200004b9 	.word	0x200004b9
 800430c:	200004b0 	.word	0x200004b0
 8004310:	200004bc 	.word	0x200004bc
 8004314:	200004c1 	.word	0x200004c1
 8004318:	200004b1 	.word	0x200004b1
 800431c:	20000018 	.word	0x20000018
 8004320:	50000400 	.word	0x50000400
 8004324:	20000450 	.word	0x20000450
 8004328:	200004b2 	.word	0x200004b2
 800432c:	200003e8 	.word	0x200003e8

08004330 <HAL_GPIO_EXTI_Rising_Callback>:

// Callback pour ACC et BLK
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	0002      	movs	r2, r0
 8004338:	1dbb      	adds	r3, r7, #6
 800433a:	801a      	strh	r2, [r3, #0]
//    	blinkerInterruptFlag = false;
//    	calibrating = false;
//
//		countHot++;
//	}
}
 800433c:	46c0      	nop			; (mov r8, r8)
 800433e:	46bd      	mov	sp, r7
 8004340:	b002      	add	sp, #8
 8004342:	bd80      	pop	{r7, pc}

08004344 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	0002      	movs	r2, r0
 800434c:	1dbb      	adds	r3, r7, #6
 800434e:	801a      	strh	r2, [r3, #0]
//    if (GPIO_Pin == ACC_Pin) {
    	// Véhicule s'éteint
//    	hot = false;
//    	mySiren.handleStopInterrupt();
//    }
}
 8004350:	46c0      	nop			; (mov r8, r8)
 8004352:	46bd      	mov	sp, r7
 8004354:	b002      	add	sp, #8
 8004356:	bd80      	pop	{r7, pc}

08004358 <_Z26disableHotBlinkerInterruptv>:

// Disable interrupt
void disableHotBlinkerInterrupt() {
 8004358:	b580      	push	{r7, lr}
 800435a:	af00      	add	r7, sp, #0
    HAL_NVIC_ClearPendingIRQ(EXTI0_1_IRQn);
 800435c:	2005      	movs	r0, #5
 800435e:	f000 ffa1 	bl	80052a4 <HAL_NVIC_ClearPendingIRQ>
    HAL_NVIC_DisableIRQ(EXTI0_1_IRQn);
 8004362:	2005      	movs	r0, #5
 8004364:	f000 ff81 	bl	800526a <HAL_NVIC_DisableIRQ>
}
 8004368:	46c0      	nop			; (mov r8, r8)
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
	...

08004370 <alt_main>:
void enableHotBlinkerInterrupt() {
    HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
}

int alt_main()
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b084      	sub	sp, #16
 8004374:	af00      	add	r7, sp, #0
	disableHotBlinkerInterrupt();
 8004376:	f7ff ffef 	bl	8004358 <_Z26disableHotBlinkerInterruptv>

	// Initialisation blk & hot
	if (HAL_GPIO_ReadPin(ACC_GPIO_Port, ACC_Pin) == GPIO_PIN_SET) {
 800437a:	23a0      	movs	r3, #160	; 0xa0
 800437c:	05db      	lsls	r3, r3, #23
 800437e:	2101      	movs	r1, #1
 8004380:	0018      	movs	r0, r3
 8004382:	f001 f903 	bl	800558c <HAL_GPIO_ReadPin>
 8004386:	0003      	movs	r3, r0
 8004388:	3b01      	subs	r3, #1
 800438a:	425a      	negs	r2, r3
 800438c:	4153      	adcs	r3, r2
 800438e:	b2db      	uxtb	r3, r3
 8004390:	2b00      	cmp	r3, #0
 8004392:	d011      	beq.n	80043b8 <alt_main+0x48>
		hot = true;
 8004394:	4b26      	ldr	r3, [pc, #152]	; (8004430 <alt_main+0xc0>)
 8004396:	2201      	movs	r2, #1
 8004398:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < hist_n; ++i) {
 800439a:	2300      	movs	r3, #0
 800439c:	60fb      	str	r3, [r7, #12]
 800439e:	e007      	b.n	80043b0 <alt_main+0x40>
        	hist_hot[i] = true;
 80043a0:	4a24      	ldr	r2, [pc, #144]	; (8004434 <alt_main+0xc4>)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	18d3      	adds	r3, r2, r3
 80043a6:	2201      	movs	r2, #1
 80043a8:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < hist_n; ++i) {
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	3301      	adds	r3, #1
 80043ae:	60fb      	str	r3, [r7, #12]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2b04      	cmp	r3, #4
 80043b4:	ddf4      	ble.n	80043a0 <alt_main+0x30>
 80043b6:	e010      	b.n	80043da <alt_main+0x6a>
    	}
	} else {
		hot = false;
 80043b8:	4b1d      	ldr	r3, [pc, #116]	; (8004430 <alt_main+0xc0>)
 80043ba:	2200      	movs	r2, #0
 80043bc:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < hist_n; ++i) {
 80043be:	2300      	movs	r3, #0
 80043c0:	60bb      	str	r3, [r7, #8]
 80043c2:	e007      	b.n	80043d4 <alt_main+0x64>
        	hist_hot[i] = false;
 80043c4:	4a1b      	ldr	r2, [pc, #108]	; (8004434 <alt_main+0xc4>)
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	18d3      	adds	r3, r2, r3
 80043ca:	2200      	movs	r2, #0
 80043cc:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < hist_n; ++i) {
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	3301      	adds	r3, #1
 80043d2:	60bb      	str	r3, [r7, #8]
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	2b04      	cmp	r3, #4
 80043d8:	ddf4      	ble.n	80043c4 <alt_main+0x54>
    	}
	}
	for (int i = 0; i < hist_n; ++i) {
 80043da:	2300      	movs	r3, #0
 80043dc:	607b      	str	r3, [r7, #4]
 80043de:	e007      	b.n	80043f0 <alt_main+0x80>
		hist_blk[i] = false;
 80043e0:	4a15      	ldr	r2, [pc, #84]	; (8004438 <alt_main+0xc8>)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	18d3      	adds	r3, r2, r3
 80043e6:	2200      	movs	r2, #0
 80043e8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < hist_n; ++i) {
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	3301      	adds	r3, #1
 80043ee:	607b      	str	r3, [r7, #4]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2b04      	cmp	r3, #4
 80043f4:	ddf4      	ble.n	80043e0 <alt_main+0x70>

	// ***POUR LES TESTS***
	//	blinkerInterruptFlag = true;
	//	hot = false;

	firstStart = true;
 80043f6:	4b11      	ldr	r3, [pc, #68]	; (800443c <alt_main+0xcc>)
 80043f8:	2201      	movs	r2, #1
 80043fa:	701a      	strb	r2, [r3, #0]

	myLog.init();
 80043fc:	4b10      	ldr	r3, [pc, #64]	; (8004440 <alt_main+0xd0>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	0018      	movs	r0, r3
 8004402:	f7ff fb10 	bl	8003a26 <_ZN3Log4initEv>
	mySiren.init(myLog);
 8004406:	4b0f      	ldr	r3, [pc, #60]	; (8004444 <alt_main+0xd4>)
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	4b0d      	ldr	r3, [pc, #52]	; (8004440 <alt_main+0xd0>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	0019      	movs	r1, r3
 8004410:	0010      	movs	r0, r2
 8004412:	f7ff fd87 	bl	8003f24 <_ZN5Siren4initER3Log>

	// Accel init
	AccelOUT.init();
 8004416:	4b0c      	ldr	r3, [pc, #48]	; (8004448 <alt_main+0xd8>)
 8004418:	0018      	movs	r0, r3
 800441a:	f7fe fe2d 	bl	8003078 <_ZN5Accel4initEv>
	AccelOUT.calibrate();
 800441e:	4b0a      	ldr	r3, [pc, #40]	; (8004448 <alt_main+0xd8>)
 8004420:	0018      	movs	r0, r3
 8004422:	f7ff f94f 	bl	80036c4 <_ZN5Accel9calibrateEv>

	// Démarrage du timer principal
	HAL_TIM_Base_Start_IT(&htim3);
 8004426:	4b09      	ldr	r3, [pc, #36]	; (800444c <alt_main+0xdc>)
 8004428:	0018      	movs	r0, r3
 800442a:	f003 f9cf 	bl	80077cc <HAL_TIM_Base_Start_IT>

	while(1) {
 800442e:	e7fe      	b.n	800442e <alt_main+0xbe>
 8004430:	200004b0 	.word	0x200004b0
 8004434:	200004b4 	.word	0x200004b4
 8004438:	200004bc 	.word	0x200004bc
 800443c:	20000018 	.word	0x20000018
 8004440:	200003e4 	.word	0x200003e4
 8004444:	200003e8 	.word	0x200003e8
 8004448:	20000450 	.word	0x20000450
 800444c:	2000059c 	.word	0x2000059c

08004450 <_Z41__static_initialization_and_destruction_0ii>:
//		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
	}
	return 0;
}
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2b01      	cmp	r3, #1
 800445e:	d119      	bne.n	8004494 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	4a0e      	ldr	r2, [pc, #56]	; (800449c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d115      	bne.n	8004494 <_Z41__static_initialization_and_destruction_0ii+0x44>
Log& myLog = Log::getInstance();
 8004468:	f7ff fa9a 	bl	80039a0 <_ZN3Log11getInstanceEv>
 800446c:	0002      	movs	r2, r0
 800446e:	4b0c      	ldr	r3, [pc, #48]	; (80044a0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8004470:	601a      	str	r2, [r3, #0]
Siren& mySiren = Siren::getInstance();
 8004472:	f7ff fd4f 	bl	8003f14 <_ZN5Siren11getInstanceEv>
 8004476:	0002      	movs	r2, r0
 8004478:	4b0a      	ldr	r3, [pc, #40]	; (80044a4 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800447a:	601a      	str	r2, [r3, #0]
Accel AccelIN(ACCEL_IN_I2C, ACCEL_IN_I2C_ADD);
 800447c:	490a      	ldr	r1, [pc, #40]	; (80044a8 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800447e:	4b0b      	ldr	r3, [pc, #44]	; (80044ac <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8004480:	2233      	movs	r2, #51	; 0x33
 8004482:	0018      	movs	r0, r3
 8004484:	f7fe fde5 	bl	8003052 <_ZN5AccelC1EP19__I2C_HandleTypeDeft>
Accel AccelOUT(ACCEL_OUT_I2C, ACCEL_OUT_I2C_ADD);
 8004488:	4909      	ldr	r1, [pc, #36]	; (80044b0 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800448a:	4b0a      	ldr	r3, [pc, #40]	; (80044b4 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 800448c:	2231      	movs	r2, #49	; 0x31
 800448e:	0018      	movs	r0, r3
 8004490:	f7fe fddf 	bl	8003052 <_ZN5AccelC1EP19__I2C_HandleTypeDeft>
}
 8004494:	46c0      	nop			; (mov r8, r8)
 8004496:	46bd      	mov	sp, r7
 8004498:	b002      	add	sp, #8
 800449a:	bd80      	pop	{r7, pc}
 800449c:	0000ffff 	.word	0x0000ffff
 80044a0:	200003e4 	.word	0x200003e4
 80044a4:	200003e8 	.word	0x200003e8
 80044a8:	200004c8 	.word	0x200004c8
 80044ac:	200003f0 	.word	0x200003f0
 80044b0:	2000051c 	.word	0x2000051c
 80044b4:	20000450 	.word	0x20000450

080044b8 <_GLOBAL__sub_I_myLog>:
 80044b8:	b580      	push	{r7, lr}
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	4b03      	ldr	r3, [pc, #12]	; (80044cc <_GLOBAL__sub_I_myLog+0x14>)
 80044be:	0019      	movs	r1, r3
 80044c0:	2001      	movs	r0, #1
 80044c2:	f7ff ffc5 	bl	8004450 <_Z41__static_initialization_and_destruction_0ii>
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	46c0      	nop			; (mov r8, r8)
 80044cc:	0000ffff 	.word	0x0000ffff

080044d0 <_Z11handleErrorv>:
#include "global.h"         // Paramètres et définitions générales

uint32_t ERROR_CODE = 0;

// Gère l'erreur survenue
void handleError() {
 80044d0:	b580      	push	{r7, lr}
 80044d2:	af00      	add	r7, sp, #0
    // Erreur pour Sigfox
    if (isError(maskSigfox)) {
 80044d4:	201f      	movs	r0, #31
 80044d6:	f000 f811 	bl	80044fc <_Z7isError5Error>
        //sendSigfoxAlert(ERROR_CODE);
    } 

    // Erreur car la sirène a trop sonné
    if (isError(errorSirenHasBeenPlayingForTooLong)) {
 80044da:	2380      	movs	r3, #128	; 0x80
 80044dc:	015b      	lsls	r3, r3, #5
 80044de:	0018      	movs	r0, r3
 80044e0:	f000 f80c 	bl	80044fc <_Z7isError5Error>
 80044e4:	1e03      	subs	r3, r0, #0
 80044e6:	d103      	bne.n	80044f0 <_Z11handleErrorv+0x20>
        //sendSigfoxAlert(ERROR_CODE);
    }
    
    // Erreur pour la Siren
    else if (isError(maskSiren)) {
 80044e8:	4b03      	ldr	r3, [pc, #12]	; (80044f8 <_Z11handleErrorv+0x28>)
 80044ea:	0018      	movs	r0, r3
 80044ec:	f000 f806 	bl	80044fc <_Z7isError5Error>
        //mySiren.handleStart();
        //sendSigfoxAlert(ERROR_CODE);
    }
}
 80044f0:	46c0      	nop			; (mov r8, r8)
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	46c0      	nop			; (mov r8, r8)
 80044f8:	000003ff 	.word	0x000003ff

080044fc <_Z7isError5Error>:

// Détermine s'il y a une erreur correspondant à 'error'
bool isError(Error error) {
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
    return (ERROR_CODE & error);
 8004504:	4b05      	ldr	r3, [pc, #20]	; (800451c <_Z7isError5Error+0x20>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	4013      	ands	r3, r2
 800450c:	1e5a      	subs	r2, r3, #1
 800450e:	4193      	sbcs	r3, r2
 8004510:	b2db      	uxtb	r3, r3
}
 8004512:	0018      	movs	r0, r3
 8004514:	46bd      	mov	sp, r7
 8004516:	b002      	add	sp, #8
 8004518:	bd80      	pop	{r7, pc}
 800451a:	46c0      	nop			; (mov r8, r8)
 800451c:	200004c4 	.word	0x200004c4

08004520 <_Z8setError5Errorb>:

// Actualise le code d'erreur et gère l'erreur si besoin 
void setError(Error error, bool isTrue) {
 8004520:	b580      	push	{r7, lr}
 8004522:	b082      	sub	sp, #8
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	000a      	movs	r2, r1
 800452a:	1cfb      	adds	r3, r7, #3
 800452c:	701a      	strb	r2, [r3, #0]
    if (isTrue) {
 800452e:	1cfb      	adds	r3, r7, #3
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d008      	beq.n	8004548 <_Z8setError5Errorb+0x28>
        ERROR_CODE |= static_cast<uint32_t>(error); // bit correspondant à erreur e mis à 1 ("OU" avec le mask)
 8004536:	4b0a      	ldr	r3, [pc, #40]	; (8004560 <_Z8setError5Errorb+0x40>)
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	431a      	orrs	r2, r3
 800453e:	4b08      	ldr	r3, [pc, #32]	; (8004560 <_Z8setError5Errorb+0x40>)
 8004540:	601a      	str	r2, [r3, #0]
        handleError();
 8004542:	f7ff ffc5 	bl	80044d0 <_Z11handleErrorv>
    } else {
        ERROR_CODE &= ~static_cast<uint32_t>(error); // bit correspondant à erreur e mis à 0 ("ET" avec le mask inverse)
    }
}
 8004546:	e006      	b.n	8004556 <_Z8setError5Errorb+0x36>
        ERROR_CODE &= ~static_cast<uint32_t>(error); // bit correspondant à erreur e mis à 0 ("ET" avec le mask inverse)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	43da      	mvns	r2, r3
 800454c:	4b04      	ldr	r3, [pc, #16]	; (8004560 <_Z8setError5Errorb+0x40>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	401a      	ands	r2, r3
 8004552:	4b03      	ldr	r3, [pc, #12]	; (8004560 <_Z8setError5Errorb+0x40>)
 8004554:	601a      	str	r2, [r3, #0]
}
 8004556:	46c0      	nop			; (mov r8, r8)
 8004558:	46bd      	mov	sp, r7
 800455a:	b002      	add	sp, #8
 800455c:	bd80      	pop	{r7, pc}
 800455e:	46c0      	nop			; (mov r8, r8)
 8004560:	200004c4 	.word	0x200004c4

08004564 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004564:	b590      	push	{r4, r7, lr}
 8004566:	b089      	sub	sp, #36	; 0x24
 8004568:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800456a:	240c      	movs	r4, #12
 800456c:	193b      	adds	r3, r7, r4
 800456e:	0018      	movs	r0, r3
 8004570:	2314      	movs	r3, #20
 8004572:	001a      	movs	r2, r3
 8004574:	2100      	movs	r1, #0
 8004576:	f004 fd71 	bl	800905c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800457a:	4b39      	ldr	r3, [pc, #228]	; (8004660 <MX_GPIO_Init+0xfc>)
 800457c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800457e:	4b38      	ldr	r3, [pc, #224]	; (8004660 <MX_GPIO_Init+0xfc>)
 8004580:	2101      	movs	r1, #1
 8004582:	430a      	orrs	r2, r1
 8004584:	635a      	str	r2, [r3, #52]	; 0x34
 8004586:	4b36      	ldr	r3, [pc, #216]	; (8004660 <MX_GPIO_Init+0xfc>)
 8004588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800458a:	2201      	movs	r2, #1
 800458c:	4013      	ands	r3, r2
 800458e:	60bb      	str	r3, [r7, #8]
 8004590:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004592:	4b33      	ldr	r3, [pc, #204]	; (8004660 <MX_GPIO_Init+0xfc>)
 8004594:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004596:	4b32      	ldr	r3, [pc, #200]	; (8004660 <MX_GPIO_Init+0xfc>)
 8004598:	2102      	movs	r1, #2
 800459a:	430a      	orrs	r2, r1
 800459c:	635a      	str	r2, [r3, #52]	; 0x34
 800459e:	4b30      	ldr	r3, [pc, #192]	; (8004660 <MX_GPIO_Init+0xfc>)
 80045a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045a2:	2202      	movs	r2, #2
 80045a4:	4013      	ands	r3, r2
 80045a6:	607b      	str	r3, [r7, #4]
 80045a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80045aa:	2380      	movs	r3, #128	; 0x80
 80045ac:	005b      	lsls	r3, r3, #1
 80045ae:	482d      	ldr	r0, [pc, #180]	; (8004664 <MX_GPIO_Init+0x100>)
 80045b0:	2200      	movs	r2, #0
 80045b2:	0019      	movs	r1, r3
 80045b4:	f001 f807 	bl	80055c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ACC_Pin|BLK_Pin;
 80045b8:	193b      	adds	r3, r7, r4
 80045ba:	2203      	movs	r2, #3
 80045bc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80045be:	193b      	adds	r3, r7, r4
 80045c0:	22c4      	movs	r2, #196	; 0xc4
 80045c2:	0392      	lsls	r2, r2, #14
 80045c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045c6:	193b      	adds	r3, r7, r4
 80045c8:	2200      	movs	r2, #0
 80045ca:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045cc:	193a      	adds	r2, r7, r4
 80045ce:	23a0      	movs	r3, #160	; 0xa0
 80045d0:	05db      	lsls	r3, r3, #23
 80045d2:	0011      	movs	r1, r2
 80045d4:	0018      	movs	r0, r3
 80045d6:	f000 fe75 	bl	80052c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AIN_INT1_Pin;
 80045da:	193b      	adds	r3, r7, r4
 80045dc:	2204      	movs	r2, #4
 80045de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80045e0:	193b      	adds	r3, r7, r4
 80045e2:	2288      	movs	r2, #136	; 0x88
 80045e4:	0352      	lsls	r2, r2, #13
 80045e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045e8:	193b      	adds	r3, r7, r4
 80045ea:	2200      	movs	r2, #0
 80045ec:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(AIN_INT1_GPIO_Port, &GPIO_InitStruct);
 80045ee:	193b      	adds	r3, r7, r4
 80045f0:	4a1c      	ldr	r2, [pc, #112]	; (8004664 <MX_GPIO_Init+0x100>)
 80045f2:	0019      	movs	r1, r3
 80045f4:	0010      	movs	r0, r2
 80045f6:	f000 fe65 	bl	80052c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AIN_INT2_Pin;
 80045fa:	193b      	adds	r3, r7, r4
 80045fc:	2280      	movs	r2, #128	; 0x80
 80045fe:	0052      	lsls	r2, r2, #1
 8004600:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004602:	193b      	adds	r3, r7, r4
 8004604:	2288      	movs	r2, #136	; 0x88
 8004606:	0352      	lsls	r2, r2, #13
 8004608:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800460a:	193b      	adds	r3, r7, r4
 800460c:	2200      	movs	r2, #0
 800460e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(AIN_INT2_GPIO_Port, &GPIO_InitStruct);
 8004610:	193a      	adds	r2, r7, r4
 8004612:	23a0      	movs	r3, #160	; 0xa0
 8004614:	05db      	lsls	r3, r3, #23
 8004616:	0011      	movs	r1, r2
 8004618:	0018      	movs	r0, r3
 800461a:	f000 fe53 	bl	80052c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 800461e:	0021      	movs	r1, r4
 8004620:	187b      	adds	r3, r7, r1
 8004622:	2280      	movs	r2, #128	; 0x80
 8004624:	0052      	lsls	r2, r2, #1
 8004626:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004628:	187b      	adds	r3, r7, r1
 800462a:	2201      	movs	r2, #1
 800462c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800462e:	187b      	adds	r3, r7, r1
 8004630:	2200      	movs	r2, #0
 8004632:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004634:	187b      	adds	r3, r7, r1
 8004636:	2200      	movs	r2, #0
 8004638:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 800463a:	187b      	adds	r3, r7, r1
 800463c:	4a09      	ldr	r2, [pc, #36]	; (8004664 <MX_GPIO_Init+0x100>)
 800463e:	0019      	movs	r1, r3
 8004640:	0010      	movs	r0, r2
 8004642:	f000 fe3f 	bl	80052c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8004646:	2200      	movs	r2, #0
 8004648:	2100      	movs	r1, #0
 800464a:	2005      	movs	r0, #5
 800464c:	f000 fde8 	bl	8005220 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8004650:	2005      	movs	r0, #5
 8004652:	f000 fdfa 	bl	800524a <HAL_NVIC_EnableIRQ>

}
 8004656:	46c0      	nop			; (mov r8, r8)
 8004658:	46bd      	mov	sp, r7
 800465a:	b009      	add	sp, #36	; 0x24
 800465c:	bd90      	pop	{r4, r7, pc}
 800465e:	46c0      	nop			; (mov r8, r8)
 8004660:	40021000 	.word	0x40021000
 8004664:	50000400 	.word	0x50000400

08004668 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800466c:	4b1b      	ldr	r3, [pc, #108]	; (80046dc <MX_I2C1_Init+0x74>)
 800466e:	4a1c      	ldr	r2, [pc, #112]	; (80046e0 <MX_I2C1_Init+0x78>)
 8004670:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8004672:	4b1a      	ldr	r3, [pc, #104]	; (80046dc <MX_I2C1_Init+0x74>)
 8004674:	4a1b      	ldr	r2, [pc, #108]	; (80046e4 <MX_I2C1_Init+0x7c>)
 8004676:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004678:	4b18      	ldr	r3, [pc, #96]	; (80046dc <MX_I2C1_Init+0x74>)
 800467a:	2200      	movs	r2, #0
 800467c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800467e:	4b17      	ldr	r3, [pc, #92]	; (80046dc <MX_I2C1_Init+0x74>)
 8004680:	2201      	movs	r2, #1
 8004682:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004684:	4b15      	ldr	r3, [pc, #84]	; (80046dc <MX_I2C1_Init+0x74>)
 8004686:	2200      	movs	r2, #0
 8004688:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800468a:	4b14      	ldr	r3, [pc, #80]	; (80046dc <MX_I2C1_Init+0x74>)
 800468c:	2200      	movs	r2, #0
 800468e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004690:	4b12      	ldr	r3, [pc, #72]	; (80046dc <MX_I2C1_Init+0x74>)
 8004692:	2200      	movs	r2, #0
 8004694:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004696:	4b11      	ldr	r3, [pc, #68]	; (80046dc <MX_I2C1_Init+0x74>)
 8004698:	2200      	movs	r2, #0
 800469a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800469c:	4b0f      	ldr	r3, [pc, #60]	; (80046dc <MX_I2C1_Init+0x74>)
 800469e:	2200      	movs	r2, #0
 80046a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80046a2:	4b0e      	ldr	r3, [pc, #56]	; (80046dc <MX_I2C1_Init+0x74>)
 80046a4:	0018      	movs	r0, r3
 80046a6:	f000 ffd5 	bl	8005654 <HAL_I2C_Init>
 80046aa:	1e03      	subs	r3, r0, #0
 80046ac:	d001      	beq.n	80046b2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80046ae:	f000 f95a 	bl	8004966 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80046b2:	4b0a      	ldr	r3, [pc, #40]	; (80046dc <MX_I2C1_Init+0x74>)
 80046b4:	2100      	movs	r1, #0
 80046b6:	0018      	movs	r0, r3
 80046b8:	f001 fdd8 	bl	800626c <HAL_I2CEx_ConfigAnalogFilter>
 80046bc:	1e03      	subs	r3, r0, #0
 80046be:	d001      	beq.n	80046c4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80046c0:	f000 f951 	bl	8004966 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80046c4:	4b05      	ldr	r3, [pc, #20]	; (80046dc <MX_I2C1_Init+0x74>)
 80046c6:	2100      	movs	r1, #0
 80046c8:	0018      	movs	r0, r3
 80046ca:	f001 fe1b 	bl	8006304 <HAL_I2CEx_ConfigDigitalFilter>
 80046ce:	1e03      	subs	r3, r0, #0
 80046d0:	d001      	beq.n	80046d6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80046d2:	f000 f948 	bl	8004966 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80046d6:	46c0      	nop			; (mov r8, r8)
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	200004c8 	.word	0x200004c8
 80046e0:	40005400 	.word	0x40005400
 80046e4:	00303d5b 	.word	0x00303d5b

080046e8 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80046ec:	4b1b      	ldr	r3, [pc, #108]	; (800475c <MX_I2C2_Init+0x74>)
 80046ee:	4a1c      	ldr	r2, [pc, #112]	; (8004760 <MX_I2C2_Init+0x78>)
 80046f0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 80046f2:	4b1a      	ldr	r3, [pc, #104]	; (800475c <MX_I2C2_Init+0x74>)
 80046f4:	4a1b      	ldr	r2, [pc, #108]	; (8004764 <MX_I2C2_Init+0x7c>)
 80046f6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80046f8:	4b18      	ldr	r3, [pc, #96]	; (800475c <MX_I2C2_Init+0x74>)
 80046fa:	2200      	movs	r2, #0
 80046fc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80046fe:	4b17      	ldr	r3, [pc, #92]	; (800475c <MX_I2C2_Init+0x74>)
 8004700:	2201      	movs	r2, #1
 8004702:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004704:	4b15      	ldr	r3, [pc, #84]	; (800475c <MX_I2C2_Init+0x74>)
 8004706:	2200      	movs	r2, #0
 8004708:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800470a:	4b14      	ldr	r3, [pc, #80]	; (800475c <MX_I2C2_Init+0x74>)
 800470c:	2200      	movs	r2, #0
 800470e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004710:	4b12      	ldr	r3, [pc, #72]	; (800475c <MX_I2C2_Init+0x74>)
 8004712:	2200      	movs	r2, #0
 8004714:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004716:	4b11      	ldr	r3, [pc, #68]	; (800475c <MX_I2C2_Init+0x74>)
 8004718:	2200      	movs	r2, #0
 800471a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800471c:	4b0f      	ldr	r3, [pc, #60]	; (800475c <MX_I2C2_Init+0x74>)
 800471e:	2200      	movs	r2, #0
 8004720:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004722:	4b0e      	ldr	r3, [pc, #56]	; (800475c <MX_I2C2_Init+0x74>)
 8004724:	0018      	movs	r0, r3
 8004726:	f000 ff95 	bl	8005654 <HAL_I2C_Init>
 800472a:	1e03      	subs	r3, r0, #0
 800472c:	d001      	beq.n	8004732 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800472e:	f000 f91a 	bl	8004966 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004732:	4b0a      	ldr	r3, [pc, #40]	; (800475c <MX_I2C2_Init+0x74>)
 8004734:	2100      	movs	r1, #0
 8004736:	0018      	movs	r0, r3
 8004738:	f001 fd98 	bl	800626c <HAL_I2CEx_ConfigAnalogFilter>
 800473c:	1e03      	subs	r3, r0, #0
 800473e:	d001      	beq.n	8004744 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8004740:	f000 f911 	bl	8004966 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8004744:	4b05      	ldr	r3, [pc, #20]	; (800475c <MX_I2C2_Init+0x74>)
 8004746:	2100      	movs	r1, #0
 8004748:	0018      	movs	r0, r3
 800474a:	f001 fddb 	bl	8006304 <HAL_I2CEx_ConfigDigitalFilter>
 800474e:	1e03      	subs	r3, r0, #0
 8004750:	d001      	beq.n	8004756 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8004752:	f000 f908 	bl	8004966 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8004756:	46c0      	nop			; (mov r8, r8)
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}
 800475c:	2000051c 	.word	0x2000051c
 8004760:	40005800 	.word	0x40005800
 8004764:	00303d5b 	.word	0x00303d5b

08004768 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004768:	b590      	push	{r4, r7, lr}
 800476a:	b093      	sub	sp, #76	; 0x4c
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004770:	2334      	movs	r3, #52	; 0x34
 8004772:	18fb      	adds	r3, r7, r3
 8004774:	0018      	movs	r0, r3
 8004776:	2314      	movs	r3, #20
 8004778:	001a      	movs	r2, r3
 800477a:	2100      	movs	r1, #0
 800477c:	f004 fc6e 	bl	800905c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004780:	241c      	movs	r4, #28
 8004782:	193b      	adds	r3, r7, r4
 8004784:	0018      	movs	r0, r3
 8004786:	2318      	movs	r3, #24
 8004788:	001a      	movs	r2, r3
 800478a:	2100      	movs	r1, #0
 800478c:	f004 fc66 	bl	800905c <memset>
  if(i2cHandle->Instance==I2C1)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a3f      	ldr	r2, [pc, #252]	; (8004894 <HAL_I2C_MspInit+0x12c>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d140      	bne.n	800481c <HAL_I2C_MspInit+0xb4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800479a:	193b      	adds	r3, r7, r4
 800479c:	2220      	movs	r2, #32
 800479e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80047a0:	193b      	adds	r3, r7, r4
 80047a2:	2200      	movs	r2, #0
 80047a4:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80047a6:	193b      	adds	r3, r7, r4
 80047a8:	0018      	movs	r0, r3
 80047aa:	f002 fafd 	bl	8006da8 <HAL_RCCEx_PeriphCLKConfig>
 80047ae:	1e03      	subs	r3, r0, #0
 80047b0:	d001      	beq.n	80047b6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80047b2:	f000 f8d8 	bl	8004966 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047b6:	4b38      	ldr	r3, [pc, #224]	; (8004898 <HAL_I2C_MspInit+0x130>)
 80047b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047ba:	4b37      	ldr	r3, [pc, #220]	; (8004898 <HAL_I2C_MspInit+0x130>)
 80047bc:	2101      	movs	r1, #1
 80047be:	430a      	orrs	r2, r1
 80047c0:	635a      	str	r2, [r3, #52]	; 0x34
 80047c2:	4b35      	ldr	r3, [pc, #212]	; (8004898 <HAL_I2C_MspInit+0x130>)
 80047c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047c6:	2201      	movs	r2, #1
 80047c8:	4013      	ands	r3, r2
 80047ca:	61bb      	str	r3, [r7, #24]
 80047cc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = AIN_SCL_Pin|AIN_SDA_Pin;
 80047ce:	2134      	movs	r1, #52	; 0x34
 80047d0:	187b      	adds	r3, r7, r1
 80047d2:	22c0      	movs	r2, #192	; 0xc0
 80047d4:	00d2      	lsls	r2, r2, #3
 80047d6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80047d8:	187b      	adds	r3, r7, r1
 80047da:	2212      	movs	r2, #18
 80047dc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047de:	187b      	adds	r3, r7, r1
 80047e0:	2200      	movs	r2, #0
 80047e2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047e4:	187b      	adds	r3, r7, r1
 80047e6:	2200      	movs	r2, #0
 80047e8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80047ea:	187b      	adds	r3, r7, r1
 80047ec:	2206      	movs	r2, #6
 80047ee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047f0:	187a      	adds	r2, r7, r1
 80047f2:	23a0      	movs	r3, #160	; 0xa0
 80047f4:	05db      	lsls	r3, r3, #23
 80047f6:	0011      	movs	r1, r2
 80047f8:	0018      	movs	r0, r3
 80047fa:	f000 fd63 	bl	80052c4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80047fe:	4b26      	ldr	r3, [pc, #152]	; (8004898 <HAL_I2C_MspInit+0x130>)
 8004800:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004802:	4b25      	ldr	r3, [pc, #148]	; (8004898 <HAL_I2C_MspInit+0x130>)
 8004804:	2180      	movs	r1, #128	; 0x80
 8004806:	0389      	lsls	r1, r1, #14
 8004808:	430a      	orrs	r2, r1
 800480a:	63da      	str	r2, [r3, #60]	; 0x3c
 800480c:	4b22      	ldr	r3, [pc, #136]	; (8004898 <HAL_I2C_MspInit+0x130>)
 800480e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004810:	2380      	movs	r3, #128	; 0x80
 8004812:	039b      	lsls	r3, r3, #14
 8004814:	4013      	ands	r3, r2
 8004816:	617b      	str	r3, [r7, #20]
 8004818:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800481a:	e036      	b.n	800488a <HAL_I2C_MspInit+0x122>
  else if(i2cHandle->Instance==I2C2)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a1e      	ldr	r2, [pc, #120]	; (800489c <HAL_I2C_MspInit+0x134>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d131      	bne.n	800488a <HAL_I2C_MspInit+0x122>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004826:	4b1c      	ldr	r3, [pc, #112]	; (8004898 <HAL_I2C_MspInit+0x130>)
 8004828:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800482a:	4b1b      	ldr	r3, [pc, #108]	; (8004898 <HAL_I2C_MspInit+0x130>)
 800482c:	2101      	movs	r1, #1
 800482e:	430a      	orrs	r2, r1
 8004830:	635a      	str	r2, [r3, #52]	; 0x34
 8004832:	4b19      	ldr	r3, [pc, #100]	; (8004898 <HAL_I2C_MspInit+0x130>)
 8004834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004836:	2201      	movs	r2, #1
 8004838:	4013      	ands	r3, r2
 800483a:	613b      	str	r3, [r7, #16]
 800483c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = AOUT_SCL_Pin|AOUT_SDA_Pin;
 800483e:	2134      	movs	r1, #52	; 0x34
 8004840:	187b      	adds	r3, r7, r1
 8004842:	22c0      	movs	r2, #192	; 0xc0
 8004844:	0152      	lsls	r2, r2, #5
 8004846:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004848:	187b      	adds	r3, r7, r1
 800484a:	2212      	movs	r2, #18
 800484c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800484e:	187b      	adds	r3, r7, r1
 8004850:	2200      	movs	r2, #0
 8004852:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004854:	187b      	adds	r3, r7, r1
 8004856:	2200      	movs	r2, #0
 8004858:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 800485a:	187b      	adds	r3, r7, r1
 800485c:	2206      	movs	r2, #6
 800485e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004860:	187a      	adds	r2, r7, r1
 8004862:	23a0      	movs	r3, #160	; 0xa0
 8004864:	05db      	lsls	r3, r3, #23
 8004866:	0011      	movs	r1, r2
 8004868:	0018      	movs	r0, r3
 800486a:	f000 fd2b 	bl	80052c4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800486e:	4b0a      	ldr	r3, [pc, #40]	; (8004898 <HAL_I2C_MspInit+0x130>)
 8004870:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004872:	4b09      	ldr	r3, [pc, #36]	; (8004898 <HAL_I2C_MspInit+0x130>)
 8004874:	2180      	movs	r1, #128	; 0x80
 8004876:	03c9      	lsls	r1, r1, #15
 8004878:	430a      	orrs	r2, r1
 800487a:	63da      	str	r2, [r3, #60]	; 0x3c
 800487c:	4b06      	ldr	r3, [pc, #24]	; (8004898 <HAL_I2C_MspInit+0x130>)
 800487e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004880:	2380      	movs	r3, #128	; 0x80
 8004882:	03db      	lsls	r3, r3, #15
 8004884:	4013      	ands	r3, r2
 8004886:	60fb      	str	r3, [r7, #12]
 8004888:	68fb      	ldr	r3, [r7, #12]
}
 800488a:	46c0      	nop			; (mov r8, r8)
 800488c:	46bd      	mov	sp, r7
 800488e:	b013      	add	sp, #76	; 0x4c
 8004890:	bd90      	pop	{r4, r7, pc}
 8004892:	46c0      	nop			; (mov r8, r8)
 8004894:	40005400 	.word	0x40005400
 8004898:	40021000 	.word	0x40021000
 800489c:	40005800 	.word	0x40005800

080048a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80048a4:	f000 fb28 	bl	8004ef8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80048a8:	f000 f811 	bl	80048ce <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80048ac:	f7ff fe5a 	bl	8004564 <MX_GPIO_Init>
  MX_I2C1_Init();
 80048b0:	f7ff feda 	bl	8004668 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80048b4:	f000 f9da 	bl	8004c6c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80048b8:	f000 fa26 	bl	8004d08 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 80048bc:	f7ff ff14 	bl	80046e8 <MX_I2C2_Init>
  MX_TIM3_Init();
 80048c0:	f000 f958 	bl	8004b74 <MX_TIM3_Init>
  MX_RTC_Init();
 80048c4:	f000 f854 	bl	8004970 <MX_RTC_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //lis2dw12_init2();
  //lis2dw12_wake_up();

  alt_main();
 80048c8:	f7ff fd52 	bl	8004370 <alt_main>

  //testwho_status = HAL_I2C_Mem_Read(&hi2c2, LIS2DW12_I2C_ADD_L, LIS2DW12_WHO_AM_I, I2C_MEMADD_SIZE_8BIT, &testwho, 1, 100);
  while (1)
 80048cc:	e7fe      	b.n	80048cc <main+0x2c>

080048ce <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80048ce:	b590      	push	{r4, r7, lr}
 80048d0:	b093      	sub	sp, #76	; 0x4c
 80048d2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80048d4:	2414      	movs	r4, #20
 80048d6:	193b      	adds	r3, r7, r4
 80048d8:	0018      	movs	r0, r3
 80048da:	2334      	movs	r3, #52	; 0x34
 80048dc:	001a      	movs	r2, r3
 80048de:	2100      	movs	r1, #0
 80048e0:	f004 fbbc 	bl	800905c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80048e4:	1d3b      	adds	r3, r7, #4
 80048e6:	0018      	movs	r0, r3
 80048e8:	2310      	movs	r3, #16
 80048ea:	001a      	movs	r2, r3
 80048ec:	2100      	movs	r1, #0
 80048ee:	f004 fbb5 	bl	800905c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80048f2:	2380      	movs	r3, #128	; 0x80
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	0018      	movs	r0, r3
 80048f8:	f001 fd50 	bl	800639c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80048fc:	193b      	adds	r3, r7, r4
 80048fe:	220a      	movs	r2, #10
 8004900:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004902:	193b      	adds	r3, r7, r4
 8004904:	2280      	movs	r2, #128	; 0x80
 8004906:	0052      	lsls	r2, r2, #1
 8004908:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800490a:	0021      	movs	r1, r4
 800490c:	187b      	adds	r3, r7, r1
 800490e:	2200      	movs	r2, #0
 8004910:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004912:	187b      	adds	r3, r7, r1
 8004914:	2240      	movs	r2, #64	; 0x40
 8004916:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004918:	187b      	adds	r3, r7, r1
 800491a:	2201      	movs	r2, #1
 800491c:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800491e:	187b      	adds	r3, r7, r1
 8004920:	2200      	movs	r2, #0
 8004922:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004924:	187b      	adds	r3, r7, r1
 8004926:	0018      	movs	r0, r3
 8004928:	f001 fd84 	bl	8006434 <HAL_RCC_OscConfig>
 800492c:	1e03      	subs	r3, r0, #0
 800492e:	d001      	beq.n	8004934 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8004930:	f000 f819 	bl	8004966 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004934:	1d3b      	adds	r3, r7, #4
 8004936:	2207      	movs	r2, #7
 8004938:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800493a:	1d3b      	adds	r3, r7, #4
 800493c:	2200      	movs	r2, #0
 800493e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004940:	1d3b      	adds	r3, r7, #4
 8004942:	2200      	movs	r2, #0
 8004944:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004946:	1d3b      	adds	r3, r7, #4
 8004948:	2200      	movs	r2, #0
 800494a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800494c:	1d3b      	adds	r3, r7, #4
 800494e:	2100      	movs	r1, #0
 8004950:	0018      	movs	r0, r3
 8004952:	f002 f87f 	bl	8006a54 <HAL_RCC_ClockConfig>
 8004956:	1e03      	subs	r3, r0, #0
 8004958:	d001      	beq.n	800495e <SystemClock_Config+0x90>
  {
    Error_Handler();
 800495a:	f000 f804 	bl	8004966 <Error_Handler>
  }
}
 800495e:	46c0      	nop			; (mov r8, r8)
 8004960:	46bd      	mov	sp, r7
 8004962:	b013      	add	sp, #76	; 0x4c
 8004964:	bd90      	pop	{r4, r7, pc}

08004966 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004966:	b580      	push	{r7, lr}
 8004968:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800496a:	b672      	cpsid	i
}
 800496c:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800496e:	e7fe      	b.n	800496e <Error_Handler+0x8>

08004970 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b086      	sub	sp, #24
 8004974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8004976:	1d3b      	adds	r3, r7, #4
 8004978:	0018      	movs	r0, r3
 800497a:	2314      	movs	r3, #20
 800497c:	001a      	movs	r2, r3
 800497e:	2100      	movs	r1, #0
 8004980:	f004 fb6c 	bl	800905c <memset>
  RTC_DateTypeDef sDate = {0};
 8004984:	003b      	movs	r3, r7
 8004986:	2200      	movs	r2, #0
 8004988:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800498a:	4b2d      	ldr	r3, [pc, #180]	; (8004a40 <MX_RTC_Init+0xd0>)
 800498c:	4a2d      	ldr	r2, [pc, #180]	; (8004a44 <MX_RTC_Init+0xd4>)
 800498e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004990:	4b2b      	ldr	r3, [pc, #172]	; (8004a40 <MX_RTC_Init+0xd0>)
 8004992:	2200      	movs	r2, #0
 8004994:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8004996:	4b2a      	ldr	r3, [pc, #168]	; (8004a40 <MX_RTC_Init+0xd0>)
 8004998:	227f      	movs	r2, #127	; 0x7f
 800499a:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 800499c:	4b28      	ldr	r3, [pc, #160]	; (8004a40 <MX_RTC_Init+0xd0>)
 800499e:	22ff      	movs	r2, #255	; 0xff
 80049a0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80049a2:	4b27      	ldr	r3, [pc, #156]	; (8004a40 <MX_RTC_Init+0xd0>)
 80049a4:	2200      	movs	r2, #0
 80049a6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80049a8:	4b25      	ldr	r3, [pc, #148]	; (8004a40 <MX_RTC_Init+0xd0>)
 80049aa:	2200      	movs	r2, #0
 80049ac:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80049ae:	4b24      	ldr	r3, [pc, #144]	; (8004a40 <MX_RTC_Init+0xd0>)
 80049b0:	2200      	movs	r2, #0
 80049b2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80049b4:	4b22      	ldr	r3, [pc, #136]	; (8004a40 <MX_RTC_Init+0xd0>)
 80049b6:	2280      	movs	r2, #128	; 0x80
 80049b8:	05d2      	lsls	r2, r2, #23
 80049ba:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80049bc:	4b20      	ldr	r3, [pc, #128]	; (8004a40 <MX_RTC_Init+0xd0>)
 80049be:	2200      	movs	r2, #0
 80049c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80049c2:	4b1f      	ldr	r3, [pc, #124]	; (8004a40 <MX_RTC_Init+0xd0>)
 80049c4:	0018      	movs	r0, r3
 80049c6:	f002 fb15 	bl	8006ff4 <HAL_RTC_Init>
 80049ca:	1e03      	subs	r3, r0, #0
 80049cc:	d001      	beq.n	80049d2 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 80049ce:	f7ff ffca 	bl	8004966 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80049d2:	1d3b      	adds	r3, r7, #4
 80049d4:	2200      	movs	r2, #0
 80049d6:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 80049d8:	1d3b      	adds	r3, r7, #4
 80049da:	2200      	movs	r2, #0
 80049dc:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 80049de:	1d3b      	adds	r3, r7, #4
 80049e0:	2200      	movs	r2, #0
 80049e2:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 80049e4:	1d3b      	adds	r3, r7, #4
 80049e6:	2200      	movs	r2, #0
 80049e8:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80049ea:	1d3b      	adds	r3, r7, #4
 80049ec:	2200      	movs	r2, #0
 80049ee:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80049f0:	1d3b      	adds	r3, r7, #4
 80049f2:	2200      	movs	r2, #0
 80049f4:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80049f6:	1d39      	adds	r1, r7, #4
 80049f8:	4b11      	ldr	r3, [pc, #68]	; (8004a40 <MX_RTC_Init+0xd0>)
 80049fa:	2201      	movs	r2, #1
 80049fc:	0018      	movs	r0, r3
 80049fe:	f002 fb9b 	bl	8007138 <HAL_RTC_SetTime>
 8004a02:	1e03      	subs	r3, r0, #0
 8004a04:	d001      	beq.n	8004a0a <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 8004a06:	f7ff ffae 	bl	8004966 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8004a0a:	003b      	movs	r3, r7
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8004a10:	003b      	movs	r3, r7
 8004a12:	2201      	movs	r2, #1
 8004a14:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8004a16:	003b      	movs	r3, r7
 8004a18:	2201      	movs	r2, #1
 8004a1a:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8004a1c:	003b      	movs	r3, r7
 8004a1e:	2200      	movs	r2, #0
 8004a20:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8004a22:	0039      	movs	r1, r7
 8004a24:	4b06      	ldr	r3, [pc, #24]	; (8004a40 <MX_RTC_Init+0xd0>)
 8004a26:	2201      	movs	r2, #1
 8004a28:	0018      	movs	r0, r3
 8004a2a:	f002 fc89 	bl	8007340 <HAL_RTC_SetDate>
 8004a2e:	1e03      	subs	r3, r0, #0
 8004a30:	d001      	beq.n	8004a36 <MX_RTC_Init+0xc6>
  {
    Error_Handler();
 8004a32:	f7ff ff98 	bl	8004966 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8004a36:	46c0      	nop			; (mov r8, r8)
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	b006      	add	sp, #24
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	46c0      	nop			; (mov r8, r8)
 8004a40:	20000570 	.word	0x20000570
 8004a44:	40002800 	.word	0x40002800

08004a48 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8004a48:	b590      	push	{r4, r7, lr}
 8004a4a:	b08b      	sub	sp, #44	; 0x2c
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004a50:	2410      	movs	r4, #16
 8004a52:	193b      	adds	r3, r7, r4
 8004a54:	0018      	movs	r0, r3
 8004a56:	2318      	movs	r3, #24
 8004a58:	001a      	movs	r2, r3
 8004a5a:	2100      	movs	r1, #0
 8004a5c:	f004 fafe 	bl	800905c <memset>
  if(rtcHandle->Instance==RTC)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a15      	ldr	r2, [pc, #84]	; (8004abc <HAL_RTC_MspInit+0x74>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d124      	bne.n	8004ab4 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004a6a:	193b      	adds	r3, r7, r4
 8004a6c:	2280      	movs	r2, #128	; 0x80
 8004a6e:	0292      	lsls	r2, r2, #10
 8004a70:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004a72:	193b      	adds	r3, r7, r4
 8004a74:	2280      	movs	r2, #128	; 0x80
 8004a76:	0092      	lsls	r2, r2, #2
 8004a78:	615a      	str	r2, [r3, #20]

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a7a:	193b      	adds	r3, r7, r4
 8004a7c:	0018      	movs	r0, r3
 8004a7e:	f002 f993 	bl	8006da8 <HAL_RCCEx_PeriphCLKConfig>
 8004a82:	1e03      	subs	r3, r0, #0
 8004a84:	d001      	beq.n	8004a8a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8004a86:	f7ff ff6e 	bl	8004966 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004a8a:	4b0d      	ldr	r3, [pc, #52]	; (8004ac0 <HAL_RTC_MspInit+0x78>)
 8004a8c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004a8e:	4b0c      	ldr	r3, [pc, #48]	; (8004ac0 <HAL_RTC_MspInit+0x78>)
 8004a90:	2180      	movs	r1, #128	; 0x80
 8004a92:	0209      	lsls	r1, r1, #8
 8004a94:	430a      	orrs	r2, r1
 8004a96:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8004a98:	4b09      	ldr	r3, [pc, #36]	; (8004ac0 <HAL_RTC_MspInit+0x78>)
 8004a9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a9c:	4b08      	ldr	r3, [pc, #32]	; (8004ac0 <HAL_RTC_MspInit+0x78>)
 8004a9e:	2180      	movs	r1, #128	; 0x80
 8004aa0:	00c9      	lsls	r1, r1, #3
 8004aa2:	430a      	orrs	r2, r1
 8004aa4:	63da      	str	r2, [r3, #60]	; 0x3c
 8004aa6:	4b06      	ldr	r3, [pc, #24]	; (8004ac0 <HAL_RTC_MspInit+0x78>)
 8004aa8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004aaa:	2380      	movs	r3, #128	; 0x80
 8004aac:	00db      	lsls	r3, r3, #3
 8004aae:	4013      	ands	r3, r2
 8004ab0:	60fb      	str	r3, [r7, #12]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8004ab4:	46c0      	nop			; (mov r8, r8)
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	b00b      	add	sp, #44	; 0x2c
 8004aba:	bd90      	pop	{r4, r7, pc}
 8004abc:	40002800 	.word	0x40002800
 8004ac0:	40021000 	.word	0x40021000

08004ac4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004aca:	4b0f      	ldr	r3, [pc, #60]	; (8004b08 <HAL_MspInit+0x44>)
 8004acc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ace:	4b0e      	ldr	r3, [pc, #56]	; (8004b08 <HAL_MspInit+0x44>)
 8004ad0:	2101      	movs	r1, #1
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	641a      	str	r2, [r3, #64]	; 0x40
 8004ad6:	4b0c      	ldr	r3, [pc, #48]	; (8004b08 <HAL_MspInit+0x44>)
 8004ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ada:	2201      	movs	r2, #1
 8004adc:	4013      	ands	r3, r2
 8004ade:	607b      	str	r3, [r7, #4]
 8004ae0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004ae2:	4b09      	ldr	r3, [pc, #36]	; (8004b08 <HAL_MspInit+0x44>)
 8004ae4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ae6:	4b08      	ldr	r3, [pc, #32]	; (8004b08 <HAL_MspInit+0x44>)
 8004ae8:	2180      	movs	r1, #128	; 0x80
 8004aea:	0549      	lsls	r1, r1, #21
 8004aec:	430a      	orrs	r2, r1
 8004aee:	63da      	str	r2, [r3, #60]	; 0x3c
 8004af0:	4b05      	ldr	r3, [pc, #20]	; (8004b08 <HAL_MspInit+0x44>)
 8004af2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004af4:	2380      	movs	r3, #128	; 0x80
 8004af6:	055b      	lsls	r3, r3, #21
 8004af8:	4013      	ands	r3, r2
 8004afa:	603b      	str	r3, [r7, #0]
 8004afc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004afe:	46c0      	nop			; (mov r8, r8)
 8004b00:	46bd      	mov	sp, r7
 8004b02:	b002      	add	sp, #8
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	46c0      	nop			; (mov r8, r8)
 8004b08:	40021000 	.word	0x40021000

08004b0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004b10:	e7fe      	b.n	8004b10 <NMI_Handler+0x4>

08004b12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004b12:	b580      	push	{r7, lr}
 8004b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004b16:	e7fe      	b.n	8004b16 <HardFault_Handler+0x4>

08004b18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004b1c:	46c0      	nop			; (mov r8, r8)
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}

08004b22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004b22:	b580      	push	{r7, lr}
 8004b24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004b26:	46c0      	nop			; (mov r8, r8)
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004b30:	f000 fa4c 	bl	8004fcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004b34:	46c0      	nop			; (mov r8, r8)
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}

08004b3a <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8004b3a:	b580      	push	{r7, lr}
 8004b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACC_Pin);
 8004b3e:	2001      	movs	r0, #1
 8004b40:	f000 fd5e 	bl	8005600 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BLK_Pin);
 8004b44:	2002      	movs	r0, #2
 8004b46:	f000 fd5b 	bl	8005600 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8004b4a:	46c0      	nop			; (mov r8, r8)
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004b54:	4b03      	ldr	r3, [pc, #12]	; (8004b64 <TIM3_IRQHandler+0x14>)
 8004b56:	0018      	movs	r0, r3
 8004b58:	f002 feb4 	bl	80078c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004b5c:	46c0      	nop			; (mov r8, r8)
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	46c0      	nop			; (mov r8, r8)
 8004b64:	2000059c 	.word	0x2000059c

08004b68 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004b6c:	46c0      	nop			; (mov r8, r8)
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
	...

08004b74 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b088      	sub	sp, #32
 8004b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004b7a:	2310      	movs	r3, #16
 8004b7c:	18fb      	adds	r3, r7, r3
 8004b7e:	0018      	movs	r0, r3
 8004b80:	2310      	movs	r3, #16
 8004b82:	001a      	movs	r2, r3
 8004b84:	2100      	movs	r1, #0
 8004b86:	f004 fa69 	bl	800905c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b8a:	1d3b      	adds	r3, r7, #4
 8004b8c:	0018      	movs	r0, r3
 8004b8e:	230c      	movs	r3, #12
 8004b90:	001a      	movs	r2, r3
 8004b92:	2100      	movs	r1, #0
 8004b94:	f004 fa62 	bl	800905c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004b98:	4b1e      	ldr	r3, [pc, #120]	; (8004c14 <MX_TIM3_Init+0xa0>)
 8004b9a:	4a1f      	ldr	r2, [pc, #124]	; (8004c18 <MX_TIM3_Init+0xa4>)
 8004b9c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3;
 8004b9e:	4b1d      	ldr	r3, [pc, #116]	; (8004c14 <MX_TIM3_Init+0xa0>)
 8004ba0:	2203      	movs	r2, #3
 8004ba2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ba4:	4b1b      	ldr	r3, [pc, #108]	; (8004c14 <MX_TIM3_Init+0xa0>)
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 39999;
 8004baa:	4b1a      	ldr	r3, [pc, #104]	; (8004c14 <MX_TIM3_Init+0xa0>)
 8004bac:	4a1b      	ldr	r2, [pc, #108]	; (8004c1c <MX_TIM3_Init+0xa8>)
 8004bae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004bb0:	4b18      	ldr	r3, [pc, #96]	; (8004c14 <MX_TIM3_Init+0xa0>)
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004bb6:	4b17      	ldr	r3, [pc, #92]	; (8004c14 <MX_TIM3_Init+0xa0>)
 8004bb8:	2200      	movs	r2, #0
 8004bba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004bbc:	4b15      	ldr	r3, [pc, #84]	; (8004c14 <MX_TIM3_Init+0xa0>)
 8004bbe:	0018      	movs	r0, r3
 8004bc0:	f002 fdac 	bl	800771c <HAL_TIM_Base_Init>
 8004bc4:	1e03      	subs	r3, r0, #0
 8004bc6:	d001      	beq.n	8004bcc <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8004bc8:	f7ff fecd 	bl	8004966 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004bcc:	2110      	movs	r1, #16
 8004bce:	187b      	adds	r3, r7, r1
 8004bd0:	2280      	movs	r2, #128	; 0x80
 8004bd2:	0152      	lsls	r2, r2, #5
 8004bd4:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004bd6:	187a      	adds	r2, r7, r1
 8004bd8:	4b0e      	ldr	r3, [pc, #56]	; (8004c14 <MX_TIM3_Init+0xa0>)
 8004bda:	0011      	movs	r1, r2
 8004bdc:	0018      	movs	r0, r3
 8004bde:	f002 ff79 	bl	8007ad4 <HAL_TIM_ConfigClockSource>
 8004be2:	1e03      	subs	r3, r0, #0
 8004be4:	d001      	beq.n	8004bea <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8004be6:	f7ff febe 	bl	8004966 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004bea:	1d3b      	adds	r3, r7, #4
 8004bec:	2200      	movs	r2, #0
 8004bee:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004bf0:	1d3b      	adds	r3, r7, #4
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004bf6:	1d3a      	adds	r2, r7, #4
 8004bf8:	4b06      	ldr	r3, [pc, #24]	; (8004c14 <MX_TIM3_Init+0xa0>)
 8004bfa:	0011      	movs	r1, r2
 8004bfc:	0018      	movs	r0, r3
 8004bfe:	f003 f975 	bl	8007eec <HAL_TIMEx_MasterConfigSynchronization>
 8004c02:	1e03      	subs	r3, r0, #0
 8004c04:	d001      	beq.n	8004c0a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8004c06:	f7ff feae 	bl	8004966 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004c0a:	46c0      	nop			; (mov r8, r8)
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	b008      	add	sp, #32
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	46c0      	nop			; (mov r8, r8)
 8004c14:	2000059c 	.word	0x2000059c
 8004c18:	40000400 	.word	0x40000400
 8004c1c:	00009c3f 	.word	0x00009c3f

08004c20 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a0d      	ldr	r2, [pc, #52]	; (8004c64 <HAL_TIM_Base_MspInit+0x44>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d113      	bne.n	8004c5a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004c32:	4b0d      	ldr	r3, [pc, #52]	; (8004c68 <HAL_TIM_Base_MspInit+0x48>)
 8004c34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c36:	4b0c      	ldr	r3, [pc, #48]	; (8004c68 <HAL_TIM_Base_MspInit+0x48>)
 8004c38:	2102      	movs	r1, #2
 8004c3a:	430a      	orrs	r2, r1
 8004c3c:	63da      	str	r2, [r3, #60]	; 0x3c
 8004c3e:	4b0a      	ldr	r3, [pc, #40]	; (8004c68 <HAL_TIM_Base_MspInit+0x48>)
 8004c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c42:	2202      	movs	r2, #2
 8004c44:	4013      	ands	r3, r2
 8004c46:	60fb      	str	r3, [r7, #12]
 8004c48:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	2100      	movs	r1, #0
 8004c4e:	2010      	movs	r0, #16
 8004c50:	f000 fae6 	bl	8005220 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004c54:	2010      	movs	r0, #16
 8004c56:	f000 faf8 	bl	800524a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8004c5a:	46c0      	nop			; (mov r8, r8)
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	b004      	add	sp, #16
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	46c0      	nop			; (mov r8, r8)
 8004c64:	40000400 	.word	0x40000400
 8004c68:	40021000 	.word	0x40021000

08004c6c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004c70:	4b23      	ldr	r3, [pc, #140]	; (8004d00 <MX_USART1_UART_Init+0x94>)
 8004c72:	4a24      	ldr	r2, [pc, #144]	; (8004d04 <MX_USART1_UART_Init+0x98>)
 8004c74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8004c76:	4b22      	ldr	r3, [pc, #136]	; (8004d00 <MX_USART1_UART_Init+0x94>)
 8004c78:	2296      	movs	r2, #150	; 0x96
 8004c7a:	0192      	lsls	r2, r2, #6
 8004c7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004c7e:	4b20      	ldr	r3, [pc, #128]	; (8004d00 <MX_USART1_UART_Init+0x94>)
 8004c80:	2200      	movs	r2, #0
 8004c82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004c84:	4b1e      	ldr	r3, [pc, #120]	; (8004d00 <MX_USART1_UART_Init+0x94>)
 8004c86:	2200      	movs	r2, #0
 8004c88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004c8a:	4b1d      	ldr	r3, [pc, #116]	; (8004d00 <MX_USART1_UART_Init+0x94>)
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004c90:	4b1b      	ldr	r3, [pc, #108]	; (8004d00 <MX_USART1_UART_Init+0x94>)
 8004c92:	220c      	movs	r2, #12
 8004c94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004c96:	4b1a      	ldr	r3, [pc, #104]	; (8004d00 <MX_USART1_UART_Init+0x94>)
 8004c98:	2200      	movs	r2, #0
 8004c9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004c9c:	4b18      	ldr	r3, [pc, #96]	; (8004d00 <MX_USART1_UART_Init+0x94>)
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004ca2:	4b17      	ldr	r3, [pc, #92]	; (8004d00 <MX_USART1_UART_Init+0x94>)
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004ca8:	4b15      	ldr	r3, [pc, #84]	; (8004d00 <MX_USART1_UART_Init+0x94>)
 8004caa:	2200      	movs	r2, #0
 8004cac:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004cae:	4b14      	ldr	r3, [pc, #80]	; (8004d00 <MX_USART1_UART_Init+0x94>)
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004cb4:	4b12      	ldr	r3, [pc, #72]	; (8004d00 <MX_USART1_UART_Init+0x94>)
 8004cb6:	0018      	movs	r0, r3
 8004cb8:	f003 f992 	bl	8007fe0 <HAL_UART_Init>
 8004cbc:	1e03      	subs	r3, r0, #0
 8004cbe:	d001      	beq.n	8004cc4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8004cc0:	f7ff fe51 	bl	8004966 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004cc4:	4b0e      	ldr	r3, [pc, #56]	; (8004d00 <MX_USART1_UART_Init+0x94>)
 8004cc6:	2100      	movs	r1, #0
 8004cc8:	0018      	movs	r0, r3
 8004cca:	f003 fdb7 	bl	800883c <HAL_UARTEx_SetTxFifoThreshold>
 8004cce:	1e03      	subs	r3, r0, #0
 8004cd0:	d001      	beq.n	8004cd6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8004cd2:	f7ff fe48 	bl	8004966 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004cd6:	4b0a      	ldr	r3, [pc, #40]	; (8004d00 <MX_USART1_UART_Init+0x94>)
 8004cd8:	2100      	movs	r1, #0
 8004cda:	0018      	movs	r0, r3
 8004cdc:	f003 fdee 	bl	80088bc <HAL_UARTEx_SetRxFifoThreshold>
 8004ce0:	1e03      	subs	r3, r0, #0
 8004ce2:	d001      	beq.n	8004ce8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8004ce4:	f7ff fe3f 	bl	8004966 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004ce8:	4b05      	ldr	r3, [pc, #20]	; (8004d00 <MX_USART1_UART_Init+0x94>)
 8004cea:	0018      	movs	r0, r3
 8004cec:	f003 fd6c 	bl	80087c8 <HAL_UARTEx_DisableFifoMode>
 8004cf0:	1e03      	subs	r3, r0, #0
 8004cf2:	d001      	beq.n	8004cf8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8004cf4:	f7ff fe37 	bl	8004966 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004cf8:	46c0      	nop			; (mov r8, r8)
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	46c0      	nop			; (mov r8, r8)
 8004d00:	200005e8 	.word	0x200005e8
 8004d04:	40013800 	.word	0x40013800

08004d08 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004d0c:	4b16      	ldr	r3, [pc, #88]	; (8004d68 <MX_USART2_UART_Init+0x60>)
 8004d0e:	4a17      	ldr	r2, [pc, #92]	; (8004d6c <MX_USART2_UART_Init+0x64>)
 8004d10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8004d12:	4b15      	ldr	r3, [pc, #84]	; (8004d68 <MX_USART2_UART_Init+0x60>)
 8004d14:	2296      	movs	r2, #150	; 0x96
 8004d16:	0192      	lsls	r2, r2, #6
 8004d18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004d1a:	4b13      	ldr	r3, [pc, #76]	; (8004d68 <MX_USART2_UART_Init+0x60>)
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004d20:	4b11      	ldr	r3, [pc, #68]	; (8004d68 <MX_USART2_UART_Init+0x60>)
 8004d22:	2200      	movs	r2, #0
 8004d24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004d26:	4b10      	ldr	r3, [pc, #64]	; (8004d68 <MX_USART2_UART_Init+0x60>)
 8004d28:	2200      	movs	r2, #0
 8004d2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004d2c:	4b0e      	ldr	r3, [pc, #56]	; (8004d68 <MX_USART2_UART_Init+0x60>)
 8004d2e:	220c      	movs	r2, #12
 8004d30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004d32:	4b0d      	ldr	r3, [pc, #52]	; (8004d68 <MX_USART2_UART_Init+0x60>)
 8004d34:	2200      	movs	r2, #0
 8004d36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004d38:	4b0b      	ldr	r3, [pc, #44]	; (8004d68 <MX_USART2_UART_Init+0x60>)
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004d3e:	4b0a      	ldr	r3, [pc, #40]	; (8004d68 <MX_USART2_UART_Init+0x60>)
 8004d40:	2200      	movs	r2, #0
 8004d42:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004d44:	4b08      	ldr	r3, [pc, #32]	; (8004d68 <MX_USART2_UART_Init+0x60>)
 8004d46:	2200      	movs	r2, #0
 8004d48:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004d4a:	4b07      	ldr	r3, [pc, #28]	; (8004d68 <MX_USART2_UART_Init+0x60>)
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004d50:	4b05      	ldr	r3, [pc, #20]	; (8004d68 <MX_USART2_UART_Init+0x60>)
 8004d52:	0018      	movs	r0, r3
 8004d54:	f003 f944 	bl	8007fe0 <HAL_UART_Init>
 8004d58:	1e03      	subs	r3, r0, #0
 8004d5a:	d001      	beq.n	8004d60 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8004d5c:	f7ff fe03 	bl	8004966 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004d60:	46c0      	nop			; (mov r8, r8)
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	46c0      	nop			; (mov r8, r8)
 8004d68:	2000067c 	.word	0x2000067c
 8004d6c:	40004400 	.word	0x40004400

08004d70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004d70:	b590      	push	{r4, r7, lr}
 8004d72:	b093      	sub	sp, #76	; 0x4c
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d78:	2334      	movs	r3, #52	; 0x34
 8004d7a:	18fb      	adds	r3, r7, r3
 8004d7c:	0018      	movs	r0, r3
 8004d7e:	2314      	movs	r3, #20
 8004d80:	001a      	movs	r2, r3
 8004d82:	2100      	movs	r1, #0
 8004d84:	f004 f96a 	bl	800905c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004d88:	241c      	movs	r4, #28
 8004d8a:	193b      	adds	r3, r7, r4
 8004d8c:	0018      	movs	r0, r3
 8004d8e:	2318      	movs	r3, #24
 8004d90:	001a      	movs	r2, r3
 8004d92:	2100      	movs	r1, #0
 8004d94:	f004 f962 	bl	800905c <memset>
  if(uartHandle->Instance==USART1)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a3d      	ldr	r2, [pc, #244]	; (8004e94 <HAL_UART_MspInit+0x124>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d13e      	bne.n	8004e20 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004da2:	193b      	adds	r3, r7, r4
 8004da4:	2201      	movs	r2, #1
 8004da6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8004da8:	193b      	adds	r3, r7, r4
 8004daa:	2200      	movs	r2, #0
 8004dac:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004dae:	193b      	adds	r3, r7, r4
 8004db0:	0018      	movs	r0, r3
 8004db2:	f001 fff9 	bl	8006da8 <HAL_RCCEx_PeriphCLKConfig>
 8004db6:	1e03      	subs	r3, r0, #0
 8004db8:	d001      	beq.n	8004dbe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004dba:	f7ff fdd4 	bl	8004966 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004dbe:	4b36      	ldr	r3, [pc, #216]	; (8004e98 <HAL_UART_MspInit+0x128>)
 8004dc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004dc2:	4b35      	ldr	r3, [pc, #212]	; (8004e98 <HAL_UART_MspInit+0x128>)
 8004dc4:	2180      	movs	r1, #128	; 0x80
 8004dc6:	01c9      	lsls	r1, r1, #7
 8004dc8:	430a      	orrs	r2, r1
 8004dca:	641a      	str	r2, [r3, #64]	; 0x40
 8004dcc:	4b32      	ldr	r3, [pc, #200]	; (8004e98 <HAL_UART_MspInit+0x128>)
 8004dce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004dd0:	2380      	movs	r3, #128	; 0x80
 8004dd2:	01db      	lsls	r3, r3, #7
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	61bb      	str	r3, [r7, #24]
 8004dd8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004dda:	4b2f      	ldr	r3, [pc, #188]	; (8004e98 <HAL_UART_MspInit+0x128>)
 8004ddc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dde:	4b2e      	ldr	r3, [pc, #184]	; (8004e98 <HAL_UART_MspInit+0x128>)
 8004de0:	2102      	movs	r1, #2
 8004de2:	430a      	orrs	r2, r1
 8004de4:	635a      	str	r2, [r3, #52]	; 0x34
 8004de6:	4b2c      	ldr	r3, [pc, #176]	; (8004e98 <HAL_UART_MspInit+0x128>)
 8004de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dea:	2202      	movs	r2, #2
 8004dec:	4013      	ands	r3, r2
 8004dee:	617b      	str	r3, [r7, #20]
 8004df0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004df2:	2134      	movs	r1, #52	; 0x34
 8004df4:	187b      	adds	r3, r7, r1
 8004df6:	22c0      	movs	r2, #192	; 0xc0
 8004df8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dfa:	187b      	adds	r3, r7, r1
 8004dfc:	2202      	movs	r2, #2
 8004dfe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e00:	187b      	adds	r3, r7, r1
 8004e02:	2200      	movs	r2, #0
 8004e04:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e06:	187b      	adds	r3, r7, r1
 8004e08:	2200      	movs	r2, #0
 8004e0a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8004e0c:	187b      	adds	r3, r7, r1
 8004e0e:	2200      	movs	r2, #0
 8004e10:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e12:	187b      	adds	r3, r7, r1
 8004e14:	4a21      	ldr	r2, [pc, #132]	; (8004e9c <HAL_UART_MspInit+0x12c>)
 8004e16:	0019      	movs	r1, r3
 8004e18:	0010      	movs	r0, r2
 8004e1a:	f000 fa53 	bl	80052c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004e1e:	e035      	b.n	8004e8c <HAL_UART_MspInit+0x11c>
  else if(uartHandle->Instance==USART2)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a1e      	ldr	r2, [pc, #120]	; (8004ea0 <HAL_UART_MspInit+0x130>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d130      	bne.n	8004e8c <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004e2a:	4b1b      	ldr	r3, [pc, #108]	; (8004e98 <HAL_UART_MspInit+0x128>)
 8004e2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e2e:	4b1a      	ldr	r3, [pc, #104]	; (8004e98 <HAL_UART_MspInit+0x128>)
 8004e30:	2180      	movs	r1, #128	; 0x80
 8004e32:	0289      	lsls	r1, r1, #10
 8004e34:	430a      	orrs	r2, r1
 8004e36:	63da      	str	r2, [r3, #60]	; 0x3c
 8004e38:	4b17      	ldr	r3, [pc, #92]	; (8004e98 <HAL_UART_MspInit+0x128>)
 8004e3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e3c:	2380      	movs	r3, #128	; 0x80
 8004e3e:	029b      	lsls	r3, r3, #10
 8004e40:	4013      	ands	r3, r2
 8004e42:	613b      	str	r3, [r7, #16]
 8004e44:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e46:	4b14      	ldr	r3, [pc, #80]	; (8004e98 <HAL_UART_MspInit+0x128>)
 8004e48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e4a:	4b13      	ldr	r3, [pc, #76]	; (8004e98 <HAL_UART_MspInit+0x128>)
 8004e4c:	2101      	movs	r1, #1
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	635a      	str	r2, [r3, #52]	; 0x34
 8004e52:	4b11      	ldr	r3, [pc, #68]	; (8004e98 <HAL_UART_MspInit+0x128>)
 8004e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e56:	2201      	movs	r2, #1
 8004e58:	4013      	ands	r3, r2
 8004e5a:	60fb      	str	r3, [r7, #12]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004e5e:	2134      	movs	r1, #52	; 0x34
 8004e60:	187b      	adds	r3, r7, r1
 8004e62:	220c      	movs	r2, #12
 8004e64:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e66:	187b      	adds	r3, r7, r1
 8004e68:	2202      	movs	r2, #2
 8004e6a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e6c:	187b      	adds	r3, r7, r1
 8004e6e:	2200      	movs	r2, #0
 8004e70:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e72:	187b      	adds	r3, r7, r1
 8004e74:	2200      	movs	r2, #0
 8004e76:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8004e78:	187b      	adds	r3, r7, r1
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e7e:	187a      	adds	r2, r7, r1
 8004e80:	23a0      	movs	r3, #160	; 0xa0
 8004e82:	05db      	lsls	r3, r3, #23
 8004e84:	0011      	movs	r1, r2
 8004e86:	0018      	movs	r0, r3
 8004e88:	f000 fa1c 	bl	80052c4 <HAL_GPIO_Init>
}
 8004e8c:	46c0      	nop			; (mov r8, r8)
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	b013      	add	sp, #76	; 0x4c
 8004e92:	bd90      	pop	{r4, r7, pc}
 8004e94:	40013800 	.word	0x40013800
 8004e98:	40021000 	.word	0x40021000
 8004e9c:	50000400 	.word	0x50000400
 8004ea0:	40004400 	.word	0x40004400

08004ea4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004ea4:	480d      	ldr	r0, [pc, #52]	; (8004edc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004ea6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004ea8:	f7ff fe5e 	bl	8004b68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004eac:	480c      	ldr	r0, [pc, #48]	; (8004ee0 <LoopForever+0x6>)
  ldr r1, =_edata
 8004eae:	490d      	ldr	r1, [pc, #52]	; (8004ee4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004eb0:	4a0d      	ldr	r2, [pc, #52]	; (8004ee8 <LoopForever+0xe>)
  movs r3, #0
 8004eb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004eb4:	e002      	b.n	8004ebc <LoopCopyDataInit>

08004eb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004eb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004eb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004eba:	3304      	adds	r3, #4

08004ebc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004ebc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004ebe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004ec0:	d3f9      	bcc.n	8004eb6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004ec2:	4a0a      	ldr	r2, [pc, #40]	; (8004eec <LoopForever+0x12>)
  ldr r4, =_ebss
 8004ec4:	4c0a      	ldr	r4, [pc, #40]	; (8004ef0 <LoopForever+0x16>)
  movs r3, #0
 8004ec6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004ec8:	e001      	b.n	8004ece <LoopFillZerobss>

08004eca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004eca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004ecc:	3204      	adds	r2, #4

08004ece <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004ece:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004ed0:	d3fb      	bcc.n	8004eca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004ed2:	f004 f8d1 	bl	8009078 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8004ed6:	f7ff fce3 	bl	80048a0 <main>

08004eda <LoopForever>:

LoopForever:
  b LoopForever
 8004eda:	e7fe      	b.n	8004eda <LoopForever>
  ldr   r0, =_estack
 8004edc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8004ee0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004ee4:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8004ee8:	08009230 	.word	0x08009230
  ldr r2, =_sbss
 8004eec:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8004ef0:	2000084c 	.word	0x2000084c

08004ef4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004ef4:	e7fe      	b.n	8004ef4 <ADC1_IRQHandler>
	...

08004ef8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b082      	sub	sp, #8
 8004efc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004efe:	1dfb      	adds	r3, r7, #7
 8004f00:	2200      	movs	r2, #0
 8004f02:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004f04:	4b0b      	ldr	r3, [pc, #44]	; (8004f34 <HAL_Init+0x3c>)
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	4b0a      	ldr	r3, [pc, #40]	; (8004f34 <HAL_Init+0x3c>)
 8004f0a:	2180      	movs	r1, #128	; 0x80
 8004f0c:	0049      	lsls	r1, r1, #1
 8004f0e:	430a      	orrs	r2, r1
 8004f10:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004f12:	2003      	movs	r0, #3
 8004f14:	f000 f810 	bl	8004f38 <HAL_InitTick>
 8004f18:	1e03      	subs	r3, r0, #0
 8004f1a:	d003      	beq.n	8004f24 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8004f1c:	1dfb      	adds	r3, r7, #7
 8004f1e:	2201      	movs	r2, #1
 8004f20:	701a      	strb	r2, [r3, #0]
 8004f22:	e001      	b.n	8004f28 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8004f24:	f7ff fdce 	bl	8004ac4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004f28:	1dfb      	adds	r3, r7, #7
 8004f2a:	781b      	ldrb	r3, [r3, #0]
}
 8004f2c:	0018      	movs	r0, r3
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	b002      	add	sp, #8
 8004f32:	bd80      	pop	{r7, pc}
 8004f34:	40022000 	.word	0x40022000

08004f38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004f38:	b590      	push	{r4, r7, lr}
 8004f3a:	b085      	sub	sp, #20
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004f40:	230f      	movs	r3, #15
 8004f42:	18fb      	adds	r3, r7, r3
 8004f44:	2200      	movs	r2, #0
 8004f46:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8004f48:	4b1d      	ldr	r3, [pc, #116]	; (8004fc0 <HAL_InitTick+0x88>)
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d02b      	beq.n	8004fa8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8004f50:	4b1c      	ldr	r3, [pc, #112]	; (8004fc4 <HAL_InitTick+0x8c>)
 8004f52:	681c      	ldr	r4, [r3, #0]
 8004f54:	4b1a      	ldr	r3, [pc, #104]	; (8004fc0 <HAL_InitTick+0x88>)
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	0019      	movs	r1, r3
 8004f5a:	23fa      	movs	r3, #250	; 0xfa
 8004f5c:	0098      	lsls	r0, r3, #2
 8004f5e:	f7fb f8cf 	bl	8000100 <__udivsi3>
 8004f62:	0003      	movs	r3, r0
 8004f64:	0019      	movs	r1, r3
 8004f66:	0020      	movs	r0, r4
 8004f68:	f7fb f8ca 	bl	8000100 <__udivsi3>
 8004f6c:	0003      	movs	r3, r0
 8004f6e:	0018      	movs	r0, r3
 8004f70:	f000 f98b 	bl	800528a <HAL_SYSTICK_Config>
 8004f74:	1e03      	subs	r3, r0, #0
 8004f76:	d112      	bne.n	8004f9e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2b03      	cmp	r3, #3
 8004f7c:	d80a      	bhi.n	8004f94 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004f7e:	6879      	ldr	r1, [r7, #4]
 8004f80:	2301      	movs	r3, #1
 8004f82:	425b      	negs	r3, r3
 8004f84:	2200      	movs	r2, #0
 8004f86:	0018      	movs	r0, r3
 8004f88:	f000 f94a 	bl	8005220 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004f8c:	4b0e      	ldr	r3, [pc, #56]	; (8004fc8 <HAL_InitTick+0x90>)
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	601a      	str	r2, [r3, #0]
 8004f92:	e00d      	b.n	8004fb0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8004f94:	230f      	movs	r3, #15
 8004f96:	18fb      	adds	r3, r7, r3
 8004f98:	2201      	movs	r2, #1
 8004f9a:	701a      	strb	r2, [r3, #0]
 8004f9c:	e008      	b.n	8004fb0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004f9e:	230f      	movs	r3, #15
 8004fa0:	18fb      	adds	r3, r7, r3
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	701a      	strb	r2, [r3, #0]
 8004fa6:	e003      	b.n	8004fb0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004fa8:	230f      	movs	r3, #15
 8004faa:	18fb      	adds	r3, r7, r3
 8004fac:	2201      	movs	r2, #1
 8004fae:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8004fb0:	230f      	movs	r3, #15
 8004fb2:	18fb      	adds	r3, r7, r3
 8004fb4:	781b      	ldrb	r3, [r3, #0]
}
 8004fb6:	0018      	movs	r0, r3
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	b005      	add	sp, #20
 8004fbc:	bd90      	pop	{r4, r7, pc}
 8004fbe:	46c0      	nop			; (mov r8, r8)
 8004fc0:	20000024 	.word	0x20000024
 8004fc4:	2000001c 	.word	0x2000001c
 8004fc8:	20000020 	.word	0x20000020

08004fcc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004fd0:	4b05      	ldr	r3, [pc, #20]	; (8004fe8 <HAL_IncTick+0x1c>)
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	001a      	movs	r2, r3
 8004fd6:	4b05      	ldr	r3, [pc, #20]	; (8004fec <HAL_IncTick+0x20>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	18d2      	adds	r2, r2, r3
 8004fdc:	4b03      	ldr	r3, [pc, #12]	; (8004fec <HAL_IncTick+0x20>)
 8004fde:	601a      	str	r2, [r3, #0]
}
 8004fe0:	46c0      	nop			; (mov r8, r8)
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	46c0      	nop			; (mov r8, r8)
 8004fe8:	20000024 	.word	0x20000024
 8004fec:	20000710 	.word	0x20000710

08004ff0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	af00      	add	r7, sp, #0
  return uwTick;
 8004ff4:	4b02      	ldr	r3, [pc, #8]	; (8005000 <HAL_GetTick+0x10>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
}
 8004ff8:	0018      	movs	r0, r3
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	46c0      	nop			; (mov r8, r8)
 8005000:	20000710 	.word	0x20000710

08005004 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800500c:	f7ff fff0 	bl	8004ff0 <HAL_GetTick>
 8005010:	0003      	movs	r3, r0
 8005012:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	3301      	adds	r3, #1
 800501c:	d005      	beq.n	800502a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800501e:	4b0a      	ldr	r3, [pc, #40]	; (8005048 <HAL_Delay+0x44>)
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	001a      	movs	r2, r3
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	189b      	adds	r3, r3, r2
 8005028:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800502a:	46c0      	nop			; (mov r8, r8)
 800502c:	f7ff ffe0 	bl	8004ff0 <HAL_GetTick>
 8005030:	0002      	movs	r2, r0
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	429a      	cmp	r2, r3
 800503a:	d8f7      	bhi.n	800502c <HAL_Delay+0x28>
  {
  }
}
 800503c:	46c0      	nop			; (mov r8, r8)
 800503e:	46c0      	nop			; (mov r8, r8)
 8005040:	46bd      	mov	sp, r7
 8005042:	b004      	add	sp, #16
 8005044:	bd80      	pop	{r7, pc}
 8005046:	46c0      	nop			; (mov r8, r8)
 8005048:	20000024 	.word	0x20000024

0800504c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
 8005052:	0002      	movs	r2, r0
 8005054:	1dfb      	adds	r3, r7, #7
 8005056:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005058:	1dfb      	adds	r3, r7, #7
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	2b7f      	cmp	r3, #127	; 0x7f
 800505e:	d809      	bhi.n	8005074 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005060:	1dfb      	adds	r3, r7, #7
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	001a      	movs	r2, r3
 8005066:	231f      	movs	r3, #31
 8005068:	401a      	ands	r2, r3
 800506a:	4b04      	ldr	r3, [pc, #16]	; (800507c <__NVIC_EnableIRQ+0x30>)
 800506c:	2101      	movs	r1, #1
 800506e:	4091      	lsls	r1, r2
 8005070:	000a      	movs	r2, r1
 8005072:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8005074:	46c0      	nop			; (mov r8, r8)
 8005076:	46bd      	mov	sp, r7
 8005078:	b002      	add	sp, #8
 800507a:	bd80      	pop	{r7, pc}
 800507c:	e000e100 	.word	0xe000e100

08005080 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b082      	sub	sp, #8
 8005084:	af00      	add	r7, sp, #0
 8005086:	0002      	movs	r2, r0
 8005088:	1dfb      	adds	r3, r7, #7
 800508a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800508c:	1dfb      	adds	r3, r7, #7
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	2b7f      	cmp	r3, #127	; 0x7f
 8005092:	d810      	bhi.n	80050b6 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005094:	1dfb      	adds	r3, r7, #7
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	001a      	movs	r2, r3
 800509a:	231f      	movs	r3, #31
 800509c:	4013      	ands	r3, r2
 800509e:	4908      	ldr	r1, [pc, #32]	; (80050c0 <__NVIC_DisableIRQ+0x40>)
 80050a0:	2201      	movs	r2, #1
 80050a2:	409a      	lsls	r2, r3
 80050a4:	0013      	movs	r3, r2
 80050a6:	2280      	movs	r2, #128	; 0x80
 80050a8:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80050aa:	f3bf 8f4f 	dsb	sy
}
 80050ae:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 80050b0:	f3bf 8f6f 	isb	sy
}
 80050b4:	46c0      	nop			; (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 80050b6:	46c0      	nop			; (mov r8, r8)
 80050b8:	46bd      	mov	sp, r7
 80050ba:	b002      	add	sp, #8
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	46c0      	nop			; (mov r8, r8)
 80050c0:	e000e100 	.word	0xe000e100

080050c4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	0002      	movs	r2, r0
 80050cc:	1dfb      	adds	r3, r7, #7
 80050ce:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80050d0:	1dfb      	adds	r3, r7, #7
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	2b7f      	cmp	r3, #127	; 0x7f
 80050d6:	d80a      	bhi.n	80050ee <__NVIC_ClearPendingIRQ+0x2a>
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80050d8:	1dfb      	adds	r3, r7, #7
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	001a      	movs	r2, r3
 80050de:	231f      	movs	r3, #31
 80050e0:	4013      	ands	r3, r2
 80050e2:	4905      	ldr	r1, [pc, #20]	; (80050f8 <__NVIC_ClearPendingIRQ+0x34>)
 80050e4:	2201      	movs	r2, #1
 80050e6:	409a      	lsls	r2, r3
 80050e8:	23c0      	movs	r3, #192	; 0xc0
 80050ea:	005b      	lsls	r3, r3, #1
 80050ec:	50ca      	str	r2, [r1, r3]
  }
}
 80050ee:	46c0      	nop			; (mov r8, r8)
 80050f0:	46bd      	mov	sp, r7
 80050f2:	b002      	add	sp, #8
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	46c0      	nop			; (mov r8, r8)
 80050f8:	e000e100 	.word	0xe000e100

080050fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80050fc:	b590      	push	{r4, r7, lr}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	0002      	movs	r2, r0
 8005104:	6039      	str	r1, [r7, #0]
 8005106:	1dfb      	adds	r3, r7, #7
 8005108:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800510a:	1dfb      	adds	r3, r7, #7
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	2b7f      	cmp	r3, #127	; 0x7f
 8005110:	d828      	bhi.n	8005164 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005112:	4a2f      	ldr	r2, [pc, #188]	; (80051d0 <__NVIC_SetPriority+0xd4>)
 8005114:	1dfb      	adds	r3, r7, #7
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	b25b      	sxtb	r3, r3
 800511a:	089b      	lsrs	r3, r3, #2
 800511c:	33c0      	adds	r3, #192	; 0xc0
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	589b      	ldr	r3, [r3, r2]
 8005122:	1dfa      	adds	r2, r7, #7
 8005124:	7812      	ldrb	r2, [r2, #0]
 8005126:	0011      	movs	r1, r2
 8005128:	2203      	movs	r2, #3
 800512a:	400a      	ands	r2, r1
 800512c:	00d2      	lsls	r2, r2, #3
 800512e:	21ff      	movs	r1, #255	; 0xff
 8005130:	4091      	lsls	r1, r2
 8005132:	000a      	movs	r2, r1
 8005134:	43d2      	mvns	r2, r2
 8005136:	401a      	ands	r2, r3
 8005138:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	019b      	lsls	r3, r3, #6
 800513e:	22ff      	movs	r2, #255	; 0xff
 8005140:	401a      	ands	r2, r3
 8005142:	1dfb      	adds	r3, r7, #7
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	0018      	movs	r0, r3
 8005148:	2303      	movs	r3, #3
 800514a:	4003      	ands	r3, r0
 800514c:	00db      	lsls	r3, r3, #3
 800514e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005150:	481f      	ldr	r0, [pc, #124]	; (80051d0 <__NVIC_SetPriority+0xd4>)
 8005152:	1dfb      	adds	r3, r7, #7
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	b25b      	sxtb	r3, r3
 8005158:	089b      	lsrs	r3, r3, #2
 800515a:	430a      	orrs	r2, r1
 800515c:	33c0      	adds	r3, #192	; 0xc0
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8005162:	e031      	b.n	80051c8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005164:	4a1b      	ldr	r2, [pc, #108]	; (80051d4 <__NVIC_SetPriority+0xd8>)
 8005166:	1dfb      	adds	r3, r7, #7
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	0019      	movs	r1, r3
 800516c:	230f      	movs	r3, #15
 800516e:	400b      	ands	r3, r1
 8005170:	3b08      	subs	r3, #8
 8005172:	089b      	lsrs	r3, r3, #2
 8005174:	3306      	adds	r3, #6
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	18d3      	adds	r3, r2, r3
 800517a:	3304      	adds	r3, #4
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	1dfa      	adds	r2, r7, #7
 8005180:	7812      	ldrb	r2, [r2, #0]
 8005182:	0011      	movs	r1, r2
 8005184:	2203      	movs	r2, #3
 8005186:	400a      	ands	r2, r1
 8005188:	00d2      	lsls	r2, r2, #3
 800518a:	21ff      	movs	r1, #255	; 0xff
 800518c:	4091      	lsls	r1, r2
 800518e:	000a      	movs	r2, r1
 8005190:	43d2      	mvns	r2, r2
 8005192:	401a      	ands	r2, r3
 8005194:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	019b      	lsls	r3, r3, #6
 800519a:	22ff      	movs	r2, #255	; 0xff
 800519c:	401a      	ands	r2, r3
 800519e:	1dfb      	adds	r3, r7, #7
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	0018      	movs	r0, r3
 80051a4:	2303      	movs	r3, #3
 80051a6:	4003      	ands	r3, r0
 80051a8:	00db      	lsls	r3, r3, #3
 80051aa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80051ac:	4809      	ldr	r0, [pc, #36]	; (80051d4 <__NVIC_SetPriority+0xd8>)
 80051ae:	1dfb      	adds	r3, r7, #7
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	001c      	movs	r4, r3
 80051b4:	230f      	movs	r3, #15
 80051b6:	4023      	ands	r3, r4
 80051b8:	3b08      	subs	r3, #8
 80051ba:	089b      	lsrs	r3, r3, #2
 80051bc:	430a      	orrs	r2, r1
 80051be:	3306      	adds	r3, #6
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	18c3      	adds	r3, r0, r3
 80051c4:	3304      	adds	r3, #4
 80051c6:	601a      	str	r2, [r3, #0]
}
 80051c8:	46c0      	nop			; (mov r8, r8)
 80051ca:	46bd      	mov	sp, r7
 80051cc:	b003      	add	sp, #12
 80051ce:	bd90      	pop	{r4, r7, pc}
 80051d0:	e000e100 	.word	0xe000e100
 80051d4:	e000ed00 	.word	0xe000ed00

080051d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	1e5a      	subs	r2, r3, #1
 80051e4:	2380      	movs	r3, #128	; 0x80
 80051e6:	045b      	lsls	r3, r3, #17
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d301      	bcc.n	80051f0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80051ec:	2301      	movs	r3, #1
 80051ee:	e010      	b.n	8005212 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80051f0:	4b0a      	ldr	r3, [pc, #40]	; (800521c <SysTick_Config+0x44>)
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	3a01      	subs	r2, #1
 80051f6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80051f8:	2301      	movs	r3, #1
 80051fa:	425b      	negs	r3, r3
 80051fc:	2103      	movs	r1, #3
 80051fe:	0018      	movs	r0, r3
 8005200:	f7ff ff7c 	bl	80050fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005204:	4b05      	ldr	r3, [pc, #20]	; (800521c <SysTick_Config+0x44>)
 8005206:	2200      	movs	r2, #0
 8005208:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800520a:	4b04      	ldr	r3, [pc, #16]	; (800521c <SysTick_Config+0x44>)
 800520c:	2207      	movs	r2, #7
 800520e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005210:	2300      	movs	r3, #0
}
 8005212:	0018      	movs	r0, r3
 8005214:	46bd      	mov	sp, r7
 8005216:	b002      	add	sp, #8
 8005218:	bd80      	pop	{r7, pc}
 800521a:	46c0      	nop			; (mov r8, r8)
 800521c:	e000e010 	.word	0xe000e010

08005220 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	60b9      	str	r1, [r7, #8]
 8005228:	607a      	str	r2, [r7, #4]
 800522a:	210f      	movs	r1, #15
 800522c:	187b      	adds	r3, r7, r1
 800522e:	1c02      	adds	r2, r0, #0
 8005230:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8005232:	68ba      	ldr	r2, [r7, #8]
 8005234:	187b      	adds	r3, r7, r1
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	b25b      	sxtb	r3, r3
 800523a:	0011      	movs	r1, r2
 800523c:	0018      	movs	r0, r3
 800523e:	f7ff ff5d 	bl	80050fc <__NVIC_SetPriority>
}
 8005242:	46c0      	nop			; (mov r8, r8)
 8005244:	46bd      	mov	sp, r7
 8005246:	b004      	add	sp, #16
 8005248:	bd80      	pop	{r7, pc}

0800524a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800524a:	b580      	push	{r7, lr}
 800524c:	b082      	sub	sp, #8
 800524e:	af00      	add	r7, sp, #0
 8005250:	0002      	movs	r2, r0
 8005252:	1dfb      	adds	r3, r7, #7
 8005254:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005256:	1dfb      	adds	r3, r7, #7
 8005258:	781b      	ldrb	r3, [r3, #0]
 800525a:	b25b      	sxtb	r3, r3
 800525c:	0018      	movs	r0, r3
 800525e:	f7ff fef5 	bl	800504c <__NVIC_EnableIRQ>
}
 8005262:	46c0      	nop			; (mov r8, r8)
 8005264:	46bd      	mov	sp, r7
 8005266:	b002      	add	sp, #8
 8005268:	bd80      	pop	{r7, pc}

0800526a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800526a:	b580      	push	{r7, lr}
 800526c:	b082      	sub	sp, #8
 800526e:	af00      	add	r7, sp, #0
 8005270:	0002      	movs	r2, r0
 8005272:	1dfb      	adds	r3, r7, #7
 8005274:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005276:	1dfb      	adds	r3, r7, #7
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	b25b      	sxtb	r3, r3
 800527c:	0018      	movs	r0, r3
 800527e:	f7ff feff 	bl	8005080 <__NVIC_DisableIRQ>
}
 8005282:	46c0      	nop			; (mov r8, r8)
 8005284:	46bd      	mov	sp, r7
 8005286:	b002      	add	sp, #8
 8005288:	bd80      	pop	{r7, pc}

0800528a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800528a:	b580      	push	{r7, lr}
 800528c:	b082      	sub	sp, #8
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	0018      	movs	r0, r3
 8005296:	f7ff ff9f 	bl	80051d8 <SysTick_Config>
 800529a:	0003      	movs	r3, r0
}
 800529c:	0018      	movs	r0, r3
 800529e:	46bd      	mov	sp, r7
 80052a0:	b002      	add	sp, #8
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	0002      	movs	r2, r0
 80052ac:	1dfb      	adds	r3, r7, #7
 80052ae:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80052b0:	1dfb      	adds	r3, r7, #7
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	b25b      	sxtb	r3, r3
 80052b6:	0018      	movs	r0, r3
 80052b8:	f7ff ff04 	bl	80050c4 <__NVIC_ClearPendingIRQ>
}
 80052bc:	46c0      	nop			; (mov r8, r8)
 80052be:	46bd      	mov	sp, r7
 80052c0:	b002      	add	sp, #8
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b086      	sub	sp, #24
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80052ce:	2300      	movs	r3, #0
 80052d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80052d2:	e147      	b.n	8005564 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2101      	movs	r1, #1
 80052da:	697a      	ldr	r2, [r7, #20]
 80052dc:	4091      	lsls	r1, r2
 80052de:	000a      	movs	r2, r1
 80052e0:	4013      	ands	r3, r2
 80052e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d100      	bne.n	80052ec <HAL_GPIO_Init+0x28>
 80052ea:	e138      	b.n	800555e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	2203      	movs	r2, #3
 80052f2:	4013      	ands	r3, r2
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d005      	beq.n	8005304 <HAL_GPIO_Init+0x40>
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	2203      	movs	r2, #3
 80052fe:	4013      	ands	r3, r2
 8005300:	2b02      	cmp	r3, #2
 8005302:	d130      	bne.n	8005366 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	005b      	lsls	r3, r3, #1
 800530e:	2203      	movs	r2, #3
 8005310:	409a      	lsls	r2, r3
 8005312:	0013      	movs	r3, r2
 8005314:	43da      	mvns	r2, r3
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	4013      	ands	r3, r2
 800531a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	68da      	ldr	r2, [r3, #12]
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	005b      	lsls	r3, r3, #1
 8005324:	409a      	lsls	r2, r3
 8005326:	0013      	movs	r3, r2
 8005328:	693a      	ldr	r2, [r7, #16]
 800532a:	4313      	orrs	r3, r2
 800532c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	693a      	ldr	r2, [r7, #16]
 8005332:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800533a:	2201      	movs	r2, #1
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	409a      	lsls	r2, r3
 8005340:	0013      	movs	r3, r2
 8005342:	43da      	mvns	r2, r3
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	4013      	ands	r3, r2
 8005348:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	091b      	lsrs	r3, r3, #4
 8005350:	2201      	movs	r2, #1
 8005352:	401a      	ands	r2, r3
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	409a      	lsls	r2, r3
 8005358:	0013      	movs	r3, r2
 800535a:	693a      	ldr	r2, [r7, #16]
 800535c:	4313      	orrs	r3, r2
 800535e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	693a      	ldr	r2, [r7, #16]
 8005364:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	2203      	movs	r2, #3
 800536c:	4013      	ands	r3, r2
 800536e:	2b03      	cmp	r3, #3
 8005370:	d017      	beq.n	80053a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	005b      	lsls	r3, r3, #1
 800537c:	2203      	movs	r2, #3
 800537e:	409a      	lsls	r2, r3
 8005380:	0013      	movs	r3, r2
 8005382:	43da      	mvns	r2, r3
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	4013      	ands	r3, r2
 8005388:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	689a      	ldr	r2, [r3, #8]
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	005b      	lsls	r3, r3, #1
 8005392:	409a      	lsls	r2, r3
 8005394:	0013      	movs	r3, r2
 8005396:	693a      	ldr	r2, [r7, #16]
 8005398:	4313      	orrs	r3, r2
 800539a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	693a      	ldr	r2, [r7, #16]
 80053a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	2203      	movs	r2, #3
 80053a8:	4013      	ands	r3, r2
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d123      	bne.n	80053f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	08da      	lsrs	r2, r3, #3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	3208      	adds	r2, #8
 80053b6:	0092      	lsls	r2, r2, #2
 80053b8:	58d3      	ldr	r3, [r2, r3]
 80053ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	2207      	movs	r2, #7
 80053c0:	4013      	ands	r3, r2
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	220f      	movs	r2, #15
 80053c6:	409a      	lsls	r2, r3
 80053c8:	0013      	movs	r3, r2
 80053ca:	43da      	mvns	r2, r3
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	4013      	ands	r3, r2
 80053d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	691a      	ldr	r2, [r3, #16]
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	2107      	movs	r1, #7
 80053da:	400b      	ands	r3, r1
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	409a      	lsls	r2, r3
 80053e0:	0013      	movs	r3, r2
 80053e2:	693a      	ldr	r2, [r7, #16]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	08da      	lsrs	r2, r3, #3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	3208      	adds	r2, #8
 80053f0:	0092      	lsls	r2, r2, #2
 80053f2:	6939      	ldr	r1, [r7, #16]
 80053f4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	005b      	lsls	r3, r3, #1
 8005400:	2203      	movs	r2, #3
 8005402:	409a      	lsls	r2, r3
 8005404:	0013      	movs	r3, r2
 8005406:	43da      	mvns	r2, r3
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	4013      	ands	r3, r2
 800540c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	2203      	movs	r2, #3
 8005414:	401a      	ands	r2, r3
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	005b      	lsls	r3, r3, #1
 800541a:	409a      	lsls	r2, r3
 800541c:	0013      	movs	r3, r2
 800541e:	693a      	ldr	r2, [r7, #16]
 8005420:	4313      	orrs	r3, r2
 8005422:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	693a      	ldr	r2, [r7, #16]
 8005428:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	685a      	ldr	r2, [r3, #4]
 800542e:	23c0      	movs	r3, #192	; 0xc0
 8005430:	029b      	lsls	r3, r3, #10
 8005432:	4013      	ands	r3, r2
 8005434:	d100      	bne.n	8005438 <HAL_GPIO_Init+0x174>
 8005436:	e092      	b.n	800555e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8005438:	4a50      	ldr	r2, [pc, #320]	; (800557c <HAL_GPIO_Init+0x2b8>)
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	089b      	lsrs	r3, r3, #2
 800543e:	3318      	adds	r3, #24
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	589b      	ldr	r3, [r3, r2]
 8005444:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	2203      	movs	r2, #3
 800544a:	4013      	ands	r3, r2
 800544c:	00db      	lsls	r3, r3, #3
 800544e:	220f      	movs	r2, #15
 8005450:	409a      	lsls	r2, r3
 8005452:	0013      	movs	r3, r2
 8005454:	43da      	mvns	r2, r3
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	4013      	ands	r3, r2
 800545a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	23a0      	movs	r3, #160	; 0xa0
 8005460:	05db      	lsls	r3, r3, #23
 8005462:	429a      	cmp	r2, r3
 8005464:	d013      	beq.n	800548e <HAL_GPIO_Init+0x1ca>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a45      	ldr	r2, [pc, #276]	; (8005580 <HAL_GPIO_Init+0x2bc>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d00d      	beq.n	800548a <HAL_GPIO_Init+0x1c6>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a44      	ldr	r2, [pc, #272]	; (8005584 <HAL_GPIO_Init+0x2c0>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d007      	beq.n	8005486 <HAL_GPIO_Init+0x1c2>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a43      	ldr	r2, [pc, #268]	; (8005588 <HAL_GPIO_Init+0x2c4>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d101      	bne.n	8005482 <HAL_GPIO_Init+0x1be>
 800547e:	2303      	movs	r3, #3
 8005480:	e006      	b.n	8005490 <HAL_GPIO_Init+0x1cc>
 8005482:	2305      	movs	r3, #5
 8005484:	e004      	b.n	8005490 <HAL_GPIO_Init+0x1cc>
 8005486:	2302      	movs	r3, #2
 8005488:	e002      	b.n	8005490 <HAL_GPIO_Init+0x1cc>
 800548a:	2301      	movs	r3, #1
 800548c:	e000      	b.n	8005490 <HAL_GPIO_Init+0x1cc>
 800548e:	2300      	movs	r3, #0
 8005490:	697a      	ldr	r2, [r7, #20]
 8005492:	2103      	movs	r1, #3
 8005494:	400a      	ands	r2, r1
 8005496:	00d2      	lsls	r2, r2, #3
 8005498:	4093      	lsls	r3, r2
 800549a:	693a      	ldr	r2, [r7, #16]
 800549c:	4313      	orrs	r3, r2
 800549e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80054a0:	4936      	ldr	r1, [pc, #216]	; (800557c <HAL_GPIO_Init+0x2b8>)
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	089b      	lsrs	r3, r3, #2
 80054a6:	3318      	adds	r3, #24
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	693a      	ldr	r2, [r7, #16]
 80054ac:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80054ae:	4b33      	ldr	r3, [pc, #204]	; (800557c <HAL_GPIO_Init+0x2b8>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	43da      	mvns	r2, r3
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	4013      	ands	r3, r2
 80054bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	685a      	ldr	r2, [r3, #4]
 80054c2:	2380      	movs	r3, #128	; 0x80
 80054c4:	035b      	lsls	r3, r3, #13
 80054c6:	4013      	ands	r3, r2
 80054c8:	d003      	beq.n	80054d2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80054ca:	693a      	ldr	r2, [r7, #16]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80054d2:	4b2a      	ldr	r3, [pc, #168]	; (800557c <HAL_GPIO_Init+0x2b8>)
 80054d4:	693a      	ldr	r2, [r7, #16]
 80054d6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80054d8:	4b28      	ldr	r3, [pc, #160]	; (800557c <HAL_GPIO_Init+0x2b8>)
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	43da      	mvns	r2, r3
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	4013      	ands	r3, r2
 80054e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	685a      	ldr	r2, [r3, #4]
 80054ec:	2380      	movs	r3, #128	; 0x80
 80054ee:	039b      	lsls	r3, r3, #14
 80054f0:	4013      	ands	r3, r2
 80054f2:	d003      	beq.n	80054fc <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80054f4:	693a      	ldr	r2, [r7, #16]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80054fc:	4b1f      	ldr	r3, [pc, #124]	; (800557c <HAL_GPIO_Init+0x2b8>)
 80054fe:	693a      	ldr	r2, [r7, #16]
 8005500:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005502:	4a1e      	ldr	r2, [pc, #120]	; (800557c <HAL_GPIO_Init+0x2b8>)
 8005504:	2384      	movs	r3, #132	; 0x84
 8005506:	58d3      	ldr	r3, [r2, r3]
 8005508:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	43da      	mvns	r2, r3
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	4013      	ands	r3, r2
 8005512:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	685a      	ldr	r2, [r3, #4]
 8005518:	2380      	movs	r3, #128	; 0x80
 800551a:	029b      	lsls	r3, r3, #10
 800551c:	4013      	ands	r3, r2
 800551e:	d003      	beq.n	8005528 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8005520:	693a      	ldr	r2, [r7, #16]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	4313      	orrs	r3, r2
 8005526:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005528:	4914      	ldr	r1, [pc, #80]	; (800557c <HAL_GPIO_Init+0x2b8>)
 800552a:	2284      	movs	r2, #132	; 0x84
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8005530:	4a12      	ldr	r2, [pc, #72]	; (800557c <HAL_GPIO_Init+0x2b8>)
 8005532:	2380      	movs	r3, #128	; 0x80
 8005534:	58d3      	ldr	r3, [r2, r3]
 8005536:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	43da      	mvns	r2, r3
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	4013      	ands	r3, r2
 8005540:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	685a      	ldr	r2, [r3, #4]
 8005546:	2380      	movs	r3, #128	; 0x80
 8005548:	025b      	lsls	r3, r3, #9
 800554a:	4013      	ands	r3, r2
 800554c:	d003      	beq.n	8005556 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800554e:	693a      	ldr	r2, [r7, #16]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	4313      	orrs	r3, r2
 8005554:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005556:	4909      	ldr	r1, [pc, #36]	; (800557c <HAL_GPIO_Init+0x2b8>)
 8005558:	2280      	movs	r2, #128	; 0x80
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	3301      	adds	r3, #1
 8005562:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	40da      	lsrs	r2, r3
 800556c:	1e13      	subs	r3, r2, #0
 800556e:	d000      	beq.n	8005572 <HAL_GPIO_Init+0x2ae>
 8005570:	e6b0      	b.n	80052d4 <HAL_GPIO_Init+0x10>
  }
}
 8005572:	46c0      	nop			; (mov r8, r8)
 8005574:	46c0      	nop			; (mov r8, r8)
 8005576:	46bd      	mov	sp, r7
 8005578:	b006      	add	sp, #24
 800557a:	bd80      	pop	{r7, pc}
 800557c:	40021800 	.word	0x40021800
 8005580:	50000400 	.word	0x50000400
 8005584:	50000800 	.word	0x50000800
 8005588:	50000c00 	.word	0x50000c00

0800558c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	000a      	movs	r2, r1
 8005596:	1cbb      	adds	r3, r7, #2
 8005598:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	1cba      	adds	r2, r7, #2
 80055a0:	8812      	ldrh	r2, [r2, #0]
 80055a2:	4013      	ands	r3, r2
 80055a4:	d004      	beq.n	80055b0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80055a6:	230f      	movs	r3, #15
 80055a8:	18fb      	adds	r3, r7, r3
 80055aa:	2201      	movs	r2, #1
 80055ac:	701a      	strb	r2, [r3, #0]
 80055ae:	e003      	b.n	80055b8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80055b0:	230f      	movs	r3, #15
 80055b2:	18fb      	adds	r3, r7, r3
 80055b4:	2200      	movs	r2, #0
 80055b6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80055b8:	230f      	movs	r3, #15
 80055ba:	18fb      	adds	r3, r7, r3
 80055bc:	781b      	ldrb	r3, [r3, #0]
}
 80055be:	0018      	movs	r0, r3
 80055c0:	46bd      	mov	sp, r7
 80055c2:	b004      	add	sp, #16
 80055c4:	bd80      	pop	{r7, pc}

080055c6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80055c6:	b580      	push	{r7, lr}
 80055c8:	b082      	sub	sp, #8
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
 80055ce:	0008      	movs	r0, r1
 80055d0:	0011      	movs	r1, r2
 80055d2:	1cbb      	adds	r3, r7, #2
 80055d4:	1c02      	adds	r2, r0, #0
 80055d6:	801a      	strh	r2, [r3, #0]
 80055d8:	1c7b      	adds	r3, r7, #1
 80055da:	1c0a      	adds	r2, r1, #0
 80055dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80055de:	1c7b      	adds	r3, r7, #1
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d004      	beq.n	80055f0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80055e6:	1cbb      	adds	r3, r7, #2
 80055e8:	881a      	ldrh	r2, [r3, #0]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80055ee:	e003      	b.n	80055f8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80055f0:	1cbb      	adds	r3, r7, #2
 80055f2:	881a      	ldrh	r2, [r3, #0]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80055f8:	46c0      	nop			; (mov r8, r8)
 80055fa:	46bd      	mov	sp, r7
 80055fc:	b002      	add	sp, #8
 80055fe:	bd80      	pop	{r7, pc}

08005600 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b082      	sub	sp, #8
 8005604:	af00      	add	r7, sp, #0
 8005606:	0002      	movs	r2, r0
 8005608:	1dbb      	adds	r3, r7, #6
 800560a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 800560c:	4b10      	ldr	r3, [pc, #64]	; (8005650 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	1dba      	adds	r2, r7, #6
 8005612:	8812      	ldrh	r2, [r2, #0]
 8005614:	4013      	ands	r3, r2
 8005616:	d008      	beq.n	800562a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8005618:	4b0d      	ldr	r3, [pc, #52]	; (8005650 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800561a:	1dba      	adds	r2, r7, #6
 800561c:	8812      	ldrh	r2, [r2, #0]
 800561e:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8005620:	1dbb      	adds	r3, r7, #6
 8005622:	881b      	ldrh	r3, [r3, #0]
 8005624:	0018      	movs	r0, r3
 8005626:	f7fe fe83 	bl	8004330 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800562a:	4b09      	ldr	r3, [pc, #36]	; (8005650 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	1dba      	adds	r2, r7, #6
 8005630:	8812      	ldrh	r2, [r2, #0]
 8005632:	4013      	ands	r3, r2
 8005634:	d008      	beq.n	8005648 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8005636:	4b06      	ldr	r3, [pc, #24]	; (8005650 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8005638:	1dba      	adds	r2, r7, #6
 800563a:	8812      	ldrh	r2, [r2, #0]
 800563c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800563e:	1dbb      	adds	r3, r7, #6
 8005640:	881b      	ldrh	r3, [r3, #0]
 8005642:	0018      	movs	r0, r3
 8005644:	f7fe fe7e 	bl	8004344 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8005648:	46c0      	nop			; (mov r8, r8)
 800564a:	46bd      	mov	sp, r7
 800564c:	b002      	add	sp, #8
 800564e:	bd80      	pop	{r7, pc}
 8005650:	40021800 	.word	0x40021800

08005654 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b082      	sub	sp, #8
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d101      	bne.n	8005666 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e08f      	b.n	8005786 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2241      	movs	r2, #65	; 0x41
 800566a:	5c9b      	ldrb	r3, [r3, r2]
 800566c:	b2db      	uxtb	r3, r3
 800566e:	2b00      	cmp	r3, #0
 8005670:	d107      	bne.n	8005682 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2240      	movs	r2, #64	; 0x40
 8005676:	2100      	movs	r1, #0
 8005678:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	0018      	movs	r0, r3
 800567e:	f7ff f873 	bl	8004768 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2241      	movs	r2, #65	; 0x41
 8005686:	2124      	movs	r1, #36	; 0x24
 8005688:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2101      	movs	r1, #1
 8005696:	438a      	bics	r2, r1
 8005698:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	685a      	ldr	r2, [r3, #4]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	493b      	ldr	r1, [pc, #236]	; (8005790 <HAL_I2C_Init+0x13c>)
 80056a4:	400a      	ands	r2, r1
 80056a6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	689a      	ldr	r2, [r3, #8]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4938      	ldr	r1, [pc, #224]	; (8005794 <HAL_I2C_Init+0x140>)
 80056b4:	400a      	ands	r2, r1
 80056b6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d108      	bne.n	80056d2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	689a      	ldr	r2, [r3, #8]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2180      	movs	r1, #128	; 0x80
 80056ca:	0209      	lsls	r1, r1, #8
 80056cc:	430a      	orrs	r2, r1
 80056ce:	609a      	str	r2, [r3, #8]
 80056d0:	e007      	b.n	80056e2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	689a      	ldr	r2, [r3, #8]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2184      	movs	r1, #132	; 0x84
 80056dc:	0209      	lsls	r1, r1, #8
 80056de:	430a      	orrs	r2, r1
 80056e0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d109      	bne.n	80056fe <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	685a      	ldr	r2, [r3, #4]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2180      	movs	r1, #128	; 0x80
 80056f6:	0109      	lsls	r1, r1, #4
 80056f8:	430a      	orrs	r2, r1
 80056fa:	605a      	str	r2, [r3, #4]
 80056fc:	e007      	b.n	800570e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	685a      	ldr	r2, [r3, #4]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4923      	ldr	r1, [pc, #140]	; (8005798 <HAL_I2C_Init+0x144>)
 800570a:	400a      	ands	r2, r1
 800570c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	685a      	ldr	r2, [r3, #4]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4920      	ldr	r1, [pc, #128]	; (800579c <HAL_I2C_Init+0x148>)
 800571a:	430a      	orrs	r2, r1
 800571c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68da      	ldr	r2, [r3, #12]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	491a      	ldr	r1, [pc, #104]	; (8005794 <HAL_I2C_Init+0x140>)
 800572a:	400a      	ands	r2, r1
 800572c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	691a      	ldr	r2, [r3, #16]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	695b      	ldr	r3, [r3, #20]
 8005736:	431a      	orrs	r2, r3
 8005738:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	430a      	orrs	r2, r1
 8005746:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	69d9      	ldr	r1, [r3, #28]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6a1a      	ldr	r2, [r3, #32]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	430a      	orrs	r2, r1
 8005756:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2101      	movs	r1, #1
 8005764:	430a      	orrs	r2, r1
 8005766:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2241      	movs	r2, #65	; 0x41
 8005772:	2120      	movs	r1, #32
 8005774:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2242      	movs	r2, #66	; 0x42
 8005780:	2100      	movs	r1, #0
 8005782:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005784:	2300      	movs	r3, #0
}
 8005786:	0018      	movs	r0, r3
 8005788:	46bd      	mov	sp, r7
 800578a:	b002      	add	sp, #8
 800578c:	bd80      	pop	{r7, pc}
 800578e:	46c0      	nop			; (mov r8, r8)
 8005790:	f0ffffff 	.word	0xf0ffffff
 8005794:	ffff7fff 	.word	0xffff7fff
 8005798:	fffff7ff 	.word	0xfffff7ff
 800579c:	02008000 	.word	0x02008000

080057a0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057a0:	b590      	push	{r4, r7, lr}
 80057a2:	b089      	sub	sp, #36	; 0x24
 80057a4:	af02      	add	r7, sp, #8
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	000c      	movs	r4, r1
 80057aa:	0010      	movs	r0, r2
 80057ac:	0019      	movs	r1, r3
 80057ae:	230a      	movs	r3, #10
 80057b0:	18fb      	adds	r3, r7, r3
 80057b2:	1c22      	adds	r2, r4, #0
 80057b4:	801a      	strh	r2, [r3, #0]
 80057b6:	2308      	movs	r3, #8
 80057b8:	18fb      	adds	r3, r7, r3
 80057ba:	1c02      	adds	r2, r0, #0
 80057bc:	801a      	strh	r2, [r3, #0]
 80057be:	1dbb      	adds	r3, r7, #6
 80057c0:	1c0a      	adds	r2, r1, #0
 80057c2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2241      	movs	r2, #65	; 0x41
 80057c8:	5c9b      	ldrb	r3, [r3, r2]
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	2b20      	cmp	r3, #32
 80057ce:	d000      	beq.n	80057d2 <HAL_I2C_Mem_Write+0x32>
 80057d0:	e10c      	b.n	80059ec <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80057d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d004      	beq.n	80057e2 <HAL_I2C_Mem_Write+0x42>
 80057d8:	232c      	movs	r3, #44	; 0x2c
 80057da:	18fb      	adds	r3, r7, r3
 80057dc:	881b      	ldrh	r3, [r3, #0]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d105      	bne.n	80057ee <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2280      	movs	r2, #128	; 0x80
 80057e6:	0092      	lsls	r2, r2, #2
 80057e8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e0ff      	b.n	80059ee <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2240      	movs	r2, #64	; 0x40
 80057f2:	5c9b      	ldrb	r3, [r3, r2]
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d101      	bne.n	80057fc <HAL_I2C_Mem_Write+0x5c>
 80057f8:	2302      	movs	r3, #2
 80057fa:	e0f8      	b.n	80059ee <HAL_I2C_Mem_Write+0x24e>
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2240      	movs	r2, #64	; 0x40
 8005800:	2101      	movs	r1, #1
 8005802:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005804:	f7ff fbf4 	bl	8004ff0 <HAL_GetTick>
 8005808:	0003      	movs	r3, r0
 800580a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800580c:	2380      	movs	r3, #128	; 0x80
 800580e:	0219      	lsls	r1, r3, #8
 8005810:	68f8      	ldr	r0, [r7, #12]
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	9300      	str	r3, [sp, #0]
 8005816:	2319      	movs	r3, #25
 8005818:	2201      	movs	r2, #1
 800581a:	f000 fb0b 	bl	8005e34 <I2C_WaitOnFlagUntilTimeout>
 800581e:	1e03      	subs	r3, r0, #0
 8005820:	d001      	beq.n	8005826 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e0e3      	b.n	80059ee <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2241      	movs	r2, #65	; 0x41
 800582a:	2121      	movs	r1, #33	; 0x21
 800582c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2242      	movs	r2, #66	; 0x42
 8005832:	2140      	movs	r1, #64	; 0x40
 8005834:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2200      	movs	r2, #0
 800583a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005840:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	222c      	movs	r2, #44	; 0x2c
 8005846:	18ba      	adds	r2, r7, r2
 8005848:	8812      	ldrh	r2, [r2, #0]
 800584a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2200      	movs	r2, #0
 8005850:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005852:	1dbb      	adds	r3, r7, #6
 8005854:	881c      	ldrh	r4, [r3, #0]
 8005856:	2308      	movs	r3, #8
 8005858:	18fb      	adds	r3, r7, r3
 800585a:	881a      	ldrh	r2, [r3, #0]
 800585c:	230a      	movs	r3, #10
 800585e:	18fb      	adds	r3, r7, r3
 8005860:	8819      	ldrh	r1, [r3, #0]
 8005862:	68f8      	ldr	r0, [r7, #12]
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	9301      	str	r3, [sp, #4]
 8005868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800586a:	9300      	str	r3, [sp, #0]
 800586c:	0023      	movs	r3, r4
 800586e:	f000 f9f9 	bl	8005c64 <I2C_RequestMemoryWrite>
 8005872:	1e03      	subs	r3, r0, #0
 8005874:	d005      	beq.n	8005882 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2240      	movs	r2, #64	; 0x40
 800587a:	2100      	movs	r1, #0
 800587c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e0b5      	b.n	80059ee <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005886:	b29b      	uxth	r3, r3
 8005888:	2bff      	cmp	r3, #255	; 0xff
 800588a:	d911      	bls.n	80058b0 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	22ff      	movs	r2, #255	; 0xff
 8005890:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005896:	b2da      	uxtb	r2, r3
 8005898:	2380      	movs	r3, #128	; 0x80
 800589a:	045c      	lsls	r4, r3, #17
 800589c:	230a      	movs	r3, #10
 800589e:	18fb      	adds	r3, r7, r3
 80058a0:	8819      	ldrh	r1, [r3, #0]
 80058a2:	68f8      	ldr	r0, [r7, #12]
 80058a4:	2300      	movs	r3, #0
 80058a6:	9300      	str	r3, [sp, #0]
 80058a8:	0023      	movs	r3, r4
 80058aa:	f000 fca5 	bl	80061f8 <I2C_TransferConfig>
 80058ae:	e012      	b.n	80058d6 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058b4:	b29a      	uxth	r2, r3
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058be:	b2da      	uxtb	r2, r3
 80058c0:	2380      	movs	r3, #128	; 0x80
 80058c2:	049c      	lsls	r4, r3, #18
 80058c4:	230a      	movs	r3, #10
 80058c6:	18fb      	adds	r3, r7, r3
 80058c8:	8819      	ldrh	r1, [r3, #0]
 80058ca:	68f8      	ldr	r0, [r7, #12]
 80058cc:	2300      	movs	r3, #0
 80058ce:	9300      	str	r3, [sp, #0]
 80058d0:	0023      	movs	r3, r4
 80058d2:	f000 fc91 	bl	80061f8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058d6:	697a      	ldr	r2, [r7, #20]
 80058d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	0018      	movs	r0, r3
 80058de:	f000 fb01 	bl	8005ee4 <I2C_WaitOnTXISFlagUntilTimeout>
 80058e2:	1e03      	subs	r3, r0, #0
 80058e4:	d001      	beq.n	80058ea <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e081      	b.n	80059ee <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ee:	781a      	ldrb	r2, [r3, #0]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fa:	1c5a      	adds	r2, r3, #1
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005904:	b29b      	uxth	r3, r3
 8005906:	3b01      	subs	r3, #1
 8005908:	b29a      	uxth	r2, r3
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005912:	3b01      	subs	r3, #1
 8005914:	b29a      	uxth	r2, r3
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800591e:	b29b      	uxth	r3, r3
 8005920:	2b00      	cmp	r3, #0
 8005922:	d03a      	beq.n	800599a <HAL_I2C_Mem_Write+0x1fa>
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005928:	2b00      	cmp	r3, #0
 800592a:	d136      	bne.n	800599a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800592c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800592e:	68f8      	ldr	r0, [r7, #12]
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	9300      	str	r3, [sp, #0]
 8005934:	0013      	movs	r3, r2
 8005936:	2200      	movs	r2, #0
 8005938:	2180      	movs	r1, #128	; 0x80
 800593a:	f000 fa7b 	bl	8005e34 <I2C_WaitOnFlagUntilTimeout>
 800593e:	1e03      	subs	r3, r0, #0
 8005940:	d001      	beq.n	8005946 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e053      	b.n	80059ee <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800594a:	b29b      	uxth	r3, r3
 800594c:	2bff      	cmp	r3, #255	; 0xff
 800594e:	d911      	bls.n	8005974 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	22ff      	movs	r2, #255	; 0xff
 8005954:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800595a:	b2da      	uxtb	r2, r3
 800595c:	2380      	movs	r3, #128	; 0x80
 800595e:	045c      	lsls	r4, r3, #17
 8005960:	230a      	movs	r3, #10
 8005962:	18fb      	adds	r3, r7, r3
 8005964:	8819      	ldrh	r1, [r3, #0]
 8005966:	68f8      	ldr	r0, [r7, #12]
 8005968:	2300      	movs	r3, #0
 800596a:	9300      	str	r3, [sp, #0]
 800596c:	0023      	movs	r3, r4
 800596e:	f000 fc43 	bl	80061f8 <I2C_TransferConfig>
 8005972:	e012      	b.n	800599a <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005978:	b29a      	uxth	r2, r3
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005982:	b2da      	uxtb	r2, r3
 8005984:	2380      	movs	r3, #128	; 0x80
 8005986:	049c      	lsls	r4, r3, #18
 8005988:	230a      	movs	r3, #10
 800598a:	18fb      	adds	r3, r7, r3
 800598c:	8819      	ldrh	r1, [r3, #0]
 800598e:	68f8      	ldr	r0, [r7, #12]
 8005990:	2300      	movs	r3, #0
 8005992:	9300      	str	r3, [sp, #0]
 8005994:	0023      	movs	r3, r4
 8005996:	f000 fc2f 	bl	80061f8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800599e:	b29b      	uxth	r3, r3
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d198      	bne.n	80058d6 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059a4:	697a      	ldr	r2, [r7, #20]
 80059a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	0018      	movs	r0, r3
 80059ac:	f000 fae0 	bl	8005f70 <I2C_WaitOnSTOPFlagUntilTimeout>
 80059b0:	1e03      	subs	r3, r0, #0
 80059b2:	d001      	beq.n	80059b8 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e01a      	b.n	80059ee <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2220      	movs	r2, #32
 80059be:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	685a      	ldr	r2, [r3, #4]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	490b      	ldr	r1, [pc, #44]	; (80059f8 <HAL_I2C_Mem_Write+0x258>)
 80059cc:	400a      	ands	r2, r1
 80059ce:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2241      	movs	r2, #65	; 0x41
 80059d4:	2120      	movs	r1, #32
 80059d6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2242      	movs	r2, #66	; 0x42
 80059dc:	2100      	movs	r1, #0
 80059de:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2240      	movs	r2, #64	; 0x40
 80059e4:	2100      	movs	r1, #0
 80059e6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80059e8:	2300      	movs	r3, #0
 80059ea:	e000      	b.n	80059ee <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80059ec:	2302      	movs	r3, #2
  }
}
 80059ee:	0018      	movs	r0, r3
 80059f0:	46bd      	mov	sp, r7
 80059f2:	b007      	add	sp, #28
 80059f4:	bd90      	pop	{r4, r7, pc}
 80059f6:	46c0      	nop			; (mov r8, r8)
 80059f8:	fe00e800 	.word	0xfe00e800

080059fc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059fc:	b590      	push	{r4, r7, lr}
 80059fe:	b089      	sub	sp, #36	; 0x24
 8005a00:	af02      	add	r7, sp, #8
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	000c      	movs	r4, r1
 8005a06:	0010      	movs	r0, r2
 8005a08:	0019      	movs	r1, r3
 8005a0a:	230a      	movs	r3, #10
 8005a0c:	18fb      	adds	r3, r7, r3
 8005a0e:	1c22      	adds	r2, r4, #0
 8005a10:	801a      	strh	r2, [r3, #0]
 8005a12:	2308      	movs	r3, #8
 8005a14:	18fb      	adds	r3, r7, r3
 8005a16:	1c02      	adds	r2, r0, #0
 8005a18:	801a      	strh	r2, [r3, #0]
 8005a1a:	1dbb      	adds	r3, r7, #6
 8005a1c:	1c0a      	adds	r2, r1, #0
 8005a1e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2241      	movs	r2, #65	; 0x41
 8005a24:	5c9b      	ldrb	r3, [r3, r2]
 8005a26:	b2db      	uxtb	r3, r3
 8005a28:	2b20      	cmp	r3, #32
 8005a2a:	d000      	beq.n	8005a2e <HAL_I2C_Mem_Read+0x32>
 8005a2c:	e110      	b.n	8005c50 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d004      	beq.n	8005a3e <HAL_I2C_Mem_Read+0x42>
 8005a34:	232c      	movs	r3, #44	; 0x2c
 8005a36:	18fb      	adds	r3, r7, r3
 8005a38:	881b      	ldrh	r3, [r3, #0]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d105      	bne.n	8005a4a <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2280      	movs	r2, #128	; 0x80
 8005a42:	0092      	lsls	r2, r2, #2
 8005a44:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e103      	b.n	8005c52 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2240      	movs	r2, #64	; 0x40
 8005a4e:	5c9b      	ldrb	r3, [r3, r2]
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d101      	bne.n	8005a58 <HAL_I2C_Mem_Read+0x5c>
 8005a54:	2302      	movs	r3, #2
 8005a56:	e0fc      	b.n	8005c52 <HAL_I2C_Mem_Read+0x256>
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2240      	movs	r2, #64	; 0x40
 8005a5c:	2101      	movs	r1, #1
 8005a5e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005a60:	f7ff fac6 	bl	8004ff0 <HAL_GetTick>
 8005a64:	0003      	movs	r3, r0
 8005a66:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005a68:	2380      	movs	r3, #128	; 0x80
 8005a6a:	0219      	lsls	r1, r3, #8
 8005a6c:	68f8      	ldr	r0, [r7, #12]
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	9300      	str	r3, [sp, #0]
 8005a72:	2319      	movs	r3, #25
 8005a74:	2201      	movs	r2, #1
 8005a76:	f000 f9dd 	bl	8005e34 <I2C_WaitOnFlagUntilTimeout>
 8005a7a:	1e03      	subs	r3, r0, #0
 8005a7c:	d001      	beq.n	8005a82 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e0e7      	b.n	8005c52 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2241      	movs	r2, #65	; 0x41
 8005a86:	2122      	movs	r1, #34	; 0x22
 8005a88:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2242      	movs	r2, #66	; 0x42
 8005a8e:	2140      	movs	r1, #64	; 0x40
 8005a90:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2200      	movs	r2, #0
 8005a96:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a9c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	222c      	movs	r2, #44	; 0x2c
 8005aa2:	18ba      	adds	r2, r7, r2
 8005aa4:	8812      	ldrh	r2, [r2, #0]
 8005aa6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005aae:	1dbb      	adds	r3, r7, #6
 8005ab0:	881c      	ldrh	r4, [r3, #0]
 8005ab2:	2308      	movs	r3, #8
 8005ab4:	18fb      	adds	r3, r7, r3
 8005ab6:	881a      	ldrh	r2, [r3, #0]
 8005ab8:	230a      	movs	r3, #10
 8005aba:	18fb      	adds	r3, r7, r3
 8005abc:	8819      	ldrh	r1, [r3, #0]
 8005abe:	68f8      	ldr	r0, [r7, #12]
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	9301      	str	r3, [sp, #4]
 8005ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac6:	9300      	str	r3, [sp, #0]
 8005ac8:	0023      	movs	r3, r4
 8005aca:	f000 f92f 	bl	8005d2c <I2C_RequestMemoryRead>
 8005ace:	1e03      	subs	r3, r0, #0
 8005ad0:	d005      	beq.n	8005ade <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2240      	movs	r2, #64	; 0x40
 8005ad6:	2100      	movs	r1, #0
 8005ad8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e0b9      	b.n	8005c52 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	2bff      	cmp	r3, #255	; 0xff
 8005ae6:	d911      	bls.n	8005b0c <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	22ff      	movs	r2, #255	; 0xff
 8005aec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005af2:	b2da      	uxtb	r2, r3
 8005af4:	2380      	movs	r3, #128	; 0x80
 8005af6:	045c      	lsls	r4, r3, #17
 8005af8:	230a      	movs	r3, #10
 8005afa:	18fb      	adds	r3, r7, r3
 8005afc:	8819      	ldrh	r1, [r3, #0]
 8005afe:	68f8      	ldr	r0, [r7, #12]
 8005b00:	4b56      	ldr	r3, [pc, #344]	; (8005c5c <HAL_I2C_Mem_Read+0x260>)
 8005b02:	9300      	str	r3, [sp, #0]
 8005b04:	0023      	movs	r3, r4
 8005b06:	f000 fb77 	bl	80061f8 <I2C_TransferConfig>
 8005b0a:	e012      	b.n	8005b32 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b10:	b29a      	uxth	r2, r3
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b1a:	b2da      	uxtb	r2, r3
 8005b1c:	2380      	movs	r3, #128	; 0x80
 8005b1e:	049c      	lsls	r4, r3, #18
 8005b20:	230a      	movs	r3, #10
 8005b22:	18fb      	adds	r3, r7, r3
 8005b24:	8819      	ldrh	r1, [r3, #0]
 8005b26:	68f8      	ldr	r0, [r7, #12]
 8005b28:	4b4c      	ldr	r3, [pc, #304]	; (8005c5c <HAL_I2C_Mem_Read+0x260>)
 8005b2a:	9300      	str	r3, [sp, #0]
 8005b2c:	0023      	movs	r3, r4
 8005b2e:	f000 fb63 	bl	80061f8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005b32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b34:	68f8      	ldr	r0, [r7, #12]
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	9300      	str	r3, [sp, #0]
 8005b3a:	0013      	movs	r3, r2
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	2104      	movs	r1, #4
 8005b40:	f000 f978 	bl	8005e34 <I2C_WaitOnFlagUntilTimeout>
 8005b44:	1e03      	subs	r3, r0, #0
 8005b46:	d001      	beq.n	8005b4c <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e082      	b.n	8005c52 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b56:	b2d2      	uxtb	r2, r2
 8005b58:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5e:	1c5a      	adds	r2, r3, #1
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b68:	3b01      	subs	r3, #1
 8005b6a:	b29a      	uxth	r2, r3
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	3b01      	subs	r3, #1
 8005b78:	b29a      	uxth	r2, r3
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d03a      	beq.n	8005bfe <HAL_I2C_Mem_Read+0x202>
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d136      	bne.n	8005bfe <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005b90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b92:	68f8      	ldr	r0, [r7, #12]
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	9300      	str	r3, [sp, #0]
 8005b98:	0013      	movs	r3, r2
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	2180      	movs	r1, #128	; 0x80
 8005b9e:	f000 f949 	bl	8005e34 <I2C_WaitOnFlagUntilTimeout>
 8005ba2:	1e03      	subs	r3, r0, #0
 8005ba4:	d001      	beq.n	8005baa <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e053      	b.n	8005c52 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	2bff      	cmp	r3, #255	; 0xff
 8005bb2:	d911      	bls.n	8005bd8 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	22ff      	movs	r2, #255	; 0xff
 8005bb8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bbe:	b2da      	uxtb	r2, r3
 8005bc0:	2380      	movs	r3, #128	; 0x80
 8005bc2:	045c      	lsls	r4, r3, #17
 8005bc4:	230a      	movs	r3, #10
 8005bc6:	18fb      	adds	r3, r7, r3
 8005bc8:	8819      	ldrh	r1, [r3, #0]
 8005bca:	68f8      	ldr	r0, [r7, #12]
 8005bcc:	2300      	movs	r3, #0
 8005bce:	9300      	str	r3, [sp, #0]
 8005bd0:	0023      	movs	r3, r4
 8005bd2:	f000 fb11 	bl	80061f8 <I2C_TransferConfig>
 8005bd6:	e012      	b.n	8005bfe <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bdc:	b29a      	uxth	r2, r3
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005be6:	b2da      	uxtb	r2, r3
 8005be8:	2380      	movs	r3, #128	; 0x80
 8005bea:	049c      	lsls	r4, r3, #18
 8005bec:	230a      	movs	r3, #10
 8005bee:	18fb      	adds	r3, r7, r3
 8005bf0:	8819      	ldrh	r1, [r3, #0]
 8005bf2:	68f8      	ldr	r0, [r7, #12]
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	9300      	str	r3, [sp, #0]
 8005bf8:	0023      	movs	r3, r4
 8005bfa:	f000 fafd 	bl	80061f8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d194      	bne.n	8005b32 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c08:	697a      	ldr	r2, [r7, #20]
 8005c0a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	0018      	movs	r0, r3
 8005c10:	f000 f9ae 	bl	8005f70 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005c14:	1e03      	subs	r3, r0, #0
 8005c16:	d001      	beq.n	8005c1c <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e01a      	b.n	8005c52 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	2220      	movs	r2, #32
 8005c22:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	685a      	ldr	r2, [r3, #4]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	490c      	ldr	r1, [pc, #48]	; (8005c60 <HAL_I2C_Mem_Read+0x264>)
 8005c30:	400a      	ands	r2, r1
 8005c32:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2241      	movs	r2, #65	; 0x41
 8005c38:	2120      	movs	r1, #32
 8005c3a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2242      	movs	r2, #66	; 0x42
 8005c40:	2100      	movs	r1, #0
 8005c42:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2240      	movs	r2, #64	; 0x40
 8005c48:	2100      	movs	r1, #0
 8005c4a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	e000      	b.n	8005c52 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8005c50:	2302      	movs	r3, #2
  }
}
 8005c52:	0018      	movs	r0, r3
 8005c54:	46bd      	mov	sp, r7
 8005c56:	b007      	add	sp, #28
 8005c58:	bd90      	pop	{r4, r7, pc}
 8005c5a:	46c0      	nop			; (mov r8, r8)
 8005c5c:	80002400 	.word	0x80002400
 8005c60:	fe00e800 	.word	0xfe00e800

08005c64 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005c64:	b5b0      	push	{r4, r5, r7, lr}
 8005c66:	b086      	sub	sp, #24
 8005c68:	af02      	add	r7, sp, #8
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	000c      	movs	r4, r1
 8005c6e:	0010      	movs	r0, r2
 8005c70:	0019      	movs	r1, r3
 8005c72:	250a      	movs	r5, #10
 8005c74:	197b      	adds	r3, r7, r5
 8005c76:	1c22      	adds	r2, r4, #0
 8005c78:	801a      	strh	r2, [r3, #0]
 8005c7a:	2308      	movs	r3, #8
 8005c7c:	18fb      	adds	r3, r7, r3
 8005c7e:	1c02      	adds	r2, r0, #0
 8005c80:	801a      	strh	r2, [r3, #0]
 8005c82:	1dbb      	adds	r3, r7, #6
 8005c84:	1c0a      	adds	r2, r1, #0
 8005c86:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005c88:	1dbb      	adds	r3, r7, #6
 8005c8a:	881b      	ldrh	r3, [r3, #0]
 8005c8c:	b2da      	uxtb	r2, r3
 8005c8e:	2380      	movs	r3, #128	; 0x80
 8005c90:	045c      	lsls	r4, r3, #17
 8005c92:	197b      	adds	r3, r7, r5
 8005c94:	8819      	ldrh	r1, [r3, #0]
 8005c96:	68f8      	ldr	r0, [r7, #12]
 8005c98:	4b23      	ldr	r3, [pc, #140]	; (8005d28 <I2C_RequestMemoryWrite+0xc4>)
 8005c9a:	9300      	str	r3, [sp, #0]
 8005c9c:	0023      	movs	r3, r4
 8005c9e:	f000 faab 	bl	80061f8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ca4:	6a39      	ldr	r1, [r7, #32]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	0018      	movs	r0, r3
 8005caa:	f000 f91b 	bl	8005ee4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005cae:	1e03      	subs	r3, r0, #0
 8005cb0:	d001      	beq.n	8005cb6 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e033      	b.n	8005d1e <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005cb6:	1dbb      	adds	r3, r7, #6
 8005cb8:	881b      	ldrh	r3, [r3, #0]
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d107      	bne.n	8005cce <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005cbe:	2308      	movs	r3, #8
 8005cc0:	18fb      	adds	r3, r7, r3
 8005cc2:	881b      	ldrh	r3, [r3, #0]
 8005cc4:	b2da      	uxtb	r2, r3
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	629a      	str	r2, [r3, #40]	; 0x28
 8005ccc:	e019      	b.n	8005d02 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005cce:	2308      	movs	r3, #8
 8005cd0:	18fb      	adds	r3, r7, r3
 8005cd2:	881b      	ldrh	r3, [r3, #0]
 8005cd4:	0a1b      	lsrs	r3, r3, #8
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	b2da      	uxtb	r2, r3
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ce2:	6a39      	ldr	r1, [r7, #32]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	0018      	movs	r0, r3
 8005ce8:	f000 f8fc 	bl	8005ee4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005cec:	1e03      	subs	r3, r0, #0
 8005cee:	d001      	beq.n	8005cf4 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e014      	b.n	8005d1e <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005cf4:	2308      	movs	r3, #8
 8005cf6:	18fb      	adds	r3, r7, r3
 8005cf8:	881b      	ldrh	r3, [r3, #0]
 8005cfa:	b2da      	uxtb	r2, r3
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005d02:	6a3a      	ldr	r2, [r7, #32]
 8005d04:	68f8      	ldr	r0, [r7, #12]
 8005d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d08:	9300      	str	r3, [sp, #0]
 8005d0a:	0013      	movs	r3, r2
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	2180      	movs	r1, #128	; 0x80
 8005d10:	f000 f890 	bl	8005e34 <I2C_WaitOnFlagUntilTimeout>
 8005d14:	1e03      	subs	r3, r0, #0
 8005d16:	d001      	beq.n	8005d1c <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e000      	b.n	8005d1e <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8005d1c:	2300      	movs	r3, #0
}
 8005d1e:	0018      	movs	r0, r3
 8005d20:	46bd      	mov	sp, r7
 8005d22:	b004      	add	sp, #16
 8005d24:	bdb0      	pop	{r4, r5, r7, pc}
 8005d26:	46c0      	nop			; (mov r8, r8)
 8005d28:	80002000 	.word	0x80002000

08005d2c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005d2c:	b5b0      	push	{r4, r5, r7, lr}
 8005d2e:	b086      	sub	sp, #24
 8005d30:	af02      	add	r7, sp, #8
 8005d32:	60f8      	str	r0, [r7, #12]
 8005d34:	000c      	movs	r4, r1
 8005d36:	0010      	movs	r0, r2
 8005d38:	0019      	movs	r1, r3
 8005d3a:	250a      	movs	r5, #10
 8005d3c:	197b      	adds	r3, r7, r5
 8005d3e:	1c22      	adds	r2, r4, #0
 8005d40:	801a      	strh	r2, [r3, #0]
 8005d42:	2308      	movs	r3, #8
 8005d44:	18fb      	adds	r3, r7, r3
 8005d46:	1c02      	adds	r2, r0, #0
 8005d48:	801a      	strh	r2, [r3, #0]
 8005d4a:	1dbb      	adds	r3, r7, #6
 8005d4c:	1c0a      	adds	r2, r1, #0
 8005d4e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005d50:	1dbb      	adds	r3, r7, #6
 8005d52:	881b      	ldrh	r3, [r3, #0]
 8005d54:	b2da      	uxtb	r2, r3
 8005d56:	197b      	adds	r3, r7, r5
 8005d58:	8819      	ldrh	r1, [r3, #0]
 8005d5a:	68f8      	ldr	r0, [r7, #12]
 8005d5c:	4b23      	ldr	r3, [pc, #140]	; (8005dec <I2C_RequestMemoryRead+0xc0>)
 8005d5e:	9300      	str	r3, [sp, #0]
 8005d60:	2300      	movs	r3, #0
 8005d62:	f000 fa49 	bl	80061f8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d68:	6a39      	ldr	r1, [r7, #32]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	0018      	movs	r0, r3
 8005d6e:	f000 f8b9 	bl	8005ee4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005d72:	1e03      	subs	r3, r0, #0
 8005d74:	d001      	beq.n	8005d7a <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e033      	b.n	8005de2 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d7a:	1dbb      	adds	r3, r7, #6
 8005d7c:	881b      	ldrh	r3, [r3, #0]
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d107      	bne.n	8005d92 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005d82:	2308      	movs	r3, #8
 8005d84:	18fb      	adds	r3, r7, r3
 8005d86:	881b      	ldrh	r3, [r3, #0]
 8005d88:	b2da      	uxtb	r2, r3
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	629a      	str	r2, [r3, #40]	; 0x28
 8005d90:	e019      	b.n	8005dc6 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005d92:	2308      	movs	r3, #8
 8005d94:	18fb      	adds	r3, r7, r3
 8005d96:	881b      	ldrh	r3, [r3, #0]
 8005d98:	0a1b      	lsrs	r3, r3, #8
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	b2da      	uxtb	r2, r3
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005da4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005da6:	6a39      	ldr	r1, [r7, #32]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	0018      	movs	r0, r3
 8005dac:	f000 f89a 	bl	8005ee4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005db0:	1e03      	subs	r3, r0, #0
 8005db2:	d001      	beq.n	8005db8 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	e014      	b.n	8005de2 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005db8:	2308      	movs	r3, #8
 8005dba:	18fb      	adds	r3, r7, r3
 8005dbc:	881b      	ldrh	r3, [r3, #0]
 8005dbe:	b2da      	uxtb	r2, r3
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005dc6:	6a3a      	ldr	r2, [r7, #32]
 8005dc8:	68f8      	ldr	r0, [r7, #12]
 8005dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dcc:	9300      	str	r3, [sp, #0]
 8005dce:	0013      	movs	r3, r2
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	2140      	movs	r1, #64	; 0x40
 8005dd4:	f000 f82e 	bl	8005e34 <I2C_WaitOnFlagUntilTimeout>
 8005dd8:	1e03      	subs	r3, r0, #0
 8005dda:	d001      	beq.n	8005de0 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e000      	b.n	8005de2 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8005de0:	2300      	movs	r3, #0
}
 8005de2:	0018      	movs	r0, r3
 8005de4:	46bd      	mov	sp, r7
 8005de6:	b004      	add	sp, #16
 8005de8:	bdb0      	pop	{r4, r5, r7, pc}
 8005dea:	46c0      	nop			; (mov r8, r8)
 8005dec:	80002000 	.word	0x80002000

08005df0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b082      	sub	sp, #8
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	699b      	ldr	r3, [r3, #24]
 8005dfe:	2202      	movs	r2, #2
 8005e00:	4013      	ands	r3, r2
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	d103      	bne.n	8005e0e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	699b      	ldr	r3, [r3, #24]
 8005e14:	2201      	movs	r2, #1
 8005e16:	4013      	ands	r3, r2
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d007      	beq.n	8005e2c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	699a      	ldr	r2, [r3, #24]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2101      	movs	r1, #1
 8005e28:	430a      	orrs	r2, r1
 8005e2a:	619a      	str	r2, [r3, #24]
  }
}
 8005e2c:	46c0      	nop			; (mov r8, r8)
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	b002      	add	sp, #8
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	603b      	str	r3, [r7, #0]
 8005e40:	1dfb      	adds	r3, r7, #7
 8005e42:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e44:	e03a      	b.n	8005ebc <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e46:	69ba      	ldr	r2, [r7, #24]
 8005e48:	6839      	ldr	r1, [r7, #0]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	0018      	movs	r0, r3
 8005e4e:	f000 f8d3 	bl	8005ff8 <I2C_IsErrorOccurred>
 8005e52:	1e03      	subs	r3, r0, #0
 8005e54:	d001      	beq.n	8005e5a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e040      	b.n	8005edc <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	3301      	adds	r3, #1
 8005e5e:	d02d      	beq.n	8005ebc <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e60:	f7ff f8c6 	bl	8004ff0 <HAL_GetTick>
 8005e64:	0002      	movs	r2, r0
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	683a      	ldr	r2, [r7, #0]
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d302      	bcc.n	8005e76 <I2C_WaitOnFlagUntilTimeout+0x42>
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d122      	bne.n	8005ebc <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	699b      	ldr	r3, [r3, #24]
 8005e7c:	68ba      	ldr	r2, [r7, #8]
 8005e7e:	4013      	ands	r3, r2
 8005e80:	68ba      	ldr	r2, [r7, #8]
 8005e82:	1ad3      	subs	r3, r2, r3
 8005e84:	425a      	negs	r2, r3
 8005e86:	4153      	adcs	r3, r2
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	001a      	movs	r2, r3
 8005e8c:	1dfb      	adds	r3, r7, #7
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d113      	bne.n	8005ebc <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e98:	2220      	movs	r2, #32
 8005e9a:	431a      	orrs	r2, r3
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2241      	movs	r2, #65	; 0x41
 8005ea4:	2120      	movs	r1, #32
 8005ea6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2242      	movs	r2, #66	; 0x42
 8005eac:	2100      	movs	r1, #0
 8005eae:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2240      	movs	r2, #64	; 0x40
 8005eb4:	2100      	movs	r1, #0
 8005eb6:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e00f      	b.n	8005edc <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	699b      	ldr	r3, [r3, #24]
 8005ec2:	68ba      	ldr	r2, [r7, #8]
 8005ec4:	4013      	ands	r3, r2
 8005ec6:	68ba      	ldr	r2, [r7, #8]
 8005ec8:	1ad3      	subs	r3, r2, r3
 8005eca:	425a      	negs	r2, r3
 8005ecc:	4153      	adcs	r3, r2
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	001a      	movs	r2, r3
 8005ed2:	1dfb      	adds	r3, r7, #7
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d0b5      	beq.n	8005e46 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005eda:	2300      	movs	r3, #0
}
 8005edc:	0018      	movs	r0, r3
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	b004      	add	sp, #16
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b084      	sub	sp, #16
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	60b9      	str	r1, [r7, #8]
 8005eee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005ef0:	e032      	b.n	8005f58 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	68b9      	ldr	r1, [r7, #8]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	0018      	movs	r0, r3
 8005efa:	f000 f87d 	bl	8005ff8 <I2C_IsErrorOccurred>
 8005efe:	1e03      	subs	r3, r0, #0
 8005f00:	d001      	beq.n	8005f06 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e030      	b.n	8005f68 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	3301      	adds	r3, #1
 8005f0a:	d025      	beq.n	8005f58 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f0c:	f7ff f870 	bl	8004ff0 <HAL_GetTick>
 8005f10:	0002      	movs	r2, r0
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	68ba      	ldr	r2, [r7, #8]
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d302      	bcc.n	8005f22 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d11a      	bne.n	8005f58 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	699b      	ldr	r3, [r3, #24]
 8005f28:	2202      	movs	r2, #2
 8005f2a:	4013      	ands	r3, r2
 8005f2c:	2b02      	cmp	r3, #2
 8005f2e:	d013      	beq.n	8005f58 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f34:	2220      	movs	r2, #32
 8005f36:	431a      	orrs	r2, r3
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2241      	movs	r2, #65	; 0x41
 8005f40:	2120      	movs	r1, #32
 8005f42:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2242      	movs	r2, #66	; 0x42
 8005f48:	2100      	movs	r1, #0
 8005f4a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2240      	movs	r2, #64	; 0x40
 8005f50:	2100      	movs	r1, #0
 8005f52:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	e007      	b.n	8005f68 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	699b      	ldr	r3, [r3, #24]
 8005f5e:	2202      	movs	r2, #2
 8005f60:	4013      	ands	r3, r2
 8005f62:	2b02      	cmp	r3, #2
 8005f64:	d1c5      	bne.n	8005ef2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005f66:	2300      	movs	r3, #0
}
 8005f68:	0018      	movs	r0, r3
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	b004      	add	sp, #16
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b084      	sub	sp, #16
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f7c:	e02f      	b.n	8005fde <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	68b9      	ldr	r1, [r7, #8]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	0018      	movs	r0, r3
 8005f86:	f000 f837 	bl	8005ff8 <I2C_IsErrorOccurred>
 8005f8a:	1e03      	subs	r3, r0, #0
 8005f8c:	d001      	beq.n	8005f92 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e02d      	b.n	8005fee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f92:	f7ff f82d 	bl	8004ff0 <HAL_GetTick>
 8005f96:	0002      	movs	r2, r0
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	1ad3      	subs	r3, r2, r3
 8005f9c:	68ba      	ldr	r2, [r7, #8]
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d302      	bcc.n	8005fa8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d11a      	bne.n	8005fde <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	699b      	ldr	r3, [r3, #24]
 8005fae:	2220      	movs	r2, #32
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	2b20      	cmp	r3, #32
 8005fb4:	d013      	beq.n	8005fde <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fba:	2220      	movs	r2, #32
 8005fbc:	431a      	orrs	r2, r3
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2241      	movs	r2, #65	; 0x41
 8005fc6:	2120      	movs	r1, #32
 8005fc8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2242      	movs	r2, #66	; 0x42
 8005fce:	2100      	movs	r1, #0
 8005fd0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2240      	movs	r2, #64	; 0x40
 8005fd6:	2100      	movs	r1, #0
 8005fd8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e007      	b.n	8005fee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	699b      	ldr	r3, [r3, #24]
 8005fe4:	2220      	movs	r2, #32
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	2b20      	cmp	r3, #32
 8005fea:	d1c8      	bne.n	8005f7e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005fec:	2300      	movs	r3, #0
}
 8005fee:	0018      	movs	r0, r3
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	b004      	add	sp, #16
 8005ff4:	bd80      	pop	{r7, pc}
	...

08005ff8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ff8:	b590      	push	{r4, r7, lr}
 8005ffa:	b08b      	sub	sp, #44	; 0x2c
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	60b9      	str	r1, [r7, #8]
 8006002:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006004:	2327      	movs	r3, #39	; 0x27
 8006006:	18fb      	adds	r3, r7, r3
 8006008:	2200      	movs	r2, #0
 800600a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	699b      	ldr	r3, [r3, #24]
 8006012:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006014:	2300      	movs	r3, #0
 8006016:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800601c:	69bb      	ldr	r3, [r7, #24]
 800601e:	2210      	movs	r2, #16
 8006020:	4013      	ands	r3, r2
 8006022:	d100      	bne.n	8006026 <I2C_IsErrorOccurred+0x2e>
 8006024:	e082      	b.n	800612c <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	2210      	movs	r2, #16
 800602c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800602e:	e060      	b.n	80060f2 <I2C_IsErrorOccurred+0xfa>
 8006030:	2427      	movs	r4, #39	; 0x27
 8006032:	193b      	adds	r3, r7, r4
 8006034:	193a      	adds	r2, r7, r4
 8006036:	7812      	ldrb	r2, [r2, #0]
 8006038:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	3301      	adds	r3, #1
 800603e:	d058      	beq.n	80060f2 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006040:	f7fe ffd6 	bl	8004ff0 <HAL_GetTick>
 8006044:	0002      	movs	r2, r0
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	1ad3      	subs	r3, r2, r3
 800604a:	68ba      	ldr	r2, [r7, #8]
 800604c:	429a      	cmp	r2, r3
 800604e:	d306      	bcc.n	800605e <I2C_IsErrorOccurred+0x66>
 8006050:	193b      	adds	r3, r7, r4
 8006052:	193a      	adds	r2, r7, r4
 8006054:	7812      	ldrb	r2, [r2, #0]
 8006056:	701a      	strb	r2, [r3, #0]
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d149      	bne.n	80060f2 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	685a      	ldr	r2, [r3, #4]
 8006064:	2380      	movs	r3, #128	; 0x80
 8006066:	01db      	lsls	r3, r3, #7
 8006068:	4013      	ands	r3, r2
 800606a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800606c:	2013      	movs	r0, #19
 800606e:	183b      	adds	r3, r7, r0
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	2142      	movs	r1, #66	; 0x42
 8006074:	5c52      	ldrb	r2, [r2, r1]
 8006076:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	699a      	ldr	r2, [r3, #24]
 800607e:	2380      	movs	r3, #128	; 0x80
 8006080:	021b      	lsls	r3, r3, #8
 8006082:	401a      	ands	r2, r3
 8006084:	2380      	movs	r3, #128	; 0x80
 8006086:	021b      	lsls	r3, r3, #8
 8006088:	429a      	cmp	r2, r3
 800608a:	d126      	bne.n	80060da <I2C_IsErrorOccurred+0xe2>
 800608c:	697a      	ldr	r2, [r7, #20]
 800608e:	2380      	movs	r3, #128	; 0x80
 8006090:	01db      	lsls	r3, r3, #7
 8006092:	429a      	cmp	r2, r3
 8006094:	d021      	beq.n	80060da <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8006096:	183b      	adds	r3, r7, r0
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	2b20      	cmp	r3, #32
 800609c:	d01d      	beq.n	80060da <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	685a      	ldr	r2, [r3, #4]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	2180      	movs	r1, #128	; 0x80
 80060aa:	01c9      	lsls	r1, r1, #7
 80060ac:	430a      	orrs	r2, r1
 80060ae:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80060b0:	f7fe ff9e 	bl	8004ff0 <HAL_GetTick>
 80060b4:	0003      	movs	r3, r0
 80060b6:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80060b8:	e00f      	b.n	80060da <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80060ba:	f7fe ff99 	bl	8004ff0 <HAL_GetTick>
 80060be:	0002      	movs	r2, r0
 80060c0:	69fb      	ldr	r3, [r7, #28]
 80060c2:	1ad3      	subs	r3, r2, r3
 80060c4:	2b19      	cmp	r3, #25
 80060c6:	d908      	bls.n	80060da <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80060c8:	6a3b      	ldr	r3, [r7, #32]
 80060ca:	2220      	movs	r2, #32
 80060cc:	4313      	orrs	r3, r2
 80060ce:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80060d0:	2327      	movs	r3, #39	; 0x27
 80060d2:	18fb      	adds	r3, r7, r3
 80060d4:	2201      	movs	r2, #1
 80060d6:	701a      	strb	r2, [r3, #0]

              break;
 80060d8:	e00b      	b.n	80060f2 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	699b      	ldr	r3, [r3, #24]
 80060e0:	2220      	movs	r2, #32
 80060e2:	4013      	ands	r3, r2
 80060e4:	2127      	movs	r1, #39	; 0x27
 80060e6:	187a      	adds	r2, r7, r1
 80060e8:	1879      	adds	r1, r7, r1
 80060ea:	7809      	ldrb	r1, [r1, #0]
 80060ec:	7011      	strb	r1, [r2, #0]
 80060ee:	2b20      	cmp	r3, #32
 80060f0:	d1e3      	bne.n	80060ba <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	699b      	ldr	r3, [r3, #24]
 80060f8:	2220      	movs	r2, #32
 80060fa:	4013      	ands	r3, r2
 80060fc:	2b20      	cmp	r3, #32
 80060fe:	d004      	beq.n	800610a <I2C_IsErrorOccurred+0x112>
 8006100:	2327      	movs	r3, #39	; 0x27
 8006102:	18fb      	adds	r3, r7, r3
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d092      	beq.n	8006030 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800610a:	2327      	movs	r3, #39	; 0x27
 800610c:	18fb      	adds	r3, r7, r3
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d103      	bne.n	800611c <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	2220      	movs	r2, #32
 800611a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800611c:	6a3b      	ldr	r3, [r7, #32]
 800611e:	2204      	movs	r2, #4
 8006120:	4313      	orrs	r3, r2
 8006122:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006124:	2327      	movs	r3, #39	; 0x27
 8006126:	18fb      	adds	r3, r7, r3
 8006128:	2201      	movs	r2, #1
 800612a:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	699b      	ldr	r3, [r3, #24]
 8006132:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006134:	69ba      	ldr	r2, [r7, #24]
 8006136:	2380      	movs	r3, #128	; 0x80
 8006138:	005b      	lsls	r3, r3, #1
 800613a:	4013      	ands	r3, r2
 800613c:	d00c      	beq.n	8006158 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800613e:	6a3b      	ldr	r3, [r7, #32]
 8006140:	2201      	movs	r2, #1
 8006142:	4313      	orrs	r3, r2
 8006144:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	2280      	movs	r2, #128	; 0x80
 800614c:	0052      	lsls	r2, r2, #1
 800614e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006150:	2327      	movs	r3, #39	; 0x27
 8006152:	18fb      	adds	r3, r7, r3
 8006154:	2201      	movs	r2, #1
 8006156:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006158:	69ba      	ldr	r2, [r7, #24]
 800615a:	2380      	movs	r3, #128	; 0x80
 800615c:	00db      	lsls	r3, r3, #3
 800615e:	4013      	ands	r3, r2
 8006160:	d00c      	beq.n	800617c <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006162:	6a3b      	ldr	r3, [r7, #32]
 8006164:	2208      	movs	r2, #8
 8006166:	4313      	orrs	r3, r2
 8006168:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	2280      	movs	r2, #128	; 0x80
 8006170:	00d2      	lsls	r2, r2, #3
 8006172:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006174:	2327      	movs	r3, #39	; 0x27
 8006176:	18fb      	adds	r3, r7, r3
 8006178:	2201      	movs	r2, #1
 800617a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800617c:	69ba      	ldr	r2, [r7, #24]
 800617e:	2380      	movs	r3, #128	; 0x80
 8006180:	009b      	lsls	r3, r3, #2
 8006182:	4013      	ands	r3, r2
 8006184:	d00c      	beq.n	80061a0 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006186:	6a3b      	ldr	r3, [r7, #32]
 8006188:	2202      	movs	r2, #2
 800618a:	4313      	orrs	r3, r2
 800618c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	2280      	movs	r2, #128	; 0x80
 8006194:	0092      	lsls	r2, r2, #2
 8006196:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006198:	2327      	movs	r3, #39	; 0x27
 800619a:	18fb      	adds	r3, r7, r3
 800619c:	2201      	movs	r2, #1
 800619e:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80061a0:	2327      	movs	r3, #39	; 0x27
 80061a2:	18fb      	adds	r3, r7, r3
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d01d      	beq.n	80061e6 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	0018      	movs	r0, r3
 80061ae:	f7ff fe1f 	bl	8005df0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	685a      	ldr	r2, [r3, #4]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	490d      	ldr	r1, [pc, #52]	; (80061f4 <I2C_IsErrorOccurred+0x1fc>)
 80061be:	400a      	ands	r2, r1
 80061c0:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061c6:	6a3b      	ldr	r3, [r7, #32]
 80061c8:	431a      	orrs	r2, r3
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2241      	movs	r2, #65	; 0x41
 80061d2:	2120      	movs	r1, #32
 80061d4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2242      	movs	r2, #66	; 0x42
 80061da:	2100      	movs	r1, #0
 80061dc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2240      	movs	r2, #64	; 0x40
 80061e2:	2100      	movs	r1, #0
 80061e4:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80061e6:	2327      	movs	r3, #39	; 0x27
 80061e8:	18fb      	adds	r3, r7, r3
 80061ea:	781b      	ldrb	r3, [r3, #0]
}
 80061ec:	0018      	movs	r0, r3
 80061ee:	46bd      	mov	sp, r7
 80061f0:	b00b      	add	sp, #44	; 0x2c
 80061f2:	bd90      	pop	{r4, r7, pc}
 80061f4:	fe00e800 	.word	0xfe00e800

080061f8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80061f8:	b590      	push	{r4, r7, lr}
 80061fa:	b087      	sub	sp, #28
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	60f8      	str	r0, [r7, #12]
 8006200:	0008      	movs	r0, r1
 8006202:	0011      	movs	r1, r2
 8006204:	607b      	str	r3, [r7, #4]
 8006206:	240a      	movs	r4, #10
 8006208:	193b      	adds	r3, r7, r4
 800620a:	1c02      	adds	r2, r0, #0
 800620c:	801a      	strh	r2, [r3, #0]
 800620e:	2009      	movs	r0, #9
 8006210:	183b      	adds	r3, r7, r0
 8006212:	1c0a      	adds	r2, r1, #0
 8006214:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006216:	193b      	adds	r3, r7, r4
 8006218:	881b      	ldrh	r3, [r3, #0]
 800621a:	059b      	lsls	r3, r3, #22
 800621c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800621e:	183b      	adds	r3, r7, r0
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	0419      	lsls	r1, r3, #16
 8006224:	23ff      	movs	r3, #255	; 0xff
 8006226:	041b      	lsls	r3, r3, #16
 8006228:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800622a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006232:	4313      	orrs	r3, r2
 8006234:	005b      	lsls	r3, r3, #1
 8006236:	085b      	lsrs	r3, r3, #1
 8006238:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006242:	0d51      	lsrs	r1, r2, #21
 8006244:	2280      	movs	r2, #128	; 0x80
 8006246:	00d2      	lsls	r2, r2, #3
 8006248:	400a      	ands	r2, r1
 800624a:	4907      	ldr	r1, [pc, #28]	; (8006268 <I2C_TransferConfig+0x70>)
 800624c:	430a      	orrs	r2, r1
 800624e:	43d2      	mvns	r2, r2
 8006250:	401a      	ands	r2, r3
 8006252:	0011      	movs	r1, r2
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	697a      	ldr	r2, [r7, #20]
 800625a:	430a      	orrs	r2, r1
 800625c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800625e:	46c0      	nop			; (mov r8, r8)
 8006260:	46bd      	mov	sp, r7
 8006262:	b007      	add	sp, #28
 8006264:	bd90      	pop	{r4, r7, pc}
 8006266:	46c0      	nop			; (mov r8, r8)
 8006268:	03ff63ff 	.word	0x03ff63ff

0800626c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2241      	movs	r2, #65	; 0x41
 800627a:	5c9b      	ldrb	r3, [r3, r2]
 800627c:	b2db      	uxtb	r3, r3
 800627e:	2b20      	cmp	r3, #32
 8006280:	d138      	bne.n	80062f4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2240      	movs	r2, #64	; 0x40
 8006286:	5c9b      	ldrb	r3, [r3, r2]
 8006288:	2b01      	cmp	r3, #1
 800628a:	d101      	bne.n	8006290 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800628c:	2302      	movs	r3, #2
 800628e:	e032      	b.n	80062f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2240      	movs	r2, #64	; 0x40
 8006294:	2101      	movs	r1, #1
 8006296:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2241      	movs	r2, #65	; 0x41
 800629c:	2124      	movs	r1, #36	; 0x24
 800629e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	2101      	movs	r1, #1
 80062ac:	438a      	bics	r2, r1
 80062ae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4911      	ldr	r1, [pc, #68]	; (8006300 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80062bc:	400a      	ands	r2, r1
 80062be:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	6819      	ldr	r1, [r3, #0]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	683a      	ldr	r2, [r7, #0]
 80062cc:	430a      	orrs	r2, r1
 80062ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	2101      	movs	r1, #1
 80062dc:	430a      	orrs	r2, r1
 80062de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2241      	movs	r2, #65	; 0x41
 80062e4:	2120      	movs	r1, #32
 80062e6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2240      	movs	r2, #64	; 0x40
 80062ec:	2100      	movs	r1, #0
 80062ee:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80062f0:	2300      	movs	r3, #0
 80062f2:	e000      	b.n	80062f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80062f4:	2302      	movs	r3, #2
  }
}
 80062f6:	0018      	movs	r0, r3
 80062f8:	46bd      	mov	sp, r7
 80062fa:	b002      	add	sp, #8
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	46c0      	nop			; (mov r8, r8)
 8006300:	ffffefff 	.word	0xffffefff

08006304 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2241      	movs	r2, #65	; 0x41
 8006312:	5c9b      	ldrb	r3, [r3, r2]
 8006314:	b2db      	uxtb	r3, r3
 8006316:	2b20      	cmp	r3, #32
 8006318:	d139      	bne.n	800638e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2240      	movs	r2, #64	; 0x40
 800631e:	5c9b      	ldrb	r3, [r3, r2]
 8006320:	2b01      	cmp	r3, #1
 8006322:	d101      	bne.n	8006328 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006324:	2302      	movs	r3, #2
 8006326:	e033      	b.n	8006390 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2240      	movs	r2, #64	; 0x40
 800632c:	2101      	movs	r1, #1
 800632e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2241      	movs	r2, #65	; 0x41
 8006334:	2124      	movs	r1, #36	; 0x24
 8006336:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	2101      	movs	r1, #1
 8006344:	438a      	bics	r2, r1
 8006346:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	4a11      	ldr	r2, [pc, #68]	; (8006398 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8006354:	4013      	ands	r3, r2
 8006356:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	021b      	lsls	r3, r3, #8
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	4313      	orrs	r3, r2
 8006360:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	68fa      	ldr	r2, [r7, #12]
 8006368:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2101      	movs	r1, #1
 8006376:	430a      	orrs	r2, r1
 8006378:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2241      	movs	r2, #65	; 0x41
 800637e:	2120      	movs	r1, #32
 8006380:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2240      	movs	r2, #64	; 0x40
 8006386:	2100      	movs	r1, #0
 8006388:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800638a:	2300      	movs	r3, #0
 800638c:	e000      	b.n	8006390 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800638e:	2302      	movs	r3, #2
  }
}
 8006390:	0018      	movs	r0, r3
 8006392:	46bd      	mov	sp, r7
 8006394:	b004      	add	sp, #16
 8006396:	bd80      	pop	{r7, pc}
 8006398:	fffff0ff 	.word	0xfffff0ff

0800639c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80063a4:	4b19      	ldr	r3, [pc, #100]	; (800640c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a19      	ldr	r2, [pc, #100]	; (8006410 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80063aa:	4013      	ands	r3, r2
 80063ac:	0019      	movs	r1, r3
 80063ae:	4b17      	ldr	r3, [pc, #92]	; (800640c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	430a      	orrs	r2, r1
 80063b4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	2380      	movs	r3, #128	; 0x80
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	429a      	cmp	r2, r3
 80063be:	d11f      	bne.n	8006400 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80063c0:	4b14      	ldr	r3, [pc, #80]	; (8006414 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	0013      	movs	r3, r2
 80063c6:	005b      	lsls	r3, r3, #1
 80063c8:	189b      	adds	r3, r3, r2
 80063ca:	005b      	lsls	r3, r3, #1
 80063cc:	4912      	ldr	r1, [pc, #72]	; (8006418 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80063ce:	0018      	movs	r0, r3
 80063d0:	f7f9 fe96 	bl	8000100 <__udivsi3>
 80063d4:	0003      	movs	r3, r0
 80063d6:	3301      	adds	r3, #1
 80063d8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80063da:	e008      	b.n	80063ee <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d003      	beq.n	80063ea <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	3b01      	subs	r3, #1
 80063e6:	60fb      	str	r3, [r7, #12]
 80063e8:	e001      	b.n	80063ee <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80063ea:	2303      	movs	r3, #3
 80063ec:	e009      	b.n	8006402 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80063ee:	4b07      	ldr	r3, [pc, #28]	; (800640c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80063f0:	695a      	ldr	r2, [r3, #20]
 80063f2:	2380      	movs	r3, #128	; 0x80
 80063f4:	00db      	lsls	r3, r3, #3
 80063f6:	401a      	ands	r2, r3
 80063f8:	2380      	movs	r3, #128	; 0x80
 80063fa:	00db      	lsls	r3, r3, #3
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d0ed      	beq.n	80063dc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8006400:	2300      	movs	r3, #0
}
 8006402:	0018      	movs	r0, r3
 8006404:	46bd      	mov	sp, r7
 8006406:	b004      	add	sp, #16
 8006408:	bd80      	pop	{r7, pc}
 800640a:	46c0      	nop			; (mov r8, r8)
 800640c:	40007000 	.word	0x40007000
 8006410:	fffff9ff 	.word	0xfffff9ff
 8006414:	2000001c 	.word	0x2000001c
 8006418:	000f4240 	.word	0x000f4240

0800641c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8006420:	4b03      	ldr	r3, [pc, #12]	; (8006430 <LL_RCC_GetAPB1Prescaler+0x14>)
 8006422:	689a      	ldr	r2, [r3, #8]
 8006424:	23e0      	movs	r3, #224	; 0xe0
 8006426:	01db      	lsls	r3, r3, #7
 8006428:	4013      	ands	r3, r2
}
 800642a:	0018      	movs	r0, r3
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}
 8006430:	40021000 	.word	0x40021000

08006434 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b088      	sub	sp, #32
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d101      	bne.n	8006446 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	e2f3      	b.n	8006a2e <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2201      	movs	r2, #1
 800644c:	4013      	ands	r3, r2
 800644e:	d100      	bne.n	8006452 <HAL_RCC_OscConfig+0x1e>
 8006450:	e07c      	b.n	800654c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006452:	4bc3      	ldr	r3, [pc, #780]	; (8006760 <HAL_RCC_OscConfig+0x32c>)
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	2238      	movs	r2, #56	; 0x38
 8006458:	4013      	ands	r3, r2
 800645a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800645c:	4bc0      	ldr	r3, [pc, #768]	; (8006760 <HAL_RCC_OscConfig+0x32c>)
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	2203      	movs	r2, #3
 8006462:	4013      	ands	r3, r2
 8006464:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	2b10      	cmp	r3, #16
 800646a:	d102      	bne.n	8006472 <HAL_RCC_OscConfig+0x3e>
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	2b03      	cmp	r3, #3
 8006470:	d002      	beq.n	8006478 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8006472:	69bb      	ldr	r3, [r7, #24]
 8006474:	2b08      	cmp	r3, #8
 8006476:	d10b      	bne.n	8006490 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006478:	4bb9      	ldr	r3, [pc, #740]	; (8006760 <HAL_RCC_OscConfig+0x32c>)
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	2380      	movs	r3, #128	; 0x80
 800647e:	029b      	lsls	r3, r3, #10
 8006480:	4013      	ands	r3, r2
 8006482:	d062      	beq.n	800654a <HAL_RCC_OscConfig+0x116>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d15e      	bne.n	800654a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800648c:	2301      	movs	r3, #1
 800648e:	e2ce      	b.n	8006a2e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	685a      	ldr	r2, [r3, #4]
 8006494:	2380      	movs	r3, #128	; 0x80
 8006496:	025b      	lsls	r3, r3, #9
 8006498:	429a      	cmp	r2, r3
 800649a:	d107      	bne.n	80064ac <HAL_RCC_OscConfig+0x78>
 800649c:	4bb0      	ldr	r3, [pc, #704]	; (8006760 <HAL_RCC_OscConfig+0x32c>)
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	4baf      	ldr	r3, [pc, #700]	; (8006760 <HAL_RCC_OscConfig+0x32c>)
 80064a2:	2180      	movs	r1, #128	; 0x80
 80064a4:	0249      	lsls	r1, r1, #9
 80064a6:	430a      	orrs	r2, r1
 80064a8:	601a      	str	r2, [r3, #0]
 80064aa:	e020      	b.n	80064ee <HAL_RCC_OscConfig+0xba>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	685a      	ldr	r2, [r3, #4]
 80064b0:	23a0      	movs	r3, #160	; 0xa0
 80064b2:	02db      	lsls	r3, r3, #11
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d10e      	bne.n	80064d6 <HAL_RCC_OscConfig+0xa2>
 80064b8:	4ba9      	ldr	r3, [pc, #676]	; (8006760 <HAL_RCC_OscConfig+0x32c>)
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	4ba8      	ldr	r3, [pc, #672]	; (8006760 <HAL_RCC_OscConfig+0x32c>)
 80064be:	2180      	movs	r1, #128	; 0x80
 80064c0:	02c9      	lsls	r1, r1, #11
 80064c2:	430a      	orrs	r2, r1
 80064c4:	601a      	str	r2, [r3, #0]
 80064c6:	4ba6      	ldr	r3, [pc, #664]	; (8006760 <HAL_RCC_OscConfig+0x32c>)
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	4ba5      	ldr	r3, [pc, #660]	; (8006760 <HAL_RCC_OscConfig+0x32c>)
 80064cc:	2180      	movs	r1, #128	; 0x80
 80064ce:	0249      	lsls	r1, r1, #9
 80064d0:	430a      	orrs	r2, r1
 80064d2:	601a      	str	r2, [r3, #0]
 80064d4:	e00b      	b.n	80064ee <HAL_RCC_OscConfig+0xba>
 80064d6:	4ba2      	ldr	r3, [pc, #648]	; (8006760 <HAL_RCC_OscConfig+0x32c>)
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	4ba1      	ldr	r3, [pc, #644]	; (8006760 <HAL_RCC_OscConfig+0x32c>)
 80064dc:	49a1      	ldr	r1, [pc, #644]	; (8006764 <HAL_RCC_OscConfig+0x330>)
 80064de:	400a      	ands	r2, r1
 80064e0:	601a      	str	r2, [r3, #0]
 80064e2:	4b9f      	ldr	r3, [pc, #636]	; (8006760 <HAL_RCC_OscConfig+0x32c>)
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	4b9e      	ldr	r3, [pc, #632]	; (8006760 <HAL_RCC_OscConfig+0x32c>)
 80064e8:	499f      	ldr	r1, [pc, #636]	; (8006768 <HAL_RCC_OscConfig+0x334>)
 80064ea:	400a      	ands	r2, r1
 80064ec:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d014      	beq.n	8006520 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064f6:	f7fe fd7b 	bl	8004ff0 <HAL_GetTick>
 80064fa:	0003      	movs	r3, r0
 80064fc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80064fe:	e008      	b.n	8006512 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006500:	f7fe fd76 	bl	8004ff0 <HAL_GetTick>
 8006504:	0002      	movs	r2, r0
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	1ad3      	subs	r3, r2, r3
 800650a:	2b64      	cmp	r3, #100	; 0x64
 800650c:	d901      	bls.n	8006512 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800650e:	2303      	movs	r3, #3
 8006510:	e28d      	b.n	8006a2e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006512:	4b93      	ldr	r3, [pc, #588]	; (8006760 <HAL_RCC_OscConfig+0x32c>)
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	2380      	movs	r3, #128	; 0x80
 8006518:	029b      	lsls	r3, r3, #10
 800651a:	4013      	ands	r3, r2
 800651c:	d0f0      	beq.n	8006500 <HAL_RCC_OscConfig+0xcc>
 800651e:	e015      	b.n	800654c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006520:	f7fe fd66 	bl	8004ff0 <HAL_GetTick>
 8006524:	0003      	movs	r3, r0
 8006526:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006528:	e008      	b.n	800653c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800652a:	f7fe fd61 	bl	8004ff0 <HAL_GetTick>
 800652e:	0002      	movs	r2, r0
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	1ad3      	subs	r3, r2, r3
 8006534:	2b64      	cmp	r3, #100	; 0x64
 8006536:	d901      	bls.n	800653c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8006538:	2303      	movs	r3, #3
 800653a:	e278      	b.n	8006a2e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800653c:	4b88      	ldr	r3, [pc, #544]	; (8006760 <HAL_RCC_OscConfig+0x32c>)
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	2380      	movs	r3, #128	; 0x80
 8006542:	029b      	lsls	r3, r3, #10
 8006544:	4013      	ands	r3, r2
 8006546:	d1f0      	bne.n	800652a <HAL_RCC_OscConfig+0xf6>
 8006548:	e000      	b.n	800654c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800654a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	2202      	movs	r2, #2
 8006552:	4013      	ands	r3, r2
 8006554:	d100      	bne.n	8006558 <HAL_RCC_OscConfig+0x124>
 8006556:	e099      	b.n	800668c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006558:	4b81      	ldr	r3, [pc, #516]	; (8006760 <HAL_RCC_OscConfig+0x32c>)
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	2238      	movs	r2, #56	; 0x38
 800655e:	4013      	ands	r3, r2
 8006560:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006562:	4b7f      	ldr	r3, [pc, #508]	; (8006760 <HAL_RCC_OscConfig+0x32c>)
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	2203      	movs	r2, #3
 8006568:	4013      	ands	r3, r2
 800656a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800656c:	69bb      	ldr	r3, [r7, #24]
 800656e:	2b10      	cmp	r3, #16
 8006570:	d102      	bne.n	8006578 <HAL_RCC_OscConfig+0x144>
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	2b02      	cmp	r3, #2
 8006576:	d002      	beq.n	800657e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8006578:	69bb      	ldr	r3, [r7, #24]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d135      	bne.n	80065ea <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800657e:	4b78      	ldr	r3, [pc, #480]	; (8006760 <HAL_RCC_OscConfig+0x32c>)
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	2380      	movs	r3, #128	; 0x80
 8006584:	00db      	lsls	r3, r3, #3
 8006586:	4013      	ands	r3, r2
 8006588:	d005      	beq.n	8006596 <HAL_RCC_OscConfig+0x162>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d101      	bne.n	8006596 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	e24b      	b.n	8006a2e <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006596:	4b72      	ldr	r3, [pc, #456]	; (8006760 <HAL_RCC_OscConfig+0x32c>)
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	4a74      	ldr	r2, [pc, #464]	; (800676c <HAL_RCC_OscConfig+0x338>)
 800659c:	4013      	ands	r3, r2
 800659e:	0019      	movs	r1, r3
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	695b      	ldr	r3, [r3, #20]
 80065a4:	021a      	lsls	r2, r3, #8
 80065a6:	4b6e      	ldr	r3, [pc, #440]	; (8006760 <HAL_RCC_OscConfig+0x32c>)
 80065a8:	430a      	orrs	r2, r1
 80065aa:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80065ac:	69bb      	ldr	r3, [r7, #24]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d112      	bne.n	80065d8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80065b2:	4b6b      	ldr	r3, [pc, #428]	; (8006760 <HAL_RCC_OscConfig+0x32c>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a6e      	ldr	r2, [pc, #440]	; (8006770 <HAL_RCC_OscConfig+0x33c>)
 80065b8:	4013      	ands	r3, r2
 80065ba:	0019      	movs	r1, r3
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	691a      	ldr	r2, [r3, #16]
 80065c0:	4b67      	ldr	r3, [pc, #412]	; (8006760 <HAL_RCC_OscConfig+0x32c>)
 80065c2:	430a      	orrs	r2, r1
 80065c4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80065c6:	4b66      	ldr	r3, [pc, #408]	; (8006760 <HAL_RCC_OscConfig+0x32c>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	0adb      	lsrs	r3, r3, #11
 80065cc:	2207      	movs	r2, #7
 80065ce:	4013      	ands	r3, r2
 80065d0:	4a68      	ldr	r2, [pc, #416]	; (8006774 <HAL_RCC_OscConfig+0x340>)
 80065d2:	40da      	lsrs	r2, r3
 80065d4:	4b68      	ldr	r3, [pc, #416]	; (8006778 <HAL_RCC_OscConfig+0x344>)
 80065d6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80065d8:	4b68      	ldr	r3, [pc, #416]	; (800677c <HAL_RCC_OscConfig+0x348>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	0018      	movs	r0, r3
 80065de:	f7fe fcab 	bl	8004f38 <HAL_InitTick>
 80065e2:	1e03      	subs	r3, r0, #0
 80065e4:	d051      	beq.n	800668a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	e221      	b.n	8006a2e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d030      	beq.n	8006654 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80065f2:	4b5b      	ldr	r3, [pc, #364]	; (8006760 <HAL_RCC_OscConfig+0x32c>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a5e      	ldr	r2, [pc, #376]	; (8006770 <HAL_RCC_OscConfig+0x33c>)
 80065f8:	4013      	ands	r3, r2
 80065fa:	0019      	movs	r1, r3
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	691a      	ldr	r2, [r3, #16]
 8006600:	4b57      	ldr	r3, [pc, #348]	; (8006760 <HAL_RCC_OscConfig+0x32c>)
 8006602:	430a      	orrs	r2, r1
 8006604:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8006606:	4b56      	ldr	r3, [pc, #344]	; (8006760 <HAL_RCC_OscConfig+0x32c>)
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	4b55      	ldr	r3, [pc, #340]	; (8006760 <HAL_RCC_OscConfig+0x32c>)
 800660c:	2180      	movs	r1, #128	; 0x80
 800660e:	0049      	lsls	r1, r1, #1
 8006610:	430a      	orrs	r2, r1
 8006612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006614:	f7fe fcec 	bl	8004ff0 <HAL_GetTick>
 8006618:	0003      	movs	r3, r0
 800661a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800661c:	e008      	b.n	8006630 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800661e:	f7fe fce7 	bl	8004ff0 <HAL_GetTick>
 8006622:	0002      	movs	r2, r0
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	1ad3      	subs	r3, r2, r3
 8006628:	2b02      	cmp	r3, #2
 800662a:	d901      	bls.n	8006630 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800662c:	2303      	movs	r3, #3
 800662e:	e1fe      	b.n	8006a2e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006630:	4b4b      	ldr	r3, [pc, #300]	; (8006760 <HAL_RCC_OscConfig+0x32c>)
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	2380      	movs	r3, #128	; 0x80
 8006636:	00db      	lsls	r3, r3, #3
 8006638:	4013      	ands	r3, r2
 800663a:	d0f0      	beq.n	800661e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800663c:	4b48      	ldr	r3, [pc, #288]	; (8006760 <HAL_RCC_OscConfig+0x32c>)
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	4a4a      	ldr	r2, [pc, #296]	; (800676c <HAL_RCC_OscConfig+0x338>)
 8006642:	4013      	ands	r3, r2
 8006644:	0019      	movs	r1, r3
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	695b      	ldr	r3, [r3, #20]
 800664a:	021a      	lsls	r2, r3, #8
 800664c:	4b44      	ldr	r3, [pc, #272]	; (8006760 <HAL_RCC_OscConfig+0x32c>)
 800664e:	430a      	orrs	r2, r1
 8006650:	605a      	str	r2, [r3, #4]
 8006652:	e01b      	b.n	800668c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8006654:	4b42      	ldr	r3, [pc, #264]	; (8006760 <HAL_RCC_OscConfig+0x32c>)
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	4b41      	ldr	r3, [pc, #260]	; (8006760 <HAL_RCC_OscConfig+0x32c>)
 800665a:	4949      	ldr	r1, [pc, #292]	; (8006780 <HAL_RCC_OscConfig+0x34c>)
 800665c:	400a      	ands	r2, r1
 800665e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006660:	f7fe fcc6 	bl	8004ff0 <HAL_GetTick>
 8006664:	0003      	movs	r3, r0
 8006666:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006668:	e008      	b.n	800667c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800666a:	f7fe fcc1 	bl	8004ff0 <HAL_GetTick>
 800666e:	0002      	movs	r2, r0
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	1ad3      	subs	r3, r2, r3
 8006674:	2b02      	cmp	r3, #2
 8006676:	d901      	bls.n	800667c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006678:	2303      	movs	r3, #3
 800667a:	e1d8      	b.n	8006a2e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800667c:	4b38      	ldr	r3, [pc, #224]	; (8006760 <HAL_RCC_OscConfig+0x32c>)
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	2380      	movs	r3, #128	; 0x80
 8006682:	00db      	lsls	r3, r3, #3
 8006684:	4013      	ands	r3, r2
 8006686:	d1f0      	bne.n	800666a <HAL_RCC_OscConfig+0x236>
 8006688:	e000      	b.n	800668c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800668a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2208      	movs	r2, #8
 8006692:	4013      	ands	r3, r2
 8006694:	d047      	beq.n	8006726 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006696:	4b32      	ldr	r3, [pc, #200]	; (8006760 <HAL_RCC_OscConfig+0x32c>)
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	2238      	movs	r2, #56	; 0x38
 800669c:	4013      	ands	r3, r2
 800669e:	2b18      	cmp	r3, #24
 80066a0:	d10a      	bne.n	80066b8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80066a2:	4b2f      	ldr	r3, [pc, #188]	; (8006760 <HAL_RCC_OscConfig+0x32c>)
 80066a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066a6:	2202      	movs	r2, #2
 80066a8:	4013      	ands	r3, r2
 80066aa:	d03c      	beq.n	8006726 <HAL_RCC_OscConfig+0x2f2>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	699b      	ldr	r3, [r3, #24]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d138      	bne.n	8006726 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	e1ba      	b.n	8006a2e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	699b      	ldr	r3, [r3, #24]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d019      	beq.n	80066f4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80066c0:	4b27      	ldr	r3, [pc, #156]	; (8006760 <HAL_RCC_OscConfig+0x32c>)
 80066c2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80066c4:	4b26      	ldr	r3, [pc, #152]	; (8006760 <HAL_RCC_OscConfig+0x32c>)
 80066c6:	2101      	movs	r1, #1
 80066c8:	430a      	orrs	r2, r1
 80066ca:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066cc:	f7fe fc90 	bl	8004ff0 <HAL_GetTick>
 80066d0:	0003      	movs	r3, r0
 80066d2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80066d4:	e008      	b.n	80066e8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066d6:	f7fe fc8b 	bl	8004ff0 <HAL_GetTick>
 80066da:	0002      	movs	r2, r0
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	1ad3      	subs	r3, r2, r3
 80066e0:	2b02      	cmp	r3, #2
 80066e2:	d901      	bls.n	80066e8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80066e4:	2303      	movs	r3, #3
 80066e6:	e1a2      	b.n	8006a2e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80066e8:	4b1d      	ldr	r3, [pc, #116]	; (8006760 <HAL_RCC_OscConfig+0x32c>)
 80066ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066ec:	2202      	movs	r2, #2
 80066ee:	4013      	ands	r3, r2
 80066f0:	d0f1      	beq.n	80066d6 <HAL_RCC_OscConfig+0x2a2>
 80066f2:	e018      	b.n	8006726 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80066f4:	4b1a      	ldr	r3, [pc, #104]	; (8006760 <HAL_RCC_OscConfig+0x32c>)
 80066f6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80066f8:	4b19      	ldr	r3, [pc, #100]	; (8006760 <HAL_RCC_OscConfig+0x32c>)
 80066fa:	2101      	movs	r1, #1
 80066fc:	438a      	bics	r2, r1
 80066fe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006700:	f7fe fc76 	bl	8004ff0 <HAL_GetTick>
 8006704:	0003      	movs	r3, r0
 8006706:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006708:	e008      	b.n	800671c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800670a:	f7fe fc71 	bl	8004ff0 <HAL_GetTick>
 800670e:	0002      	movs	r2, r0
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	1ad3      	subs	r3, r2, r3
 8006714:	2b02      	cmp	r3, #2
 8006716:	d901      	bls.n	800671c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8006718:	2303      	movs	r3, #3
 800671a:	e188      	b.n	8006a2e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800671c:	4b10      	ldr	r3, [pc, #64]	; (8006760 <HAL_RCC_OscConfig+0x32c>)
 800671e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006720:	2202      	movs	r2, #2
 8006722:	4013      	ands	r3, r2
 8006724:	d1f1      	bne.n	800670a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	2204      	movs	r2, #4
 800672c:	4013      	ands	r3, r2
 800672e:	d100      	bne.n	8006732 <HAL_RCC_OscConfig+0x2fe>
 8006730:	e0c6      	b.n	80068c0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006732:	231f      	movs	r3, #31
 8006734:	18fb      	adds	r3, r7, r3
 8006736:	2200      	movs	r2, #0
 8006738:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800673a:	4b09      	ldr	r3, [pc, #36]	; (8006760 <HAL_RCC_OscConfig+0x32c>)
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	2238      	movs	r2, #56	; 0x38
 8006740:	4013      	ands	r3, r2
 8006742:	2b20      	cmp	r3, #32
 8006744:	d11e      	bne.n	8006784 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8006746:	4b06      	ldr	r3, [pc, #24]	; (8006760 <HAL_RCC_OscConfig+0x32c>)
 8006748:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800674a:	2202      	movs	r2, #2
 800674c:	4013      	ands	r3, r2
 800674e:	d100      	bne.n	8006752 <HAL_RCC_OscConfig+0x31e>
 8006750:	e0b6      	b.n	80068c0 <HAL_RCC_OscConfig+0x48c>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d000      	beq.n	800675c <HAL_RCC_OscConfig+0x328>
 800675a:	e0b1      	b.n	80068c0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	e166      	b.n	8006a2e <HAL_RCC_OscConfig+0x5fa>
 8006760:	40021000 	.word	0x40021000
 8006764:	fffeffff 	.word	0xfffeffff
 8006768:	fffbffff 	.word	0xfffbffff
 800676c:	ffff80ff 	.word	0xffff80ff
 8006770:	ffffc7ff 	.word	0xffffc7ff
 8006774:	00f42400 	.word	0x00f42400
 8006778:	2000001c 	.word	0x2000001c
 800677c:	20000020 	.word	0x20000020
 8006780:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006784:	4bac      	ldr	r3, [pc, #688]	; (8006a38 <HAL_RCC_OscConfig+0x604>)
 8006786:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006788:	2380      	movs	r3, #128	; 0x80
 800678a:	055b      	lsls	r3, r3, #21
 800678c:	4013      	ands	r3, r2
 800678e:	d101      	bne.n	8006794 <HAL_RCC_OscConfig+0x360>
 8006790:	2301      	movs	r3, #1
 8006792:	e000      	b.n	8006796 <HAL_RCC_OscConfig+0x362>
 8006794:	2300      	movs	r3, #0
 8006796:	2b00      	cmp	r3, #0
 8006798:	d011      	beq.n	80067be <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800679a:	4ba7      	ldr	r3, [pc, #668]	; (8006a38 <HAL_RCC_OscConfig+0x604>)
 800679c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800679e:	4ba6      	ldr	r3, [pc, #664]	; (8006a38 <HAL_RCC_OscConfig+0x604>)
 80067a0:	2180      	movs	r1, #128	; 0x80
 80067a2:	0549      	lsls	r1, r1, #21
 80067a4:	430a      	orrs	r2, r1
 80067a6:	63da      	str	r2, [r3, #60]	; 0x3c
 80067a8:	4ba3      	ldr	r3, [pc, #652]	; (8006a38 <HAL_RCC_OscConfig+0x604>)
 80067aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067ac:	2380      	movs	r3, #128	; 0x80
 80067ae:	055b      	lsls	r3, r3, #21
 80067b0:	4013      	ands	r3, r2
 80067b2:	60fb      	str	r3, [r7, #12]
 80067b4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80067b6:	231f      	movs	r3, #31
 80067b8:	18fb      	adds	r3, r7, r3
 80067ba:	2201      	movs	r2, #1
 80067bc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80067be:	4b9f      	ldr	r3, [pc, #636]	; (8006a3c <HAL_RCC_OscConfig+0x608>)
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	2380      	movs	r3, #128	; 0x80
 80067c4:	005b      	lsls	r3, r3, #1
 80067c6:	4013      	ands	r3, r2
 80067c8:	d11a      	bne.n	8006800 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80067ca:	4b9c      	ldr	r3, [pc, #624]	; (8006a3c <HAL_RCC_OscConfig+0x608>)
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	4b9b      	ldr	r3, [pc, #620]	; (8006a3c <HAL_RCC_OscConfig+0x608>)
 80067d0:	2180      	movs	r1, #128	; 0x80
 80067d2:	0049      	lsls	r1, r1, #1
 80067d4:	430a      	orrs	r2, r1
 80067d6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80067d8:	f7fe fc0a 	bl	8004ff0 <HAL_GetTick>
 80067dc:	0003      	movs	r3, r0
 80067de:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80067e0:	e008      	b.n	80067f4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067e2:	f7fe fc05 	bl	8004ff0 <HAL_GetTick>
 80067e6:	0002      	movs	r2, r0
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	1ad3      	subs	r3, r2, r3
 80067ec:	2b02      	cmp	r3, #2
 80067ee:	d901      	bls.n	80067f4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80067f0:	2303      	movs	r3, #3
 80067f2:	e11c      	b.n	8006a2e <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80067f4:	4b91      	ldr	r3, [pc, #580]	; (8006a3c <HAL_RCC_OscConfig+0x608>)
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	2380      	movs	r3, #128	; 0x80
 80067fa:	005b      	lsls	r3, r3, #1
 80067fc:	4013      	ands	r3, r2
 80067fe:	d0f0      	beq.n	80067e2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	2b01      	cmp	r3, #1
 8006806:	d106      	bne.n	8006816 <HAL_RCC_OscConfig+0x3e2>
 8006808:	4b8b      	ldr	r3, [pc, #556]	; (8006a38 <HAL_RCC_OscConfig+0x604>)
 800680a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800680c:	4b8a      	ldr	r3, [pc, #552]	; (8006a38 <HAL_RCC_OscConfig+0x604>)
 800680e:	2101      	movs	r1, #1
 8006810:	430a      	orrs	r2, r1
 8006812:	65da      	str	r2, [r3, #92]	; 0x5c
 8006814:	e01c      	b.n	8006850 <HAL_RCC_OscConfig+0x41c>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	2b05      	cmp	r3, #5
 800681c:	d10c      	bne.n	8006838 <HAL_RCC_OscConfig+0x404>
 800681e:	4b86      	ldr	r3, [pc, #536]	; (8006a38 <HAL_RCC_OscConfig+0x604>)
 8006820:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006822:	4b85      	ldr	r3, [pc, #532]	; (8006a38 <HAL_RCC_OscConfig+0x604>)
 8006824:	2104      	movs	r1, #4
 8006826:	430a      	orrs	r2, r1
 8006828:	65da      	str	r2, [r3, #92]	; 0x5c
 800682a:	4b83      	ldr	r3, [pc, #524]	; (8006a38 <HAL_RCC_OscConfig+0x604>)
 800682c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800682e:	4b82      	ldr	r3, [pc, #520]	; (8006a38 <HAL_RCC_OscConfig+0x604>)
 8006830:	2101      	movs	r1, #1
 8006832:	430a      	orrs	r2, r1
 8006834:	65da      	str	r2, [r3, #92]	; 0x5c
 8006836:	e00b      	b.n	8006850 <HAL_RCC_OscConfig+0x41c>
 8006838:	4b7f      	ldr	r3, [pc, #508]	; (8006a38 <HAL_RCC_OscConfig+0x604>)
 800683a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800683c:	4b7e      	ldr	r3, [pc, #504]	; (8006a38 <HAL_RCC_OscConfig+0x604>)
 800683e:	2101      	movs	r1, #1
 8006840:	438a      	bics	r2, r1
 8006842:	65da      	str	r2, [r3, #92]	; 0x5c
 8006844:	4b7c      	ldr	r3, [pc, #496]	; (8006a38 <HAL_RCC_OscConfig+0x604>)
 8006846:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006848:	4b7b      	ldr	r3, [pc, #492]	; (8006a38 <HAL_RCC_OscConfig+0x604>)
 800684a:	2104      	movs	r1, #4
 800684c:	438a      	bics	r2, r1
 800684e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d014      	beq.n	8006882 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006858:	f7fe fbca 	bl	8004ff0 <HAL_GetTick>
 800685c:	0003      	movs	r3, r0
 800685e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006860:	e009      	b.n	8006876 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006862:	f7fe fbc5 	bl	8004ff0 <HAL_GetTick>
 8006866:	0002      	movs	r2, r0
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	1ad3      	subs	r3, r2, r3
 800686c:	4a74      	ldr	r2, [pc, #464]	; (8006a40 <HAL_RCC_OscConfig+0x60c>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d901      	bls.n	8006876 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8006872:	2303      	movs	r3, #3
 8006874:	e0db      	b.n	8006a2e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006876:	4b70      	ldr	r3, [pc, #448]	; (8006a38 <HAL_RCC_OscConfig+0x604>)
 8006878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800687a:	2202      	movs	r2, #2
 800687c:	4013      	ands	r3, r2
 800687e:	d0f0      	beq.n	8006862 <HAL_RCC_OscConfig+0x42e>
 8006880:	e013      	b.n	80068aa <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006882:	f7fe fbb5 	bl	8004ff0 <HAL_GetTick>
 8006886:	0003      	movs	r3, r0
 8006888:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800688a:	e009      	b.n	80068a0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800688c:	f7fe fbb0 	bl	8004ff0 <HAL_GetTick>
 8006890:	0002      	movs	r2, r0
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	1ad3      	subs	r3, r2, r3
 8006896:	4a6a      	ldr	r2, [pc, #424]	; (8006a40 <HAL_RCC_OscConfig+0x60c>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d901      	bls.n	80068a0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800689c:	2303      	movs	r3, #3
 800689e:	e0c6      	b.n	8006a2e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80068a0:	4b65      	ldr	r3, [pc, #404]	; (8006a38 <HAL_RCC_OscConfig+0x604>)
 80068a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068a4:	2202      	movs	r2, #2
 80068a6:	4013      	ands	r3, r2
 80068a8:	d1f0      	bne.n	800688c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80068aa:	231f      	movs	r3, #31
 80068ac:	18fb      	adds	r3, r7, r3
 80068ae:	781b      	ldrb	r3, [r3, #0]
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d105      	bne.n	80068c0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80068b4:	4b60      	ldr	r3, [pc, #384]	; (8006a38 <HAL_RCC_OscConfig+0x604>)
 80068b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068b8:	4b5f      	ldr	r3, [pc, #380]	; (8006a38 <HAL_RCC_OscConfig+0x604>)
 80068ba:	4962      	ldr	r1, [pc, #392]	; (8006a44 <HAL_RCC_OscConfig+0x610>)
 80068bc:	400a      	ands	r2, r1
 80068be:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	69db      	ldr	r3, [r3, #28]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d100      	bne.n	80068ca <HAL_RCC_OscConfig+0x496>
 80068c8:	e0b0      	b.n	8006a2c <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80068ca:	4b5b      	ldr	r3, [pc, #364]	; (8006a38 <HAL_RCC_OscConfig+0x604>)
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	2238      	movs	r2, #56	; 0x38
 80068d0:	4013      	ands	r3, r2
 80068d2:	2b10      	cmp	r3, #16
 80068d4:	d100      	bne.n	80068d8 <HAL_RCC_OscConfig+0x4a4>
 80068d6:	e078      	b.n	80069ca <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	69db      	ldr	r3, [r3, #28]
 80068dc:	2b02      	cmp	r3, #2
 80068de:	d153      	bne.n	8006988 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068e0:	4b55      	ldr	r3, [pc, #340]	; (8006a38 <HAL_RCC_OscConfig+0x604>)
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	4b54      	ldr	r3, [pc, #336]	; (8006a38 <HAL_RCC_OscConfig+0x604>)
 80068e6:	4958      	ldr	r1, [pc, #352]	; (8006a48 <HAL_RCC_OscConfig+0x614>)
 80068e8:	400a      	ands	r2, r1
 80068ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068ec:	f7fe fb80 	bl	8004ff0 <HAL_GetTick>
 80068f0:	0003      	movs	r3, r0
 80068f2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80068f4:	e008      	b.n	8006908 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068f6:	f7fe fb7b 	bl	8004ff0 <HAL_GetTick>
 80068fa:	0002      	movs	r2, r0
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	1ad3      	subs	r3, r2, r3
 8006900:	2b02      	cmp	r3, #2
 8006902:	d901      	bls.n	8006908 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8006904:	2303      	movs	r3, #3
 8006906:	e092      	b.n	8006a2e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006908:	4b4b      	ldr	r3, [pc, #300]	; (8006a38 <HAL_RCC_OscConfig+0x604>)
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	2380      	movs	r3, #128	; 0x80
 800690e:	049b      	lsls	r3, r3, #18
 8006910:	4013      	ands	r3, r2
 8006912:	d1f0      	bne.n	80068f6 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006914:	4b48      	ldr	r3, [pc, #288]	; (8006a38 <HAL_RCC_OscConfig+0x604>)
 8006916:	68db      	ldr	r3, [r3, #12]
 8006918:	4a4c      	ldr	r2, [pc, #304]	; (8006a4c <HAL_RCC_OscConfig+0x618>)
 800691a:	4013      	ands	r3, r2
 800691c:	0019      	movs	r1, r3
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6a1a      	ldr	r2, [r3, #32]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006926:	431a      	orrs	r2, r3
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800692c:	021b      	lsls	r3, r3, #8
 800692e:	431a      	orrs	r2, r3
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006934:	431a      	orrs	r2, r3
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800693a:	431a      	orrs	r2, r3
 800693c:	4b3e      	ldr	r3, [pc, #248]	; (8006a38 <HAL_RCC_OscConfig+0x604>)
 800693e:	430a      	orrs	r2, r1
 8006940:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006942:	4b3d      	ldr	r3, [pc, #244]	; (8006a38 <HAL_RCC_OscConfig+0x604>)
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	4b3c      	ldr	r3, [pc, #240]	; (8006a38 <HAL_RCC_OscConfig+0x604>)
 8006948:	2180      	movs	r1, #128	; 0x80
 800694a:	0449      	lsls	r1, r1, #17
 800694c:	430a      	orrs	r2, r1
 800694e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8006950:	4b39      	ldr	r3, [pc, #228]	; (8006a38 <HAL_RCC_OscConfig+0x604>)
 8006952:	68da      	ldr	r2, [r3, #12]
 8006954:	4b38      	ldr	r3, [pc, #224]	; (8006a38 <HAL_RCC_OscConfig+0x604>)
 8006956:	2180      	movs	r1, #128	; 0x80
 8006958:	0549      	lsls	r1, r1, #21
 800695a:	430a      	orrs	r2, r1
 800695c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800695e:	f7fe fb47 	bl	8004ff0 <HAL_GetTick>
 8006962:	0003      	movs	r3, r0
 8006964:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006966:	e008      	b.n	800697a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006968:	f7fe fb42 	bl	8004ff0 <HAL_GetTick>
 800696c:	0002      	movs	r2, r0
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	1ad3      	subs	r3, r2, r3
 8006972:	2b02      	cmp	r3, #2
 8006974:	d901      	bls.n	800697a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8006976:	2303      	movs	r3, #3
 8006978:	e059      	b.n	8006a2e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800697a:	4b2f      	ldr	r3, [pc, #188]	; (8006a38 <HAL_RCC_OscConfig+0x604>)
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	2380      	movs	r3, #128	; 0x80
 8006980:	049b      	lsls	r3, r3, #18
 8006982:	4013      	ands	r3, r2
 8006984:	d0f0      	beq.n	8006968 <HAL_RCC_OscConfig+0x534>
 8006986:	e051      	b.n	8006a2c <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006988:	4b2b      	ldr	r3, [pc, #172]	; (8006a38 <HAL_RCC_OscConfig+0x604>)
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	4b2a      	ldr	r3, [pc, #168]	; (8006a38 <HAL_RCC_OscConfig+0x604>)
 800698e:	492e      	ldr	r1, [pc, #184]	; (8006a48 <HAL_RCC_OscConfig+0x614>)
 8006990:	400a      	ands	r2, r1
 8006992:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006994:	f7fe fb2c 	bl	8004ff0 <HAL_GetTick>
 8006998:	0003      	movs	r3, r0
 800699a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800699c:	e008      	b.n	80069b0 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800699e:	f7fe fb27 	bl	8004ff0 <HAL_GetTick>
 80069a2:	0002      	movs	r2, r0
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	1ad3      	subs	r3, r2, r3
 80069a8:	2b02      	cmp	r3, #2
 80069aa:	d901      	bls.n	80069b0 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80069ac:	2303      	movs	r3, #3
 80069ae:	e03e      	b.n	8006a2e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80069b0:	4b21      	ldr	r3, [pc, #132]	; (8006a38 <HAL_RCC_OscConfig+0x604>)
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	2380      	movs	r3, #128	; 0x80
 80069b6:	049b      	lsls	r3, r3, #18
 80069b8:	4013      	ands	r3, r2
 80069ba:	d1f0      	bne.n	800699e <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80069bc:	4b1e      	ldr	r3, [pc, #120]	; (8006a38 <HAL_RCC_OscConfig+0x604>)
 80069be:	68da      	ldr	r2, [r3, #12]
 80069c0:	4b1d      	ldr	r3, [pc, #116]	; (8006a38 <HAL_RCC_OscConfig+0x604>)
 80069c2:	4923      	ldr	r1, [pc, #140]	; (8006a50 <HAL_RCC_OscConfig+0x61c>)
 80069c4:	400a      	ands	r2, r1
 80069c6:	60da      	str	r2, [r3, #12]
 80069c8:	e030      	b.n	8006a2c <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	69db      	ldr	r3, [r3, #28]
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d101      	bne.n	80069d6 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	e02b      	b.n	8006a2e <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80069d6:	4b18      	ldr	r3, [pc, #96]	; (8006a38 <HAL_RCC_OscConfig+0x604>)
 80069d8:	68db      	ldr	r3, [r3, #12]
 80069da:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	2203      	movs	r2, #3
 80069e0:	401a      	ands	r2, r3
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6a1b      	ldr	r3, [r3, #32]
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d11e      	bne.n	8006a28 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	2270      	movs	r2, #112	; 0x70
 80069ee:	401a      	ands	r2, r3
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d117      	bne.n	8006a28 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80069f8:	697a      	ldr	r2, [r7, #20]
 80069fa:	23fe      	movs	r3, #254	; 0xfe
 80069fc:	01db      	lsls	r3, r3, #7
 80069fe:	401a      	ands	r2, r3
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a04:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d10e      	bne.n	8006a28 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006a0a:	697a      	ldr	r2, [r7, #20]
 8006a0c:	23f8      	movs	r3, #248	; 0xf8
 8006a0e:	039b      	lsls	r3, r3, #14
 8006a10:	401a      	ands	r2, r3
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d106      	bne.n	8006a28 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	0f5b      	lsrs	r3, r3, #29
 8006a1e:	075a      	lsls	r2, r3, #29
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d001      	beq.n	8006a2c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	e000      	b.n	8006a2e <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	0018      	movs	r0, r3
 8006a30:	46bd      	mov	sp, r7
 8006a32:	b008      	add	sp, #32
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	46c0      	nop			; (mov r8, r8)
 8006a38:	40021000 	.word	0x40021000
 8006a3c:	40007000 	.word	0x40007000
 8006a40:	00001388 	.word	0x00001388
 8006a44:	efffffff 	.word	0xefffffff
 8006a48:	feffffff 	.word	0xfeffffff
 8006a4c:	1fc1808c 	.word	0x1fc1808c
 8006a50:	effefffc 	.word	0xeffefffc

08006a54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d101      	bne.n	8006a68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a64:	2301      	movs	r3, #1
 8006a66:	e0e9      	b.n	8006c3c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006a68:	4b76      	ldr	r3, [pc, #472]	; (8006c44 <HAL_RCC_ClockConfig+0x1f0>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	2207      	movs	r2, #7
 8006a6e:	4013      	ands	r3, r2
 8006a70:	683a      	ldr	r2, [r7, #0]
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d91e      	bls.n	8006ab4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a76:	4b73      	ldr	r3, [pc, #460]	; (8006c44 <HAL_RCC_ClockConfig+0x1f0>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	2207      	movs	r2, #7
 8006a7c:	4393      	bics	r3, r2
 8006a7e:	0019      	movs	r1, r3
 8006a80:	4b70      	ldr	r3, [pc, #448]	; (8006c44 <HAL_RCC_ClockConfig+0x1f0>)
 8006a82:	683a      	ldr	r2, [r7, #0]
 8006a84:	430a      	orrs	r2, r1
 8006a86:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006a88:	f7fe fab2 	bl	8004ff0 <HAL_GetTick>
 8006a8c:	0003      	movs	r3, r0
 8006a8e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006a90:	e009      	b.n	8006aa6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a92:	f7fe faad 	bl	8004ff0 <HAL_GetTick>
 8006a96:	0002      	movs	r2, r0
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	1ad3      	subs	r3, r2, r3
 8006a9c:	4a6a      	ldr	r2, [pc, #424]	; (8006c48 <HAL_RCC_ClockConfig+0x1f4>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d901      	bls.n	8006aa6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8006aa2:	2303      	movs	r3, #3
 8006aa4:	e0ca      	b.n	8006c3c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006aa6:	4b67      	ldr	r3, [pc, #412]	; (8006c44 <HAL_RCC_ClockConfig+0x1f0>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	2207      	movs	r2, #7
 8006aac:	4013      	ands	r3, r2
 8006aae:	683a      	ldr	r2, [r7, #0]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d1ee      	bne.n	8006a92 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	2202      	movs	r2, #2
 8006aba:	4013      	ands	r3, r2
 8006abc:	d015      	beq.n	8006aea <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	2204      	movs	r2, #4
 8006ac4:	4013      	ands	r3, r2
 8006ac6:	d006      	beq.n	8006ad6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8006ac8:	4b60      	ldr	r3, [pc, #384]	; (8006c4c <HAL_RCC_ClockConfig+0x1f8>)
 8006aca:	689a      	ldr	r2, [r3, #8]
 8006acc:	4b5f      	ldr	r3, [pc, #380]	; (8006c4c <HAL_RCC_ClockConfig+0x1f8>)
 8006ace:	21e0      	movs	r1, #224	; 0xe0
 8006ad0:	01c9      	lsls	r1, r1, #7
 8006ad2:	430a      	orrs	r2, r1
 8006ad4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ad6:	4b5d      	ldr	r3, [pc, #372]	; (8006c4c <HAL_RCC_ClockConfig+0x1f8>)
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	4a5d      	ldr	r2, [pc, #372]	; (8006c50 <HAL_RCC_ClockConfig+0x1fc>)
 8006adc:	4013      	ands	r3, r2
 8006ade:	0019      	movs	r1, r3
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	689a      	ldr	r2, [r3, #8]
 8006ae4:	4b59      	ldr	r3, [pc, #356]	; (8006c4c <HAL_RCC_ClockConfig+0x1f8>)
 8006ae6:	430a      	orrs	r2, r1
 8006ae8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	2201      	movs	r2, #1
 8006af0:	4013      	ands	r3, r2
 8006af2:	d057      	beq.n	8006ba4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d107      	bne.n	8006b0c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006afc:	4b53      	ldr	r3, [pc, #332]	; (8006c4c <HAL_RCC_ClockConfig+0x1f8>)
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	2380      	movs	r3, #128	; 0x80
 8006b02:	029b      	lsls	r3, r3, #10
 8006b04:	4013      	ands	r3, r2
 8006b06:	d12b      	bne.n	8006b60 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e097      	b.n	8006c3c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	2b02      	cmp	r3, #2
 8006b12:	d107      	bne.n	8006b24 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b14:	4b4d      	ldr	r3, [pc, #308]	; (8006c4c <HAL_RCC_ClockConfig+0x1f8>)
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	2380      	movs	r3, #128	; 0x80
 8006b1a:	049b      	lsls	r3, r3, #18
 8006b1c:	4013      	ands	r3, r2
 8006b1e:	d11f      	bne.n	8006b60 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	e08b      	b.n	8006c3c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d107      	bne.n	8006b3c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b2c:	4b47      	ldr	r3, [pc, #284]	; (8006c4c <HAL_RCC_ClockConfig+0x1f8>)
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	2380      	movs	r3, #128	; 0x80
 8006b32:	00db      	lsls	r3, r3, #3
 8006b34:	4013      	ands	r3, r2
 8006b36:	d113      	bne.n	8006b60 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	e07f      	b.n	8006c3c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	2b03      	cmp	r3, #3
 8006b42:	d106      	bne.n	8006b52 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006b44:	4b41      	ldr	r3, [pc, #260]	; (8006c4c <HAL_RCC_ClockConfig+0x1f8>)
 8006b46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b48:	2202      	movs	r2, #2
 8006b4a:	4013      	ands	r3, r2
 8006b4c:	d108      	bne.n	8006b60 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e074      	b.n	8006c3c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b52:	4b3e      	ldr	r3, [pc, #248]	; (8006c4c <HAL_RCC_ClockConfig+0x1f8>)
 8006b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b56:	2202      	movs	r2, #2
 8006b58:	4013      	ands	r3, r2
 8006b5a:	d101      	bne.n	8006b60 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	e06d      	b.n	8006c3c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006b60:	4b3a      	ldr	r3, [pc, #232]	; (8006c4c <HAL_RCC_ClockConfig+0x1f8>)
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	2207      	movs	r2, #7
 8006b66:	4393      	bics	r3, r2
 8006b68:	0019      	movs	r1, r3
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	685a      	ldr	r2, [r3, #4]
 8006b6e:	4b37      	ldr	r3, [pc, #220]	; (8006c4c <HAL_RCC_ClockConfig+0x1f8>)
 8006b70:	430a      	orrs	r2, r1
 8006b72:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b74:	f7fe fa3c 	bl	8004ff0 <HAL_GetTick>
 8006b78:	0003      	movs	r3, r0
 8006b7a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b7c:	e009      	b.n	8006b92 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b7e:	f7fe fa37 	bl	8004ff0 <HAL_GetTick>
 8006b82:	0002      	movs	r2, r0
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	1ad3      	subs	r3, r2, r3
 8006b88:	4a2f      	ldr	r2, [pc, #188]	; (8006c48 <HAL_RCC_ClockConfig+0x1f4>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d901      	bls.n	8006b92 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8006b8e:	2303      	movs	r3, #3
 8006b90:	e054      	b.n	8006c3c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b92:	4b2e      	ldr	r3, [pc, #184]	; (8006c4c <HAL_RCC_ClockConfig+0x1f8>)
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	2238      	movs	r2, #56	; 0x38
 8006b98:	401a      	ands	r2, r3
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	00db      	lsls	r3, r3, #3
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d1ec      	bne.n	8006b7e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006ba4:	4b27      	ldr	r3, [pc, #156]	; (8006c44 <HAL_RCC_ClockConfig+0x1f0>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	2207      	movs	r2, #7
 8006baa:	4013      	ands	r3, r2
 8006bac:	683a      	ldr	r2, [r7, #0]
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d21e      	bcs.n	8006bf0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bb2:	4b24      	ldr	r3, [pc, #144]	; (8006c44 <HAL_RCC_ClockConfig+0x1f0>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	2207      	movs	r2, #7
 8006bb8:	4393      	bics	r3, r2
 8006bba:	0019      	movs	r1, r3
 8006bbc:	4b21      	ldr	r3, [pc, #132]	; (8006c44 <HAL_RCC_ClockConfig+0x1f0>)
 8006bbe:	683a      	ldr	r2, [r7, #0]
 8006bc0:	430a      	orrs	r2, r1
 8006bc2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006bc4:	f7fe fa14 	bl	8004ff0 <HAL_GetTick>
 8006bc8:	0003      	movs	r3, r0
 8006bca:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006bcc:	e009      	b.n	8006be2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bce:	f7fe fa0f 	bl	8004ff0 <HAL_GetTick>
 8006bd2:	0002      	movs	r2, r0
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	1ad3      	subs	r3, r2, r3
 8006bd8:	4a1b      	ldr	r2, [pc, #108]	; (8006c48 <HAL_RCC_ClockConfig+0x1f4>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d901      	bls.n	8006be2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8006bde:	2303      	movs	r3, #3
 8006be0:	e02c      	b.n	8006c3c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006be2:	4b18      	ldr	r3, [pc, #96]	; (8006c44 <HAL_RCC_ClockConfig+0x1f0>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	2207      	movs	r2, #7
 8006be8:	4013      	ands	r3, r2
 8006bea:	683a      	ldr	r2, [r7, #0]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d1ee      	bne.n	8006bce <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	2204      	movs	r2, #4
 8006bf6:	4013      	ands	r3, r2
 8006bf8:	d009      	beq.n	8006c0e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006bfa:	4b14      	ldr	r3, [pc, #80]	; (8006c4c <HAL_RCC_ClockConfig+0x1f8>)
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	4a15      	ldr	r2, [pc, #84]	; (8006c54 <HAL_RCC_ClockConfig+0x200>)
 8006c00:	4013      	ands	r3, r2
 8006c02:	0019      	movs	r1, r3
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	68da      	ldr	r2, [r3, #12]
 8006c08:	4b10      	ldr	r3, [pc, #64]	; (8006c4c <HAL_RCC_ClockConfig+0x1f8>)
 8006c0a:	430a      	orrs	r2, r1
 8006c0c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8006c0e:	f000 f829 	bl	8006c64 <HAL_RCC_GetSysClockFreq>
 8006c12:	0001      	movs	r1, r0
 8006c14:	4b0d      	ldr	r3, [pc, #52]	; (8006c4c <HAL_RCC_ClockConfig+0x1f8>)
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	0a1b      	lsrs	r3, r3, #8
 8006c1a:	220f      	movs	r2, #15
 8006c1c:	401a      	ands	r2, r3
 8006c1e:	4b0e      	ldr	r3, [pc, #56]	; (8006c58 <HAL_RCC_ClockConfig+0x204>)
 8006c20:	0092      	lsls	r2, r2, #2
 8006c22:	58d3      	ldr	r3, [r2, r3]
 8006c24:	221f      	movs	r2, #31
 8006c26:	4013      	ands	r3, r2
 8006c28:	000a      	movs	r2, r1
 8006c2a:	40da      	lsrs	r2, r3
 8006c2c:	4b0b      	ldr	r3, [pc, #44]	; (8006c5c <HAL_RCC_ClockConfig+0x208>)
 8006c2e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006c30:	4b0b      	ldr	r3, [pc, #44]	; (8006c60 <HAL_RCC_ClockConfig+0x20c>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	0018      	movs	r0, r3
 8006c36:	f7fe f97f 	bl	8004f38 <HAL_InitTick>
 8006c3a:	0003      	movs	r3, r0
}
 8006c3c:	0018      	movs	r0, r3
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	b004      	add	sp, #16
 8006c42:	bd80      	pop	{r7, pc}
 8006c44:	40022000 	.word	0x40022000
 8006c48:	00001388 	.word	0x00001388
 8006c4c:	40021000 	.word	0x40021000
 8006c50:	fffff0ff 	.word	0xfffff0ff
 8006c54:	ffff8fff 	.word	0xffff8fff
 8006c58:	08009198 	.word	0x08009198
 8006c5c:	2000001c 	.word	0x2000001c
 8006c60:	20000020 	.word	0x20000020

08006c64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b086      	sub	sp, #24
 8006c68:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006c6a:	4b3c      	ldr	r3, [pc, #240]	; (8006d5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	2238      	movs	r2, #56	; 0x38
 8006c70:	4013      	ands	r3, r2
 8006c72:	d10f      	bne.n	8006c94 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8006c74:	4b39      	ldr	r3, [pc, #228]	; (8006d5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	0adb      	lsrs	r3, r3, #11
 8006c7a:	2207      	movs	r2, #7
 8006c7c:	4013      	ands	r3, r2
 8006c7e:	2201      	movs	r2, #1
 8006c80:	409a      	lsls	r2, r3
 8006c82:	0013      	movs	r3, r2
 8006c84:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8006c86:	6839      	ldr	r1, [r7, #0]
 8006c88:	4835      	ldr	r0, [pc, #212]	; (8006d60 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006c8a:	f7f9 fa39 	bl	8000100 <__udivsi3>
 8006c8e:	0003      	movs	r3, r0
 8006c90:	613b      	str	r3, [r7, #16]
 8006c92:	e05d      	b.n	8006d50 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006c94:	4b31      	ldr	r3, [pc, #196]	; (8006d5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	2238      	movs	r2, #56	; 0x38
 8006c9a:	4013      	ands	r3, r2
 8006c9c:	2b08      	cmp	r3, #8
 8006c9e:	d102      	bne.n	8006ca6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006ca0:	4b30      	ldr	r3, [pc, #192]	; (8006d64 <HAL_RCC_GetSysClockFreq+0x100>)
 8006ca2:	613b      	str	r3, [r7, #16]
 8006ca4:	e054      	b.n	8006d50 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006ca6:	4b2d      	ldr	r3, [pc, #180]	; (8006d5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	2238      	movs	r2, #56	; 0x38
 8006cac:	4013      	ands	r3, r2
 8006cae:	2b10      	cmp	r3, #16
 8006cb0:	d138      	bne.n	8006d24 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8006cb2:	4b2a      	ldr	r3, [pc, #168]	; (8006d5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006cb4:	68db      	ldr	r3, [r3, #12]
 8006cb6:	2203      	movs	r2, #3
 8006cb8:	4013      	ands	r3, r2
 8006cba:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006cbc:	4b27      	ldr	r3, [pc, #156]	; (8006d5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006cbe:	68db      	ldr	r3, [r3, #12]
 8006cc0:	091b      	lsrs	r3, r3, #4
 8006cc2:	2207      	movs	r2, #7
 8006cc4:	4013      	ands	r3, r2
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2b03      	cmp	r3, #3
 8006cce:	d10d      	bne.n	8006cec <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006cd0:	68b9      	ldr	r1, [r7, #8]
 8006cd2:	4824      	ldr	r0, [pc, #144]	; (8006d64 <HAL_RCC_GetSysClockFreq+0x100>)
 8006cd4:	f7f9 fa14 	bl	8000100 <__udivsi3>
 8006cd8:	0003      	movs	r3, r0
 8006cda:	0019      	movs	r1, r3
 8006cdc:	4b1f      	ldr	r3, [pc, #124]	; (8006d5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	0a1b      	lsrs	r3, r3, #8
 8006ce2:	227f      	movs	r2, #127	; 0x7f
 8006ce4:	4013      	ands	r3, r2
 8006ce6:	434b      	muls	r3, r1
 8006ce8:	617b      	str	r3, [r7, #20]
        break;
 8006cea:	e00d      	b.n	8006d08 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8006cec:	68b9      	ldr	r1, [r7, #8]
 8006cee:	481c      	ldr	r0, [pc, #112]	; (8006d60 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006cf0:	f7f9 fa06 	bl	8000100 <__udivsi3>
 8006cf4:	0003      	movs	r3, r0
 8006cf6:	0019      	movs	r1, r3
 8006cf8:	4b18      	ldr	r3, [pc, #96]	; (8006d5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006cfa:	68db      	ldr	r3, [r3, #12]
 8006cfc:	0a1b      	lsrs	r3, r3, #8
 8006cfe:	227f      	movs	r2, #127	; 0x7f
 8006d00:	4013      	ands	r3, r2
 8006d02:	434b      	muls	r3, r1
 8006d04:	617b      	str	r3, [r7, #20]
        break;
 8006d06:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8006d08:	4b14      	ldr	r3, [pc, #80]	; (8006d5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006d0a:	68db      	ldr	r3, [r3, #12]
 8006d0c:	0f5b      	lsrs	r3, r3, #29
 8006d0e:	2207      	movs	r2, #7
 8006d10:	4013      	ands	r3, r2
 8006d12:	3301      	adds	r3, #1
 8006d14:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8006d16:	6879      	ldr	r1, [r7, #4]
 8006d18:	6978      	ldr	r0, [r7, #20]
 8006d1a:	f7f9 f9f1 	bl	8000100 <__udivsi3>
 8006d1e:	0003      	movs	r3, r0
 8006d20:	613b      	str	r3, [r7, #16]
 8006d22:	e015      	b.n	8006d50 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006d24:	4b0d      	ldr	r3, [pc, #52]	; (8006d5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	2238      	movs	r2, #56	; 0x38
 8006d2a:	4013      	ands	r3, r2
 8006d2c:	2b20      	cmp	r3, #32
 8006d2e:	d103      	bne.n	8006d38 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8006d30:	2380      	movs	r3, #128	; 0x80
 8006d32:	021b      	lsls	r3, r3, #8
 8006d34:	613b      	str	r3, [r7, #16]
 8006d36:	e00b      	b.n	8006d50 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006d38:	4b08      	ldr	r3, [pc, #32]	; (8006d5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	2238      	movs	r2, #56	; 0x38
 8006d3e:	4013      	ands	r3, r2
 8006d40:	2b18      	cmp	r3, #24
 8006d42:	d103      	bne.n	8006d4c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8006d44:	23fa      	movs	r3, #250	; 0xfa
 8006d46:	01db      	lsls	r3, r3, #7
 8006d48:	613b      	str	r3, [r7, #16]
 8006d4a:	e001      	b.n	8006d50 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006d50:	693b      	ldr	r3, [r7, #16]
}
 8006d52:	0018      	movs	r0, r3
 8006d54:	46bd      	mov	sp, r7
 8006d56:	b006      	add	sp, #24
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	46c0      	nop			; (mov r8, r8)
 8006d5c:	40021000 	.word	0x40021000
 8006d60:	00f42400 	.word	0x00f42400
 8006d64:	007a1200 	.word	0x007a1200

08006d68 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d6c:	4b02      	ldr	r3, [pc, #8]	; (8006d78 <HAL_RCC_GetHCLKFreq+0x10>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
}
 8006d70:	0018      	movs	r0, r3
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	46c0      	nop			; (mov r8, r8)
 8006d78:	2000001c 	.word	0x2000001c

08006d7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d7c:	b5b0      	push	{r4, r5, r7, lr}
 8006d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006d80:	f7ff fff2 	bl	8006d68 <HAL_RCC_GetHCLKFreq>
 8006d84:	0004      	movs	r4, r0
 8006d86:	f7ff fb49 	bl	800641c <LL_RCC_GetAPB1Prescaler>
 8006d8a:	0003      	movs	r3, r0
 8006d8c:	0b1a      	lsrs	r2, r3, #12
 8006d8e:	4b05      	ldr	r3, [pc, #20]	; (8006da4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006d90:	0092      	lsls	r2, r2, #2
 8006d92:	58d3      	ldr	r3, [r2, r3]
 8006d94:	221f      	movs	r2, #31
 8006d96:	4013      	ands	r3, r2
 8006d98:	40dc      	lsrs	r4, r3
 8006d9a:	0023      	movs	r3, r4
}
 8006d9c:	0018      	movs	r0, r3
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bdb0      	pop	{r4, r5, r7, pc}
 8006da2:	46c0      	nop			; (mov r8, r8)
 8006da4:	080091d8 	.word	0x080091d8

08006da8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b086      	sub	sp, #24
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8006db0:	2313      	movs	r3, #19
 8006db2:	18fb      	adds	r3, r7, r3
 8006db4:	2200      	movs	r2, #0
 8006db6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006db8:	2312      	movs	r3, #18
 8006dba:	18fb      	adds	r3, r7, r3
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	2380      	movs	r3, #128	; 0x80
 8006dc6:	029b      	lsls	r3, r3, #10
 8006dc8:	4013      	ands	r3, r2
 8006dca:	d100      	bne.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x26>
 8006dcc:	e0a3      	b.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006dce:	2011      	movs	r0, #17
 8006dd0:	183b      	adds	r3, r7, r0
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006dd6:	4b7f      	ldr	r3, [pc, #508]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006dd8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006dda:	2380      	movs	r3, #128	; 0x80
 8006ddc:	055b      	lsls	r3, r3, #21
 8006dde:	4013      	ands	r3, r2
 8006de0:	d110      	bne.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006de2:	4b7c      	ldr	r3, [pc, #496]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006de4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006de6:	4b7b      	ldr	r3, [pc, #492]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006de8:	2180      	movs	r1, #128	; 0x80
 8006dea:	0549      	lsls	r1, r1, #21
 8006dec:	430a      	orrs	r2, r1
 8006dee:	63da      	str	r2, [r3, #60]	; 0x3c
 8006df0:	4b78      	ldr	r3, [pc, #480]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006df2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006df4:	2380      	movs	r3, #128	; 0x80
 8006df6:	055b      	lsls	r3, r3, #21
 8006df8:	4013      	ands	r3, r2
 8006dfa:	60bb      	str	r3, [r7, #8]
 8006dfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006dfe:	183b      	adds	r3, r7, r0
 8006e00:	2201      	movs	r2, #1
 8006e02:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006e04:	4b74      	ldr	r3, [pc, #464]	; (8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	4b73      	ldr	r3, [pc, #460]	; (8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006e0a:	2180      	movs	r1, #128	; 0x80
 8006e0c:	0049      	lsls	r1, r1, #1
 8006e0e:	430a      	orrs	r2, r1
 8006e10:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006e12:	f7fe f8ed 	bl	8004ff0 <HAL_GetTick>
 8006e16:	0003      	movs	r3, r0
 8006e18:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e1a:	e00b      	b.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e1c:	f7fe f8e8 	bl	8004ff0 <HAL_GetTick>
 8006e20:	0002      	movs	r2, r0
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	1ad3      	subs	r3, r2, r3
 8006e26:	2b02      	cmp	r3, #2
 8006e28:	d904      	bls.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8006e2a:	2313      	movs	r3, #19
 8006e2c:	18fb      	adds	r3, r7, r3
 8006e2e:	2203      	movs	r2, #3
 8006e30:	701a      	strb	r2, [r3, #0]
        break;
 8006e32:	e005      	b.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e34:	4b68      	ldr	r3, [pc, #416]	; (8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	2380      	movs	r3, #128	; 0x80
 8006e3a:	005b      	lsls	r3, r3, #1
 8006e3c:	4013      	ands	r3, r2
 8006e3e:	d0ed      	beq.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8006e40:	2313      	movs	r3, #19
 8006e42:	18fb      	adds	r3, r7, r3
 8006e44:	781b      	ldrb	r3, [r3, #0]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d154      	bne.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006e4a:	4b62      	ldr	r3, [pc, #392]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006e4c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006e4e:	23c0      	movs	r3, #192	; 0xc0
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	4013      	ands	r3, r2
 8006e54:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d019      	beq.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	695b      	ldr	r3, [r3, #20]
 8006e60:	697a      	ldr	r2, [r7, #20]
 8006e62:	429a      	cmp	r2, r3
 8006e64:	d014      	beq.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006e66:	4b5b      	ldr	r3, [pc, #364]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e6a:	4a5c      	ldr	r2, [pc, #368]	; (8006fdc <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8006e6c:	4013      	ands	r3, r2
 8006e6e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006e70:	4b58      	ldr	r3, [pc, #352]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006e72:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006e74:	4b57      	ldr	r3, [pc, #348]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006e76:	2180      	movs	r1, #128	; 0x80
 8006e78:	0249      	lsls	r1, r1, #9
 8006e7a:	430a      	orrs	r2, r1
 8006e7c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006e7e:	4b55      	ldr	r3, [pc, #340]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006e80:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006e82:	4b54      	ldr	r3, [pc, #336]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006e84:	4956      	ldr	r1, [pc, #344]	; (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8006e86:	400a      	ands	r2, r1
 8006e88:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006e8a:	4b52      	ldr	r3, [pc, #328]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006e8c:	697a      	ldr	r2, [r7, #20]
 8006e8e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	2201      	movs	r2, #1
 8006e94:	4013      	ands	r3, r2
 8006e96:	d016      	beq.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e98:	f7fe f8aa 	bl	8004ff0 <HAL_GetTick>
 8006e9c:	0003      	movs	r3, r0
 8006e9e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ea0:	e00c      	b.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ea2:	f7fe f8a5 	bl	8004ff0 <HAL_GetTick>
 8006ea6:	0002      	movs	r2, r0
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	1ad3      	subs	r3, r2, r3
 8006eac:	4a4d      	ldr	r2, [pc, #308]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d904      	bls.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8006eb2:	2313      	movs	r3, #19
 8006eb4:	18fb      	adds	r3, r7, r3
 8006eb6:	2203      	movs	r2, #3
 8006eb8:	701a      	strb	r2, [r3, #0]
            break;
 8006eba:	e004      	b.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ebc:	4b45      	ldr	r3, [pc, #276]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ec0:	2202      	movs	r2, #2
 8006ec2:	4013      	ands	r3, r2
 8006ec4:	d0ed      	beq.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8006ec6:	2313      	movs	r3, #19
 8006ec8:	18fb      	adds	r3, r7, r3
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d10a      	bne.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ed0:	4b40      	ldr	r3, [pc, #256]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ed4:	4a41      	ldr	r2, [pc, #260]	; (8006fdc <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8006ed6:	4013      	ands	r3, r2
 8006ed8:	0019      	movs	r1, r3
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	695a      	ldr	r2, [r3, #20]
 8006ede:	4b3d      	ldr	r3, [pc, #244]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006ee0:	430a      	orrs	r2, r1
 8006ee2:	65da      	str	r2, [r3, #92]	; 0x5c
 8006ee4:	e00c      	b.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006ee6:	2312      	movs	r3, #18
 8006ee8:	18fb      	adds	r3, r7, r3
 8006eea:	2213      	movs	r2, #19
 8006eec:	18ba      	adds	r2, r7, r2
 8006eee:	7812      	ldrb	r2, [r2, #0]
 8006ef0:	701a      	strb	r2, [r3, #0]
 8006ef2:	e005      	b.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ef4:	2312      	movs	r3, #18
 8006ef6:	18fb      	adds	r3, r7, r3
 8006ef8:	2213      	movs	r2, #19
 8006efa:	18ba      	adds	r2, r7, r2
 8006efc:	7812      	ldrb	r2, [r2, #0]
 8006efe:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006f00:	2311      	movs	r3, #17
 8006f02:	18fb      	adds	r3, r7, r3
 8006f04:	781b      	ldrb	r3, [r3, #0]
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d105      	bne.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f0a:	4b32      	ldr	r3, [pc, #200]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006f0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f0e:	4b31      	ldr	r3, [pc, #196]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006f10:	4935      	ldr	r1, [pc, #212]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006f12:	400a      	ands	r2, r1
 8006f14:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	4013      	ands	r3, r2
 8006f1e:	d009      	beq.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006f20:	4b2c      	ldr	r3, [pc, #176]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f24:	2203      	movs	r2, #3
 8006f26:	4393      	bics	r3, r2
 8006f28:	0019      	movs	r1, r3
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	685a      	ldr	r2, [r3, #4]
 8006f2e:	4b29      	ldr	r3, [pc, #164]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006f30:	430a      	orrs	r2, r1
 8006f32:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	2220      	movs	r2, #32
 8006f3a:	4013      	ands	r3, r2
 8006f3c:	d009      	beq.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006f3e:	4b25      	ldr	r3, [pc, #148]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f42:	4a2a      	ldr	r2, [pc, #168]	; (8006fec <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8006f44:	4013      	ands	r3, r2
 8006f46:	0019      	movs	r1, r3
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	689a      	ldr	r2, [r3, #8]
 8006f4c:	4b21      	ldr	r3, [pc, #132]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006f4e:	430a      	orrs	r2, r1
 8006f50:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	2380      	movs	r3, #128	; 0x80
 8006f58:	01db      	lsls	r3, r3, #7
 8006f5a:	4013      	ands	r3, r2
 8006f5c:	d015      	beq.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006f5e:	4b1d      	ldr	r3, [pc, #116]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f62:	009b      	lsls	r3, r3, #2
 8006f64:	0899      	lsrs	r1, r3, #2
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	691a      	ldr	r2, [r3, #16]
 8006f6a:	4b1a      	ldr	r3, [pc, #104]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006f6c:	430a      	orrs	r2, r1
 8006f6e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	691a      	ldr	r2, [r3, #16]
 8006f74:	2380      	movs	r3, #128	; 0x80
 8006f76:	05db      	lsls	r3, r3, #23
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d106      	bne.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006f7c:	4b15      	ldr	r3, [pc, #84]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006f7e:	68da      	ldr	r2, [r3, #12]
 8006f80:	4b14      	ldr	r3, [pc, #80]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006f82:	2180      	movs	r1, #128	; 0x80
 8006f84:	0249      	lsls	r1, r1, #9
 8006f86:	430a      	orrs	r2, r1
 8006f88:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681a      	ldr	r2, [r3, #0]
 8006f8e:	2380      	movs	r3, #128	; 0x80
 8006f90:	011b      	lsls	r3, r3, #4
 8006f92:	4013      	ands	r3, r2
 8006f94:	d016      	beq.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8006f96:	4b0f      	ldr	r3, [pc, #60]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f9a:	4a15      	ldr	r2, [pc, #84]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006f9c:	4013      	ands	r3, r2
 8006f9e:	0019      	movs	r1, r3
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	68da      	ldr	r2, [r3, #12]
 8006fa4:	4b0b      	ldr	r3, [pc, #44]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006fa6:	430a      	orrs	r2, r1
 8006fa8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	68da      	ldr	r2, [r3, #12]
 8006fae:	2380      	movs	r3, #128	; 0x80
 8006fb0:	01db      	lsls	r3, r3, #7
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d106      	bne.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006fb6:	4b07      	ldr	r3, [pc, #28]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006fb8:	68da      	ldr	r2, [r3, #12]
 8006fba:	4b06      	ldr	r3, [pc, #24]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006fbc:	2180      	movs	r1, #128	; 0x80
 8006fbe:	0249      	lsls	r1, r1, #9
 8006fc0:	430a      	orrs	r2, r1
 8006fc2:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8006fc4:	2312      	movs	r3, #18
 8006fc6:	18fb      	adds	r3, r7, r3
 8006fc8:	781b      	ldrb	r3, [r3, #0]
}
 8006fca:	0018      	movs	r0, r3
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	b006      	add	sp, #24
 8006fd0:	bd80      	pop	{r7, pc}
 8006fd2:	46c0      	nop			; (mov r8, r8)
 8006fd4:	40021000 	.word	0x40021000
 8006fd8:	40007000 	.word	0x40007000
 8006fdc:	fffffcff 	.word	0xfffffcff
 8006fe0:	fffeffff 	.word	0xfffeffff
 8006fe4:	00001388 	.word	0x00001388
 8006fe8:	efffffff 	.word	0xefffffff
 8006fec:	ffffcfff 	.word	0xffffcfff
 8006ff0:	ffff3fff 	.word	0xffff3fff

08006ff4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006ff4:	b5b0      	push	{r4, r5, r7, lr}
 8006ff6:	b084      	sub	sp, #16
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006ffc:	230f      	movs	r3, #15
 8006ffe:	18fb      	adds	r3, r7, r3
 8007000:	2201      	movs	r2, #1
 8007002:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d100      	bne.n	800700c <HAL_RTC_Init+0x18>
 800700a:	e08c      	b.n	8007126 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2229      	movs	r2, #41	; 0x29
 8007010:	5c9b      	ldrb	r3, [r3, r2]
 8007012:	b2db      	uxtb	r3, r3
 8007014:	2b00      	cmp	r3, #0
 8007016:	d10b      	bne.n	8007030 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2228      	movs	r2, #40	; 0x28
 800701c:	2100      	movs	r1, #0
 800701e:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2288      	movs	r2, #136	; 0x88
 8007024:	0212      	lsls	r2, r2, #8
 8007026:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	0018      	movs	r0, r3
 800702c:	f7fd fd0c 	bl	8004a48 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2229      	movs	r2, #41	; 0x29
 8007034:	2102      	movs	r1, #2
 8007036:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	68db      	ldr	r3, [r3, #12]
 800703e:	2210      	movs	r2, #16
 8007040:	4013      	ands	r3, r2
 8007042:	2b10      	cmp	r3, #16
 8007044:	d062      	beq.n	800710c <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	22ca      	movs	r2, #202	; 0xca
 800704c:	625a      	str	r2, [r3, #36]	; 0x24
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	2253      	movs	r2, #83	; 0x53
 8007054:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8007056:	250f      	movs	r5, #15
 8007058:	197c      	adds	r4, r7, r5
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	0018      	movs	r0, r3
 800705e:	f000 fa75 	bl	800754c <RTC_EnterInitMode>
 8007062:	0003      	movs	r3, r0
 8007064:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8007066:	0028      	movs	r0, r5
 8007068:	183b      	adds	r3, r7, r0
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d12c      	bne.n	80070ca <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	699a      	ldr	r2, [r3, #24]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	492e      	ldr	r1, [pc, #184]	; (8007134 <HAL_RTC_Init+0x140>)
 800707c:	400a      	ands	r2, r1
 800707e:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	6999      	ldr	r1, [r3, #24]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	689a      	ldr	r2, [r3, #8]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	695b      	ldr	r3, [r3, #20]
 800708e:	431a      	orrs	r2, r3
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	69db      	ldr	r3, [r3, #28]
 8007094:	431a      	orrs	r2, r3
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	430a      	orrs	r2, r1
 800709c:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	687a      	ldr	r2, [r7, #4]
 80070a4:	6912      	ldr	r2, [r2, #16]
 80070a6:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	6919      	ldr	r1, [r3, #16]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	68db      	ldr	r3, [r3, #12]
 80070b2:	041a      	lsls	r2, r3, #16
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	430a      	orrs	r2, r1
 80070ba:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80070bc:	183c      	adds	r4, r7, r0
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	0018      	movs	r0, r3
 80070c2:	f000 fa85 	bl	80075d0 <RTC_ExitInitMode>
 80070c6:	0003      	movs	r3, r0
 80070c8:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 80070ca:	230f      	movs	r3, #15
 80070cc:	18fb      	adds	r3, r7, r3
 80070ce:	781b      	ldrb	r3, [r3, #0]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d116      	bne.n	8007102 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	699a      	ldr	r2, [r3, #24]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	00d2      	lsls	r2, r2, #3
 80070e0:	08d2      	lsrs	r2, r2, #3
 80070e2:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	6999      	ldr	r1, [r3, #24]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6a1b      	ldr	r3, [r3, #32]
 80070f2:	431a      	orrs	r2, r3
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	699b      	ldr	r3, [r3, #24]
 80070f8:	431a      	orrs	r2, r3
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	430a      	orrs	r2, r1
 8007100:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	22ff      	movs	r2, #255	; 0xff
 8007108:	625a      	str	r2, [r3, #36]	; 0x24
 800710a:	e003      	b.n	8007114 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800710c:	230f      	movs	r3, #15
 800710e:	18fb      	adds	r3, r7, r3
 8007110:	2200      	movs	r2, #0
 8007112:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8007114:	230f      	movs	r3, #15
 8007116:	18fb      	adds	r3, r7, r3
 8007118:	781b      	ldrb	r3, [r3, #0]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d103      	bne.n	8007126 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2229      	movs	r2, #41	; 0x29
 8007122:	2101      	movs	r1, #1
 8007124:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8007126:	230f      	movs	r3, #15
 8007128:	18fb      	adds	r3, r7, r3
 800712a:	781b      	ldrb	r3, [r3, #0]
}
 800712c:	0018      	movs	r0, r3
 800712e:	46bd      	mov	sp, r7
 8007130:	b004      	add	sp, #16
 8007132:	bdb0      	pop	{r4, r5, r7, pc}
 8007134:	fb8fffbf 	.word	0xfb8fffbf

08007138 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007138:	b5b0      	push	{r4, r5, r7, lr}
 800713a:	b086      	sub	sp, #24
 800713c:	af00      	add	r7, sp, #0
 800713e:	60f8      	str	r0, [r7, #12]
 8007140:	60b9      	str	r1, [r7, #8]
 8007142:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2228      	movs	r2, #40	; 0x28
 8007148:	5c9b      	ldrb	r3, [r3, r2]
 800714a:	2b01      	cmp	r3, #1
 800714c:	d101      	bne.n	8007152 <HAL_RTC_SetTime+0x1a>
 800714e:	2302      	movs	r3, #2
 8007150:	e092      	b.n	8007278 <HAL_RTC_SetTime+0x140>
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2228      	movs	r2, #40	; 0x28
 8007156:	2101      	movs	r1, #1
 8007158:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2229      	movs	r2, #41	; 0x29
 800715e:	2102      	movs	r1, #2
 8007160:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	22ca      	movs	r2, #202	; 0xca
 8007168:	625a      	str	r2, [r3, #36]	; 0x24
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	2253      	movs	r2, #83	; 0x53
 8007170:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007172:	2513      	movs	r5, #19
 8007174:	197c      	adds	r4, r7, r5
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	0018      	movs	r0, r3
 800717a:	f000 f9e7 	bl	800754c <RTC_EnterInitMode>
 800717e:	0003      	movs	r3, r0
 8007180:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8007182:	197b      	adds	r3, r7, r5
 8007184:	781b      	ldrb	r3, [r3, #0]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d162      	bne.n	8007250 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d125      	bne.n	80071dc <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	699b      	ldr	r3, [r3, #24]
 8007196:	2240      	movs	r2, #64	; 0x40
 8007198:	4013      	ands	r3, r2
 800719a:	d102      	bne.n	80071a2 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	2200      	movs	r2, #0
 80071a0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	0018      	movs	r0, r3
 80071a8:	f000 fa56 	bl	8007658 <RTC_ByteToBcd2>
 80071ac:	0003      	movs	r3, r0
 80071ae:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	785b      	ldrb	r3, [r3, #1]
 80071b4:	0018      	movs	r0, r3
 80071b6:	f000 fa4f 	bl	8007658 <RTC_ByteToBcd2>
 80071ba:	0003      	movs	r3, r0
 80071bc:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80071be:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	789b      	ldrb	r3, [r3, #2]
 80071c4:	0018      	movs	r0, r3
 80071c6:	f000 fa47 	bl	8007658 <RTC_ByteToBcd2>
 80071ca:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80071cc:	0022      	movs	r2, r4
 80071ce:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	78db      	ldrb	r3, [r3, #3]
 80071d4:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80071d6:	4313      	orrs	r3, r2
 80071d8:	617b      	str	r3, [r7, #20]
 80071da:	e017      	b.n	800720c <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	699b      	ldr	r3, [r3, #24]
 80071e2:	2240      	movs	r2, #64	; 0x40
 80071e4:	4013      	ands	r3, r2
 80071e6:	d102      	bne.n	80071ee <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	2200      	movs	r2, #0
 80071ec:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	785b      	ldrb	r3, [r3, #1]
 80071f8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80071fa:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80071fc:	68ba      	ldr	r2, [r7, #8]
 80071fe:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007200:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	78db      	ldrb	r3, [r3, #3]
 8007206:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007208:	4313      	orrs	r3, r2
 800720a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	697a      	ldr	r2, [r7, #20]
 8007212:	491b      	ldr	r1, [pc, #108]	; (8007280 <HAL_RTC_SetTime+0x148>)
 8007214:	400a      	ands	r2, r1
 8007216:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	699a      	ldr	r2, [r3, #24]
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4918      	ldr	r1, [pc, #96]	; (8007284 <HAL_RTC_SetTime+0x14c>)
 8007224:	400a      	ands	r2, r1
 8007226:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	6999      	ldr	r1, [r3, #24]
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	68da      	ldr	r2, [r3, #12]
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	691b      	ldr	r3, [r3, #16]
 8007236:	431a      	orrs	r2, r3
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	430a      	orrs	r2, r1
 800723e:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007240:	2313      	movs	r3, #19
 8007242:	18fc      	adds	r4, r7, r3
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	0018      	movs	r0, r3
 8007248:	f000 f9c2 	bl	80075d0 <RTC_ExitInitMode>
 800724c:	0003      	movs	r3, r0
 800724e:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	22ff      	movs	r2, #255	; 0xff
 8007256:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8007258:	2313      	movs	r3, #19
 800725a:	18fb      	adds	r3, r7, r3
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d103      	bne.n	800726a <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2229      	movs	r2, #41	; 0x29
 8007266:	2101      	movs	r1, #1
 8007268:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2228      	movs	r2, #40	; 0x28
 800726e:	2100      	movs	r1, #0
 8007270:	5499      	strb	r1, [r3, r2]

  return status;
 8007272:	2313      	movs	r3, #19
 8007274:	18fb      	adds	r3, r7, r3
 8007276:	781b      	ldrb	r3, [r3, #0]
}
 8007278:	0018      	movs	r0, r3
 800727a:	46bd      	mov	sp, r7
 800727c:	b006      	add	sp, #24
 800727e:	bdb0      	pop	{r4, r5, r7, pc}
 8007280:	007f7f7f 	.word	0x007f7f7f
 8007284:	fffbffff 	.word	0xfffbffff

08007288 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b086      	sub	sp, #24
 800728c:	af00      	add	r7, sp, #0
 800728e:	60f8      	str	r0, [r7, #12]
 8007290:	60b9      	str	r1, [r7, #8]
 8007292:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	689a      	ldr	r2, [r3, #8]
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	691b      	ldr	r3, [r3, #16]
 80072a4:	045b      	lsls	r3, r3, #17
 80072a6:	0c5a      	lsrs	r2, r3, #17
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a22      	ldr	r2, [pc, #136]	; (800733c <HAL_RTC_GetTime+0xb4>)
 80072b4:	4013      	ands	r3, r2
 80072b6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	0c1b      	lsrs	r3, r3, #16
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	223f      	movs	r2, #63	; 0x3f
 80072c0:	4013      	ands	r3, r2
 80072c2:	b2da      	uxtb	r2, r3
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	0a1b      	lsrs	r3, r3, #8
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	227f      	movs	r2, #127	; 0x7f
 80072d0:	4013      	ands	r3, r2
 80072d2:	b2da      	uxtb	r2, r3
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	b2db      	uxtb	r3, r3
 80072dc:	227f      	movs	r2, #127	; 0x7f
 80072de:	4013      	ands	r3, r2
 80072e0:	b2da      	uxtb	r2, r3
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	0d9b      	lsrs	r3, r3, #22
 80072ea:	b2db      	uxtb	r3, r3
 80072ec:	2201      	movs	r2, #1
 80072ee:	4013      	ands	r3, r2
 80072f0:	b2da      	uxtb	r2, r3
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d11a      	bne.n	8007332 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	781b      	ldrb	r3, [r3, #0]
 8007300:	0018      	movs	r0, r3
 8007302:	f000 f9d1 	bl	80076a8 <RTC_Bcd2ToByte>
 8007306:	0003      	movs	r3, r0
 8007308:	001a      	movs	r2, r3
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	785b      	ldrb	r3, [r3, #1]
 8007312:	0018      	movs	r0, r3
 8007314:	f000 f9c8 	bl	80076a8 <RTC_Bcd2ToByte>
 8007318:	0003      	movs	r3, r0
 800731a:	001a      	movs	r2, r3
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	789b      	ldrb	r3, [r3, #2]
 8007324:	0018      	movs	r0, r3
 8007326:	f000 f9bf 	bl	80076a8 <RTC_Bcd2ToByte>
 800732a:	0003      	movs	r3, r0
 800732c:	001a      	movs	r2, r3
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8007332:	2300      	movs	r3, #0
}
 8007334:	0018      	movs	r0, r3
 8007336:	46bd      	mov	sp, r7
 8007338:	b006      	add	sp, #24
 800733a:	bd80      	pop	{r7, pc}
 800733c:	007f7f7f 	.word	0x007f7f7f

08007340 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007340:	b5b0      	push	{r4, r5, r7, lr}
 8007342:	b086      	sub	sp, #24
 8007344:	af00      	add	r7, sp, #0
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	60b9      	str	r1, [r7, #8]
 800734a:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2228      	movs	r2, #40	; 0x28
 8007350:	5c9b      	ldrb	r3, [r3, r2]
 8007352:	2b01      	cmp	r3, #1
 8007354:	d101      	bne.n	800735a <HAL_RTC_SetDate+0x1a>
 8007356:	2302      	movs	r3, #2
 8007358:	e07e      	b.n	8007458 <HAL_RTC_SetDate+0x118>
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2228      	movs	r2, #40	; 0x28
 800735e:	2101      	movs	r1, #1
 8007360:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2229      	movs	r2, #41	; 0x29
 8007366:	2102      	movs	r1, #2
 8007368:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d10e      	bne.n	800738e <HAL_RTC_SetDate+0x4e>
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	785b      	ldrb	r3, [r3, #1]
 8007374:	001a      	movs	r2, r3
 8007376:	2310      	movs	r3, #16
 8007378:	4013      	ands	r3, r2
 800737a:	d008      	beq.n	800738e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	785b      	ldrb	r3, [r3, #1]
 8007380:	2210      	movs	r2, #16
 8007382:	4393      	bics	r3, r2
 8007384:	b2db      	uxtb	r3, r3
 8007386:	330a      	adds	r3, #10
 8007388:	b2da      	uxtb	r2, r3
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d11c      	bne.n	80073ce <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	78db      	ldrb	r3, [r3, #3]
 8007398:	0018      	movs	r0, r3
 800739a:	f000 f95d 	bl	8007658 <RTC_ByteToBcd2>
 800739e:	0003      	movs	r3, r0
 80073a0:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	785b      	ldrb	r3, [r3, #1]
 80073a6:	0018      	movs	r0, r3
 80073a8:	f000 f956 	bl	8007658 <RTC_ByteToBcd2>
 80073ac:	0003      	movs	r3, r0
 80073ae:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80073b0:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	789b      	ldrb	r3, [r3, #2]
 80073b6:	0018      	movs	r0, r3
 80073b8:	f000 f94e 	bl	8007658 <RTC_ByteToBcd2>
 80073bc:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80073be:	0022      	movs	r2, r4
 80073c0:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80073c8:	4313      	orrs	r3, r2
 80073ca:	617b      	str	r3, [r7, #20]
 80073cc:	e00e      	b.n	80073ec <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	78db      	ldrb	r3, [r3, #3]
 80073d2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	785b      	ldrb	r3, [r3, #1]
 80073d8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80073da:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 80073dc:	68ba      	ldr	r2, [r7, #8]
 80073de:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80073e0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80073e8:	4313      	orrs	r3, r2
 80073ea:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	22ca      	movs	r2, #202	; 0xca
 80073f2:	625a      	str	r2, [r3, #36]	; 0x24
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	2253      	movs	r2, #83	; 0x53
 80073fa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80073fc:	2513      	movs	r5, #19
 80073fe:	197c      	adds	r4, r7, r5
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	0018      	movs	r0, r3
 8007404:	f000 f8a2 	bl	800754c <RTC_EnterInitMode>
 8007408:	0003      	movs	r3, r0
 800740a:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 800740c:	0028      	movs	r0, r5
 800740e:	183b      	adds	r3, r7, r0
 8007410:	781b      	ldrb	r3, [r3, #0]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d10c      	bne.n	8007430 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	697a      	ldr	r2, [r7, #20]
 800741c:	4910      	ldr	r1, [pc, #64]	; (8007460 <HAL_RTC_SetDate+0x120>)
 800741e:	400a      	ands	r2, r1
 8007420:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007422:	183c      	adds	r4, r7, r0
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	0018      	movs	r0, r3
 8007428:	f000 f8d2 	bl	80075d0 <RTC_ExitInitMode>
 800742c:	0003      	movs	r3, r0
 800742e:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	22ff      	movs	r2, #255	; 0xff
 8007436:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8007438:	2313      	movs	r3, #19
 800743a:	18fb      	adds	r3, r7, r3
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d103      	bne.n	800744a <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2229      	movs	r2, #41	; 0x29
 8007446:	2101      	movs	r1, #1
 8007448:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2228      	movs	r2, #40	; 0x28
 800744e:	2100      	movs	r1, #0
 8007450:	5499      	strb	r1, [r3, r2]

  return status;
 8007452:	2313      	movs	r3, #19
 8007454:	18fb      	adds	r3, r7, r3
 8007456:	781b      	ldrb	r3, [r3, #0]
}
 8007458:	0018      	movs	r0, r3
 800745a:	46bd      	mov	sp, r7
 800745c:	b006      	add	sp, #24
 800745e:	bdb0      	pop	{r4, r5, r7, pc}
 8007460:	00ffff3f 	.word	0x00ffff3f

08007464 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b086      	sub	sp, #24
 8007468:	af00      	add	r7, sp, #0
 800746a:	60f8      	str	r0, [r7, #12]
 800746c:	60b9      	str	r1, [r7, #8]
 800746e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	4a21      	ldr	r2, [pc, #132]	; (80074fc <HAL_RTC_GetDate+0x98>)
 8007478:	4013      	ands	r3, r2
 800747a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	0c1b      	lsrs	r3, r3, #16
 8007480:	b2da      	uxtb	r2, r3
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	0a1b      	lsrs	r3, r3, #8
 800748a:	b2db      	uxtb	r3, r3
 800748c:	221f      	movs	r2, #31
 800748e:	4013      	ands	r3, r2
 8007490:	b2da      	uxtb	r2, r3
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	b2db      	uxtb	r3, r3
 800749a:	223f      	movs	r2, #63	; 0x3f
 800749c:	4013      	ands	r3, r2
 800749e:	b2da      	uxtb	r2, r3
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	0b5b      	lsrs	r3, r3, #13
 80074a8:	b2db      	uxtb	r3, r3
 80074aa:	2207      	movs	r2, #7
 80074ac:	4013      	ands	r3, r2
 80074ae:	b2da      	uxtb	r2, r3
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d11a      	bne.n	80074f0 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	78db      	ldrb	r3, [r3, #3]
 80074be:	0018      	movs	r0, r3
 80074c0:	f000 f8f2 	bl	80076a8 <RTC_Bcd2ToByte>
 80074c4:	0003      	movs	r3, r0
 80074c6:	001a      	movs	r2, r3
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	785b      	ldrb	r3, [r3, #1]
 80074d0:	0018      	movs	r0, r3
 80074d2:	f000 f8e9 	bl	80076a8 <RTC_Bcd2ToByte>
 80074d6:	0003      	movs	r3, r0
 80074d8:	001a      	movs	r2, r3
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	789b      	ldrb	r3, [r3, #2]
 80074e2:	0018      	movs	r0, r3
 80074e4:	f000 f8e0 	bl	80076a8 <RTC_Bcd2ToByte>
 80074e8:	0003      	movs	r3, r0
 80074ea:	001a      	movs	r2, r3
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80074f0:	2300      	movs	r3, #0
}
 80074f2:	0018      	movs	r0, r3
 80074f4:	46bd      	mov	sp, r7
 80074f6:	b006      	add	sp, #24
 80074f8:	bd80      	pop	{r7, pc}
 80074fa:	46c0      	nop			; (mov r8, r8)
 80074fc:	00ffff3f 	.word	0x00ffff3f

08007500 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b084      	sub	sp, #16
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a0e      	ldr	r2, [pc, #56]	; (8007548 <HAL_RTC_WaitForSynchro+0x48>)
 800750e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007510:	f7fd fd6e 	bl	8004ff0 <HAL_GetTick>
 8007514:	0003      	movs	r3, r0
 8007516:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8007518:	e00a      	b.n	8007530 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800751a:	f7fd fd69 	bl	8004ff0 <HAL_GetTick>
 800751e:	0002      	movs	r2, r0
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	1ad2      	subs	r2, r2, r3
 8007524:	23fa      	movs	r3, #250	; 0xfa
 8007526:	009b      	lsls	r3, r3, #2
 8007528:	429a      	cmp	r2, r3
 800752a:	d901      	bls.n	8007530 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800752c:	2303      	movs	r3, #3
 800752e:	e006      	b.n	800753e <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	68db      	ldr	r3, [r3, #12]
 8007536:	2220      	movs	r2, #32
 8007538:	4013      	ands	r3, r2
 800753a:	d0ee      	beq.n	800751a <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 800753c:	2300      	movs	r3, #0
}
 800753e:	0018      	movs	r0, r3
 8007540:	46bd      	mov	sp, r7
 8007542:	b004      	add	sp, #16
 8007544:	bd80      	pop	{r7, pc}
 8007546:	46c0      	nop			; (mov r8, r8)
 8007548:	0001005f 	.word	0x0001005f

0800754c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b084      	sub	sp, #16
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8007554:	230f      	movs	r3, #15
 8007556:	18fb      	adds	r3, r7, r3
 8007558:	2200      	movs	r2, #0
 800755a:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	68db      	ldr	r3, [r3, #12]
 8007562:	2240      	movs	r2, #64	; 0x40
 8007564:	4013      	ands	r3, r2
 8007566:	d12c      	bne.n	80075c2 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	68da      	ldr	r2, [r3, #12]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	2180      	movs	r1, #128	; 0x80
 8007574:	430a      	orrs	r2, r1
 8007576:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007578:	f7fd fd3a 	bl	8004ff0 <HAL_GetTick>
 800757c:	0003      	movs	r3, r0
 800757e:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007580:	e014      	b.n	80075ac <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8007582:	f7fd fd35 	bl	8004ff0 <HAL_GetTick>
 8007586:	0002      	movs	r2, r0
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	1ad2      	subs	r2, r2, r3
 800758c:	200f      	movs	r0, #15
 800758e:	183b      	adds	r3, r7, r0
 8007590:	1839      	adds	r1, r7, r0
 8007592:	7809      	ldrb	r1, [r1, #0]
 8007594:	7019      	strb	r1, [r3, #0]
 8007596:	23fa      	movs	r3, #250	; 0xfa
 8007598:	009b      	lsls	r3, r3, #2
 800759a:	429a      	cmp	r2, r3
 800759c:	d906      	bls.n	80075ac <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 800759e:	183b      	adds	r3, r7, r0
 80075a0:	2203      	movs	r2, #3
 80075a2:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2229      	movs	r2, #41	; 0x29
 80075a8:	2103      	movs	r1, #3
 80075aa:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	68db      	ldr	r3, [r3, #12]
 80075b2:	2240      	movs	r2, #64	; 0x40
 80075b4:	4013      	ands	r3, r2
 80075b6:	d104      	bne.n	80075c2 <RTC_EnterInitMode+0x76>
 80075b8:	230f      	movs	r3, #15
 80075ba:	18fb      	adds	r3, r7, r3
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	2b03      	cmp	r3, #3
 80075c0:	d1df      	bne.n	8007582 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80075c2:	230f      	movs	r3, #15
 80075c4:	18fb      	adds	r3, r7, r3
 80075c6:	781b      	ldrb	r3, [r3, #0]
}
 80075c8:	0018      	movs	r0, r3
 80075ca:	46bd      	mov	sp, r7
 80075cc:	b004      	add	sp, #16
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80075d0:	b590      	push	{r4, r7, lr}
 80075d2:	b085      	sub	sp, #20
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075d8:	240f      	movs	r4, #15
 80075da:	193b      	adds	r3, r7, r4
 80075dc:	2200      	movs	r2, #0
 80075de:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80075e0:	4b1c      	ldr	r3, [pc, #112]	; (8007654 <RTC_ExitInitMode+0x84>)
 80075e2:	68da      	ldr	r2, [r3, #12]
 80075e4:	4b1b      	ldr	r3, [pc, #108]	; (8007654 <RTC_ExitInitMode+0x84>)
 80075e6:	2180      	movs	r1, #128	; 0x80
 80075e8:	438a      	bics	r2, r1
 80075ea:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80075ec:	4b19      	ldr	r3, [pc, #100]	; (8007654 <RTC_ExitInitMode+0x84>)
 80075ee:	699b      	ldr	r3, [r3, #24]
 80075f0:	2220      	movs	r2, #32
 80075f2:	4013      	ands	r3, r2
 80075f4:	d10d      	bne.n	8007612 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	0018      	movs	r0, r3
 80075fa:	f7ff ff81 	bl	8007500 <HAL_RTC_WaitForSynchro>
 80075fe:	1e03      	subs	r3, r0, #0
 8007600:	d021      	beq.n	8007646 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2229      	movs	r2, #41	; 0x29
 8007606:	2103      	movs	r1, #3
 8007608:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800760a:	193b      	adds	r3, r7, r4
 800760c:	2203      	movs	r2, #3
 800760e:	701a      	strb	r2, [r3, #0]
 8007610:	e019      	b.n	8007646 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007612:	4b10      	ldr	r3, [pc, #64]	; (8007654 <RTC_ExitInitMode+0x84>)
 8007614:	699a      	ldr	r2, [r3, #24]
 8007616:	4b0f      	ldr	r3, [pc, #60]	; (8007654 <RTC_ExitInitMode+0x84>)
 8007618:	2120      	movs	r1, #32
 800761a:	438a      	bics	r2, r1
 800761c:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	0018      	movs	r0, r3
 8007622:	f7ff ff6d 	bl	8007500 <HAL_RTC_WaitForSynchro>
 8007626:	1e03      	subs	r3, r0, #0
 8007628:	d007      	beq.n	800763a <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2229      	movs	r2, #41	; 0x29
 800762e:	2103      	movs	r1, #3
 8007630:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8007632:	230f      	movs	r3, #15
 8007634:	18fb      	adds	r3, r7, r3
 8007636:	2203      	movs	r2, #3
 8007638:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800763a:	4b06      	ldr	r3, [pc, #24]	; (8007654 <RTC_ExitInitMode+0x84>)
 800763c:	699a      	ldr	r2, [r3, #24]
 800763e:	4b05      	ldr	r3, [pc, #20]	; (8007654 <RTC_ExitInitMode+0x84>)
 8007640:	2120      	movs	r1, #32
 8007642:	430a      	orrs	r2, r1
 8007644:	619a      	str	r2, [r3, #24]
  }

  return status;
 8007646:	230f      	movs	r3, #15
 8007648:	18fb      	adds	r3, r7, r3
 800764a:	781b      	ldrb	r3, [r3, #0]
}
 800764c:	0018      	movs	r0, r3
 800764e:	46bd      	mov	sp, r7
 8007650:	b005      	add	sp, #20
 8007652:	bd90      	pop	{r4, r7, pc}
 8007654:	40002800 	.word	0x40002800

08007658 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b084      	sub	sp, #16
 800765c:	af00      	add	r7, sp, #0
 800765e:	0002      	movs	r2, r0
 8007660:	1dfb      	adds	r3, r7, #7
 8007662:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8007664:	2300      	movs	r3, #0
 8007666:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8007668:	230b      	movs	r3, #11
 800766a:	18fb      	adds	r3, r7, r3
 800766c:	1dfa      	adds	r2, r7, #7
 800766e:	7812      	ldrb	r2, [r2, #0]
 8007670:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8007672:	e008      	b.n	8007686 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	3301      	adds	r3, #1
 8007678:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800767a:	220b      	movs	r2, #11
 800767c:	18bb      	adds	r3, r7, r2
 800767e:	18ba      	adds	r2, r7, r2
 8007680:	7812      	ldrb	r2, [r2, #0]
 8007682:	3a0a      	subs	r2, #10
 8007684:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8007686:	210b      	movs	r1, #11
 8007688:	187b      	adds	r3, r7, r1
 800768a:	781b      	ldrb	r3, [r3, #0]
 800768c:	2b09      	cmp	r3, #9
 800768e:	d8f1      	bhi.n	8007674 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	b2db      	uxtb	r3, r3
 8007694:	011b      	lsls	r3, r3, #4
 8007696:	b2da      	uxtb	r2, r3
 8007698:	187b      	adds	r3, r7, r1
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	4313      	orrs	r3, r2
 800769e:	b2db      	uxtb	r3, r3
}
 80076a0:	0018      	movs	r0, r3
 80076a2:	46bd      	mov	sp, r7
 80076a4:	b004      	add	sp, #16
 80076a6:	bd80      	pop	{r7, pc}

080076a8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b084      	sub	sp, #16
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	0002      	movs	r2, r0
 80076b0:	1dfb      	adds	r3, r7, #7
 80076b2:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 80076b4:	1dfb      	adds	r3, r7, #7
 80076b6:	781b      	ldrb	r3, [r3, #0]
 80076b8:	091b      	lsrs	r3, r3, #4
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	001a      	movs	r2, r3
 80076be:	0013      	movs	r3, r2
 80076c0:	009b      	lsls	r3, r3, #2
 80076c2:	189b      	adds	r3, r3, r2
 80076c4:	005b      	lsls	r3, r3, #1
 80076c6:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	b2da      	uxtb	r2, r3
 80076cc:	1dfb      	adds	r3, r7, #7
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	210f      	movs	r1, #15
 80076d2:	400b      	ands	r3, r1
 80076d4:	b2db      	uxtb	r3, r3
 80076d6:	18d3      	adds	r3, r2, r3
 80076d8:	b2db      	uxtb	r3, r3
}
 80076da:	0018      	movs	r0, r3
 80076dc:	46bd      	mov	sp, r7
 80076de:	b004      	add	sp, #16
 80076e0:	bd80      	pop	{r7, pc}

080076e2 <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80076e2:	b580      	push	{r7, lr}
 80076e4:	b086      	sub	sp, #24
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	60f8      	str	r0, [r7, #12]
 80076ea:	60b9      	str	r1, [r7, #8]
 80076ec:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	001a      	movs	r2, r3
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	18d3      	adds	r3, r2, r3
 80076fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(tamp->BKP0R);
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	3301      	adds	r3, #1
 8007700:	33ff      	adds	r3, #255	; 0xff
 8007702:	613b      	str	r3, [r7, #16]
  tmp += (BackupRegister * 4U);
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	009b      	lsls	r3, r3, #2
 8007708:	693a      	ldr	r2, [r7, #16]
 800770a:	18d3      	adds	r3, r2, r3
 800770c:	613b      	str	r3, [r7, #16]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	687a      	ldr	r2, [r7, #4]
 8007712:	601a      	str	r2, [r3, #0]
}
 8007714:	46c0      	nop			; (mov r8, r8)
 8007716:	46bd      	mov	sp, r7
 8007718:	b006      	add	sp, #24
 800771a:	bd80      	pop	{r7, pc}

0800771c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b082      	sub	sp, #8
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d101      	bne.n	800772e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800772a:	2301      	movs	r3, #1
 800772c:	e04a      	b.n	80077c4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	223d      	movs	r2, #61	; 0x3d
 8007732:	5c9b      	ldrb	r3, [r3, r2]
 8007734:	b2db      	uxtb	r3, r3
 8007736:	2b00      	cmp	r3, #0
 8007738:	d107      	bne.n	800774a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	223c      	movs	r2, #60	; 0x3c
 800773e:	2100      	movs	r1, #0
 8007740:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	0018      	movs	r0, r3
 8007746:	f7fd fa6b 	bl	8004c20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	223d      	movs	r2, #61	; 0x3d
 800774e:	2102      	movs	r1, #2
 8007750:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681a      	ldr	r2, [r3, #0]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	3304      	adds	r3, #4
 800775a:	0019      	movs	r1, r3
 800775c:	0010      	movs	r0, r2
 800775e:	f000 faaf 	bl	8007cc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2248      	movs	r2, #72	; 0x48
 8007766:	2101      	movs	r1, #1
 8007768:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	223e      	movs	r2, #62	; 0x3e
 800776e:	2101      	movs	r1, #1
 8007770:	5499      	strb	r1, [r3, r2]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	223f      	movs	r2, #63	; 0x3f
 8007776:	2101      	movs	r1, #1
 8007778:	5499      	strb	r1, [r3, r2]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2240      	movs	r2, #64	; 0x40
 800777e:	2101      	movs	r1, #1
 8007780:	5499      	strb	r1, [r3, r2]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2241      	movs	r2, #65	; 0x41
 8007786:	2101      	movs	r1, #1
 8007788:	5499      	strb	r1, [r3, r2]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2242      	movs	r2, #66	; 0x42
 800778e:	2101      	movs	r1, #1
 8007790:	5499      	strb	r1, [r3, r2]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2243      	movs	r2, #67	; 0x43
 8007796:	2101      	movs	r1, #1
 8007798:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2244      	movs	r2, #68	; 0x44
 800779e:	2101      	movs	r1, #1
 80077a0:	5499      	strb	r1, [r3, r2]
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2245      	movs	r2, #69	; 0x45
 80077a6:	2101      	movs	r1, #1
 80077a8:	5499      	strb	r1, [r3, r2]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2246      	movs	r2, #70	; 0x46
 80077ae:	2101      	movs	r1, #1
 80077b0:	5499      	strb	r1, [r3, r2]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2247      	movs	r2, #71	; 0x47
 80077b6:	2101      	movs	r1, #1
 80077b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	223d      	movs	r2, #61	; 0x3d
 80077be:	2101      	movs	r1, #1
 80077c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80077c2:	2300      	movs	r3, #0
}
 80077c4:	0018      	movs	r0, r3
 80077c6:	46bd      	mov	sp, r7
 80077c8:	b002      	add	sp, #8
 80077ca:	bd80      	pop	{r7, pc}

080077cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	223d      	movs	r2, #61	; 0x3d
 80077d8:	5c9b      	ldrb	r3, [r3, r2]
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d001      	beq.n	80077e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80077e0:	2301      	movs	r3, #1
 80077e2:	e037      	b.n	8007854 <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	223d      	movs	r2, #61	; 0x3d
 80077e8:	2102      	movs	r1, #2
 80077ea:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	68da      	ldr	r2, [r3, #12]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	2101      	movs	r1, #1
 80077f8:	430a      	orrs	r2, r1
 80077fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a16      	ldr	r2, [pc, #88]	; (800785c <HAL_TIM_Base_Start_IT+0x90>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d004      	beq.n	8007810 <HAL_TIM_Base_Start_IT+0x44>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a15      	ldr	r2, [pc, #84]	; (8007860 <HAL_TIM_Base_Start_IT+0x94>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d116      	bne.n	800783e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	4a13      	ldr	r2, [pc, #76]	; (8007864 <HAL_TIM_Base_Start_IT+0x98>)
 8007818:	4013      	ands	r3, r2
 800781a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2b06      	cmp	r3, #6
 8007820:	d016      	beq.n	8007850 <HAL_TIM_Base_Start_IT+0x84>
 8007822:	68fa      	ldr	r2, [r7, #12]
 8007824:	2380      	movs	r3, #128	; 0x80
 8007826:	025b      	lsls	r3, r3, #9
 8007828:	429a      	cmp	r2, r3
 800782a:	d011      	beq.n	8007850 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	681a      	ldr	r2, [r3, #0]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	2101      	movs	r1, #1
 8007838:	430a      	orrs	r2, r1
 800783a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800783c:	e008      	b.n	8007850 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	2101      	movs	r1, #1
 800784a:	430a      	orrs	r2, r1
 800784c:	601a      	str	r2, [r3, #0]
 800784e:	e000      	b.n	8007852 <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007850:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8007852:	2300      	movs	r3, #0
}
 8007854:	0018      	movs	r0, r3
 8007856:	46bd      	mov	sp, r7
 8007858:	b004      	add	sp, #16
 800785a:	bd80      	pop	{r7, pc}
 800785c:	40012c00 	.word	0x40012c00
 8007860:	40000400 	.word	0x40000400
 8007864:	00010007 	.word	0x00010007

08007868 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b082      	sub	sp, #8
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	68da      	ldr	r2, [r3, #12]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	2101      	movs	r1, #1
 800787c:	438a      	bics	r2, r1
 800787e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	6a1b      	ldr	r3, [r3, #32]
 8007886:	4a0d      	ldr	r2, [pc, #52]	; (80078bc <HAL_TIM_Base_Stop_IT+0x54>)
 8007888:	4013      	ands	r3, r2
 800788a:	d10d      	bne.n	80078a8 <HAL_TIM_Base_Stop_IT+0x40>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	6a1b      	ldr	r3, [r3, #32]
 8007892:	4a0b      	ldr	r2, [pc, #44]	; (80078c0 <HAL_TIM_Base_Stop_IT+0x58>)
 8007894:	4013      	ands	r3, r2
 8007896:	d107      	bne.n	80078a8 <HAL_TIM_Base_Stop_IT+0x40>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	681a      	ldr	r2, [r3, #0]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	2101      	movs	r1, #1
 80078a4:	438a      	bics	r2, r1
 80078a6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	223d      	movs	r2, #61	; 0x3d
 80078ac:	2101      	movs	r1, #1
 80078ae:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80078b0:	2300      	movs	r3, #0
}
 80078b2:	0018      	movs	r0, r3
 80078b4:	46bd      	mov	sp, r7
 80078b6:	b002      	add	sp, #8
 80078b8:	bd80      	pop	{r7, pc}
 80078ba:	46c0      	nop			; (mov r8, r8)
 80078bc:	00001111 	.word	0x00001111
 80078c0:	00000444 	.word	0x00000444

080078c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b084      	sub	sp, #16
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	68db      	ldr	r3, [r3, #12]
 80078d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	691b      	ldr	r3, [r3, #16]
 80078da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	2202      	movs	r2, #2
 80078e0:	4013      	ands	r3, r2
 80078e2:	d021      	beq.n	8007928 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2202      	movs	r2, #2
 80078e8:	4013      	ands	r3, r2
 80078ea:	d01d      	beq.n	8007928 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	2203      	movs	r2, #3
 80078f2:	4252      	negs	r2, r2
 80078f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2201      	movs	r2, #1
 80078fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	699b      	ldr	r3, [r3, #24]
 8007902:	2203      	movs	r2, #3
 8007904:	4013      	ands	r3, r2
 8007906:	d004      	beq.n	8007912 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	0018      	movs	r0, r3
 800790c:	f000 f9c0 	bl	8007c90 <HAL_TIM_IC_CaptureCallback>
 8007910:	e007      	b.n	8007922 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	0018      	movs	r0, r3
 8007916:	f000 f9b3 	bl	8007c80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	0018      	movs	r0, r3
 800791e:	f000 f9bf 	bl	8007ca0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2200      	movs	r2, #0
 8007926:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	2204      	movs	r2, #4
 800792c:	4013      	ands	r3, r2
 800792e:	d022      	beq.n	8007976 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2204      	movs	r2, #4
 8007934:	4013      	ands	r3, r2
 8007936:	d01e      	beq.n	8007976 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	2205      	movs	r2, #5
 800793e:	4252      	negs	r2, r2
 8007940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2202      	movs	r2, #2
 8007946:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	699a      	ldr	r2, [r3, #24]
 800794e:	23c0      	movs	r3, #192	; 0xc0
 8007950:	009b      	lsls	r3, r3, #2
 8007952:	4013      	ands	r3, r2
 8007954:	d004      	beq.n	8007960 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	0018      	movs	r0, r3
 800795a:	f000 f999 	bl	8007c90 <HAL_TIM_IC_CaptureCallback>
 800795e:	e007      	b.n	8007970 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	0018      	movs	r0, r3
 8007964:	f000 f98c 	bl	8007c80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	0018      	movs	r0, r3
 800796c:	f000 f998 	bl	8007ca0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2200      	movs	r2, #0
 8007974:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	2208      	movs	r2, #8
 800797a:	4013      	ands	r3, r2
 800797c:	d021      	beq.n	80079c2 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2208      	movs	r2, #8
 8007982:	4013      	ands	r3, r2
 8007984:	d01d      	beq.n	80079c2 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	2209      	movs	r2, #9
 800798c:	4252      	negs	r2, r2
 800798e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2204      	movs	r2, #4
 8007994:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	69db      	ldr	r3, [r3, #28]
 800799c:	2203      	movs	r2, #3
 800799e:	4013      	ands	r3, r2
 80079a0:	d004      	beq.n	80079ac <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	0018      	movs	r0, r3
 80079a6:	f000 f973 	bl	8007c90 <HAL_TIM_IC_CaptureCallback>
 80079aa:	e007      	b.n	80079bc <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	0018      	movs	r0, r3
 80079b0:	f000 f966 	bl	8007c80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	0018      	movs	r0, r3
 80079b8:	f000 f972 	bl	8007ca0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2200      	movs	r2, #0
 80079c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	2210      	movs	r2, #16
 80079c6:	4013      	ands	r3, r2
 80079c8:	d022      	beq.n	8007a10 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2210      	movs	r2, #16
 80079ce:	4013      	ands	r3, r2
 80079d0:	d01e      	beq.n	8007a10 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	2211      	movs	r2, #17
 80079d8:	4252      	negs	r2, r2
 80079da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2208      	movs	r2, #8
 80079e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	69da      	ldr	r2, [r3, #28]
 80079e8:	23c0      	movs	r3, #192	; 0xc0
 80079ea:	009b      	lsls	r3, r3, #2
 80079ec:	4013      	ands	r3, r2
 80079ee:	d004      	beq.n	80079fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	0018      	movs	r0, r3
 80079f4:	f000 f94c 	bl	8007c90 <HAL_TIM_IC_CaptureCallback>
 80079f8:	e007      	b.n	8007a0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	0018      	movs	r0, r3
 80079fe:	f000 f93f 	bl	8007c80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	0018      	movs	r0, r3
 8007a06:	f000 f94b 	bl	8007ca0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	2201      	movs	r2, #1
 8007a14:	4013      	ands	r3, r2
 8007a16:	d00c      	beq.n	8007a32 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	4013      	ands	r3, r2
 8007a1e:	d008      	beq.n	8007a32 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	2202      	movs	r2, #2
 8007a26:	4252      	negs	r2, r2
 8007a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	0018      	movs	r0, r3
 8007a2e:	f7fc fb3b 	bl	80040a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	2280      	movs	r2, #128	; 0x80
 8007a36:	4013      	ands	r3, r2
 8007a38:	d104      	bne.n	8007a44 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007a3a:	68ba      	ldr	r2, [r7, #8]
 8007a3c:	2380      	movs	r3, #128	; 0x80
 8007a3e:	019b      	lsls	r3, r3, #6
 8007a40:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007a42:	d00b      	beq.n	8007a5c <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2280      	movs	r2, #128	; 0x80
 8007a48:	4013      	ands	r3, r2
 8007a4a:	d007      	beq.n	8007a5c <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a1e      	ldr	r2, [pc, #120]	; (8007acc <HAL_TIM_IRQHandler+0x208>)
 8007a52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	0018      	movs	r0, r3
 8007a58:	f000 fab2 	bl	8007fc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007a5c:	68ba      	ldr	r2, [r7, #8]
 8007a5e:	2380      	movs	r3, #128	; 0x80
 8007a60:	005b      	lsls	r3, r3, #1
 8007a62:	4013      	ands	r3, r2
 8007a64:	d00b      	beq.n	8007a7e <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	2280      	movs	r2, #128	; 0x80
 8007a6a:	4013      	ands	r3, r2
 8007a6c:	d007      	beq.n	8007a7e <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a17      	ldr	r2, [pc, #92]	; (8007ad0 <HAL_TIM_IRQHandler+0x20c>)
 8007a74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	0018      	movs	r0, r3
 8007a7a:	f000 faa9 	bl	8007fd0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	2240      	movs	r2, #64	; 0x40
 8007a82:	4013      	ands	r3, r2
 8007a84:	d00c      	beq.n	8007aa0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2240      	movs	r2, #64	; 0x40
 8007a8a:	4013      	ands	r3, r2
 8007a8c:	d008      	beq.n	8007aa0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	2241      	movs	r2, #65	; 0x41
 8007a94:	4252      	negs	r2, r2
 8007a96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	0018      	movs	r0, r3
 8007a9c:	f000 f908 	bl	8007cb0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	2220      	movs	r2, #32
 8007aa4:	4013      	ands	r3, r2
 8007aa6:	d00c      	beq.n	8007ac2 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2220      	movs	r2, #32
 8007aac:	4013      	ands	r3, r2
 8007aae:	d008      	beq.n	8007ac2 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	2221      	movs	r2, #33	; 0x21
 8007ab6:	4252      	negs	r2, r2
 8007ab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	0018      	movs	r0, r3
 8007abe:	f000 fa77 	bl	8007fb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007ac2:	46c0      	nop			; (mov r8, r8)
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	b004      	add	sp, #16
 8007ac8:	bd80      	pop	{r7, pc}
 8007aca:	46c0      	nop			; (mov r8, r8)
 8007acc:	ffffdf7f 	.word	0xffffdf7f
 8007ad0:	fffffeff 	.word	0xfffffeff

08007ad4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b084      	sub	sp, #16
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007ade:	230f      	movs	r3, #15
 8007ae0:	18fb      	adds	r3, r7, r3
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	223c      	movs	r2, #60	; 0x3c
 8007aea:	5c9b      	ldrb	r3, [r3, r2]
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d101      	bne.n	8007af4 <HAL_TIM_ConfigClockSource+0x20>
 8007af0:	2302      	movs	r3, #2
 8007af2:	e0bc      	b.n	8007c6e <HAL_TIM_ConfigClockSource+0x19a>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	223c      	movs	r2, #60	; 0x3c
 8007af8:	2101      	movs	r1, #1
 8007afa:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	223d      	movs	r2, #61	; 0x3d
 8007b00:	2102      	movs	r1, #2
 8007b02:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	689b      	ldr	r3, [r3, #8]
 8007b0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	4a5a      	ldr	r2, [pc, #360]	; (8007c78 <HAL_TIM_ConfigClockSource+0x1a4>)
 8007b10:	4013      	ands	r3, r2
 8007b12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	4a59      	ldr	r2, [pc, #356]	; (8007c7c <HAL_TIM_ConfigClockSource+0x1a8>)
 8007b18:	4013      	ands	r3, r2
 8007b1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	68ba      	ldr	r2, [r7, #8]
 8007b22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	2280      	movs	r2, #128	; 0x80
 8007b2a:	0192      	lsls	r2, r2, #6
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d040      	beq.n	8007bb2 <HAL_TIM_ConfigClockSource+0xde>
 8007b30:	2280      	movs	r2, #128	; 0x80
 8007b32:	0192      	lsls	r2, r2, #6
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d900      	bls.n	8007b3a <HAL_TIM_ConfigClockSource+0x66>
 8007b38:	e088      	b.n	8007c4c <HAL_TIM_ConfigClockSource+0x178>
 8007b3a:	2280      	movs	r2, #128	; 0x80
 8007b3c:	0152      	lsls	r2, r2, #5
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d100      	bne.n	8007b44 <HAL_TIM_ConfigClockSource+0x70>
 8007b42:	e088      	b.n	8007c56 <HAL_TIM_ConfigClockSource+0x182>
 8007b44:	2280      	movs	r2, #128	; 0x80
 8007b46:	0152      	lsls	r2, r2, #5
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d900      	bls.n	8007b4e <HAL_TIM_ConfigClockSource+0x7a>
 8007b4c:	e07e      	b.n	8007c4c <HAL_TIM_ConfigClockSource+0x178>
 8007b4e:	2b70      	cmp	r3, #112	; 0x70
 8007b50:	d018      	beq.n	8007b84 <HAL_TIM_ConfigClockSource+0xb0>
 8007b52:	d900      	bls.n	8007b56 <HAL_TIM_ConfigClockSource+0x82>
 8007b54:	e07a      	b.n	8007c4c <HAL_TIM_ConfigClockSource+0x178>
 8007b56:	2b60      	cmp	r3, #96	; 0x60
 8007b58:	d04f      	beq.n	8007bfa <HAL_TIM_ConfigClockSource+0x126>
 8007b5a:	d900      	bls.n	8007b5e <HAL_TIM_ConfigClockSource+0x8a>
 8007b5c:	e076      	b.n	8007c4c <HAL_TIM_ConfigClockSource+0x178>
 8007b5e:	2b50      	cmp	r3, #80	; 0x50
 8007b60:	d03b      	beq.n	8007bda <HAL_TIM_ConfigClockSource+0x106>
 8007b62:	d900      	bls.n	8007b66 <HAL_TIM_ConfigClockSource+0x92>
 8007b64:	e072      	b.n	8007c4c <HAL_TIM_ConfigClockSource+0x178>
 8007b66:	2b40      	cmp	r3, #64	; 0x40
 8007b68:	d057      	beq.n	8007c1a <HAL_TIM_ConfigClockSource+0x146>
 8007b6a:	d900      	bls.n	8007b6e <HAL_TIM_ConfigClockSource+0x9a>
 8007b6c:	e06e      	b.n	8007c4c <HAL_TIM_ConfigClockSource+0x178>
 8007b6e:	2b30      	cmp	r3, #48	; 0x30
 8007b70:	d063      	beq.n	8007c3a <HAL_TIM_ConfigClockSource+0x166>
 8007b72:	d86b      	bhi.n	8007c4c <HAL_TIM_ConfigClockSource+0x178>
 8007b74:	2b20      	cmp	r3, #32
 8007b76:	d060      	beq.n	8007c3a <HAL_TIM_ConfigClockSource+0x166>
 8007b78:	d868      	bhi.n	8007c4c <HAL_TIM_ConfigClockSource+0x178>
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d05d      	beq.n	8007c3a <HAL_TIM_ConfigClockSource+0x166>
 8007b7e:	2b10      	cmp	r3, #16
 8007b80:	d05b      	beq.n	8007c3a <HAL_TIM_ConfigClockSource+0x166>
 8007b82:	e063      	b.n	8007c4c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007b94:	f000 f98a 	bl	8007eac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	689b      	ldr	r3, [r3, #8]
 8007b9e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	2277      	movs	r2, #119	; 0x77
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	68ba      	ldr	r2, [r7, #8]
 8007bae:	609a      	str	r2, [r3, #8]
      break;
 8007bb0:	e052      	b.n	8007c58 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007bc2:	f000 f973 	bl	8007eac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	689a      	ldr	r2, [r3, #8]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	2180      	movs	r1, #128	; 0x80
 8007bd2:	01c9      	lsls	r1, r1, #7
 8007bd4:	430a      	orrs	r2, r1
 8007bd6:	609a      	str	r2, [r3, #8]
      break;
 8007bd8:	e03e      	b.n	8007c58 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007be6:	001a      	movs	r2, r3
 8007be8:	f000 f8e4 	bl	8007db4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	2150      	movs	r1, #80	; 0x50
 8007bf2:	0018      	movs	r0, r3
 8007bf4:	f000 f93e 	bl	8007e74 <TIM_ITRx_SetConfig>
      break;
 8007bf8:	e02e      	b.n	8007c58 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c06:	001a      	movs	r2, r3
 8007c08:	f000 f902 	bl	8007e10 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	2160      	movs	r1, #96	; 0x60
 8007c12:	0018      	movs	r0, r3
 8007c14:	f000 f92e 	bl	8007e74 <TIM_ITRx_SetConfig>
      break;
 8007c18:	e01e      	b.n	8007c58 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c26:	001a      	movs	r2, r3
 8007c28:	f000 f8c4 	bl	8007db4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	2140      	movs	r1, #64	; 0x40
 8007c32:	0018      	movs	r0, r3
 8007c34:	f000 f91e 	bl	8007e74 <TIM_ITRx_SetConfig>
      break;
 8007c38:	e00e      	b.n	8007c58 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681a      	ldr	r2, [r3, #0]
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	0019      	movs	r1, r3
 8007c44:	0010      	movs	r0, r2
 8007c46:	f000 f915 	bl	8007e74 <TIM_ITRx_SetConfig>
      break;
 8007c4a:	e005      	b.n	8007c58 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8007c4c:	230f      	movs	r3, #15
 8007c4e:	18fb      	adds	r3, r7, r3
 8007c50:	2201      	movs	r2, #1
 8007c52:	701a      	strb	r2, [r3, #0]
      break;
 8007c54:	e000      	b.n	8007c58 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8007c56:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	223d      	movs	r2, #61	; 0x3d
 8007c5c:	2101      	movs	r1, #1
 8007c5e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	223c      	movs	r2, #60	; 0x3c
 8007c64:	2100      	movs	r1, #0
 8007c66:	5499      	strb	r1, [r3, r2]

  return status;
 8007c68:	230f      	movs	r3, #15
 8007c6a:	18fb      	adds	r3, r7, r3
 8007c6c:	781b      	ldrb	r3, [r3, #0]
}
 8007c6e:	0018      	movs	r0, r3
 8007c70:	46bd      	mov	sp, r7
 8007c72:	b004      	add	sp, #16
 8007c74:	bd80      	pop	{r7, pc}
 8007c76:	46c0      	nop			; (mov r8, r8)
 8007c78:	ffceff88 	.word	0xffceff88
 8007c7c:	ffff00ff 	.word	0xffff00ff

08007c80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b082      	sub	sp, #8
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007c88:	46c0      	nop			; (mov r8, r8)
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	b002      	add	sp, #8
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b082      	sub	sp, #8
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007c98:	46c0      	nop			; (mov r8, r8)
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	b002      	add	sp, #8
 8007c9e:	bd80      	pop	{r7, pc}

08007ca0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b082      	sub	sp, #8
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ca8:	46c0      	nop			; (mov r8, r8)
 8007caa:	46bd      	mov	sp, r7
 8007cac:	b002      	add	sp, #8
 8007cae:	bd80      	pop	{r7, pc}

08007cb0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b082      	sub	sp, #8
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007cb8:	46c0      	nop			; (mov r8, r8)
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	b002      	add	sp, #8
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b084      	sub	sp, #16
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	4a32      	ldr	r2, [pc, #200]	; (8007d9c <TIM_Base_SetConfig+0xdc>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d003      	beq.n	8007ce0 <TIM_Base_SetConfig+0x20>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	4a31      	ldr	r2, [pc, #196]	; (8007da0 <TIM_Base_SetConfig+0xe0>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d108      	bne.n	8007cf2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	2270      	movs	r2, #112	; 0x70
 8007ce4:	4393      	bics	r3, r2
 8007ce6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	68fa      	ldr	r2, [r7, #12]
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	4a29      	ldr	r2, [pc, #164]	; (8007d9c <TIM_Base_SetConfig+0xdc>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d00f      	beq.n	8007d1a <TIM_Base_SetConfig+0x5a>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	4a28      	ldr	r2, [pc, #160]	; (8007da0 <TIM_Base_SetConfig+0xe0>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d00b      	beq.n	8007d1a <TIM_Base_SetConfig+0x5a>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	4a27      	ldr	r2, [pc, #156]	; (8007da4 <TIM_Base_SetConfig+0xe4>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d007      	beq.n	8007d1a <TIM_Base_SetConfig+0x5a>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	4a26      	ldr	r2, [pc, #152]	; (8007da8 <TIM_Base_SetConfig+0xe8>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d003      	beq.n	8007d1a <TIM_Base_SetConfig+0x5a>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	4a25      	ldr	r2, [pc, #148]	; (8007dac <TIM_Base_SetConfig+0xec>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d108      	bne.n	8007d2c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	4a24      	ldr	r2, [pc, #144]	; (8007db0 <TIM_Base_SetConfig+0xf0>)
 8007d1e:	4013      	ands	r3, r2
 8007d20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	68db      	ldr	r3, [r3, #12]
 8007d26:	68fa      	ldr	r2, [r7, #12]
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2280      	movs	r2, #128	; 0x80
 8007d30:	4393      	bics	r3, r2
 8007d32:	001a      	movs	r2, r3
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	695b      	ldr	r3, [r3, #20]
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	68fa      	ldr	r2, [r7, #12]
 8007d40:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	689a      	ldr	r2, [r3, #8]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	681a      	ldr	r2, [r3, #0]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	4a11      	ldr	r2, [pc, #68]	; (8007d9c <TIM_Base_SetConfig+0xdc>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d007      	beq.n	8007d6a <TIM_Base_SetConfig+0xaa>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	4a12      	ldr	r2, [pc, #72]	; (8007da8 <TIM_Base_SetConfig+0xe8>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d003      	beq.n	8007d6a <TIM_Base_SetConfig+0xaa>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	4a11      	ldr	r2, [pc, #68]	; (8007dac <TIM_Base_SetConfig+0xec>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d103      	bne.n	8007d72 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	691a      	ldr	r2, [r3, #16]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2201      	movs	r2, #1
 8007d76:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	691b      	ldr	r3, [r3, #16]
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	4013      	ands	r3, r2
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d106      	bne.n	8007d92 <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	691b      	ldr	r3, [r3, #16]
 8007d88:	2201      	movs	r2, #1
 8007d8a:	4393      	bics	r3, r2
 8007d8c:	001a      	movs	r2, r3
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	611a      	str	r2, [r3, #16]
  }
}
 8007d92:	46c0      	nop			; (mov r8, r8)
 8007d94:	46bd      	mov	sp, r7
 8007d96:	b004      	add	sp, #16
 8007d98:	bd80      	pop	{r7, pc}
 8007d9a:	46c0      	nop			; (mov r8, r8)
 8007d9c:	40012c00 	.word	0x40012c00
 8007da0:	40000400 	.word	0x40000400
 8007da4:	40002000 	.word	0x40002000
 8007da8:	40014400 	.word	0x40014400
 8007dac:	40014800 	.word	0x40014800
 8007db0:	fffffcff 	.word	0xfffffcff

08007db4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b086      	sub	sp, #24
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	60f8      	str	r0, [r7, #12]
 8007dbc:	60b9      	str	r1, [r7, #8]
 8007dbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	6a1b      	ldr	r3, [r3, #32]
 8007dc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	6a1b      	ldr	r3, [r3, #32]
 8007dca:	2201      	movs	r2, #1
 8007dcc:	4393      	bics	r3, r2
 8007dce:	001a      	movs	r2, r3
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	699b      	ldr	r3, [r3, #24]
 8007dd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	22f0      	movs	r2, #240	; 0xf0
 8007dde:	4393      	bics	r3, r2
 8007de0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	011b      	lsls	r3, r3, #4
 8007de6:	693a      	ldr	r2, [r7, #16]
 8007de8:	4313      	orrs	r3, r2
 8007dea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	220a      	movs	r2, #10
 8007df0:	4393      	bics	r3, r2
 8007df2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007df4:	697a      	ldr	r2, [r7, #20]
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	693a      	ldr	r2, [r7, #16]
 8007e00:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	697a      	ldr	r2, [r7, #20]
 8007e06:	621a      	str	r2, [r3, #32]
}
 8007e08:	46c0      	nop			; (mov r8, r8)
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	b006      	add	sp, #24
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b086      	sub	sp, #24
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	60f8      	str	r0, [r7, #12]
 8007e18:	60b9      	str	r1, [r7, #8]
 8007e1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	6a1b      	ldr	r3, [r3, #32]
 8007e20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	6a1b      	ldr	r3, [r3, #32]
 8007e26:	2210      	movs	r2, #16
 8007e28:	4393      	bics	r3, r2
 8007e2a:	001a      	movs	r2, r3
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	699b      	ldr	r3, [r3, #24]
 8007e34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	4a0d      	ldr	r2, [pc, #52]	; (8007e70 <TIM_TI2_ConfigInputStage+0x60>)
 8007e3a:	4013      	ands	r3, r2
 8007e3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	031b      	lsls	r3, r3, #12
 8007e42:	693a      	ldr	r2, [r7, #16]
 8007e44:	4313      	orrs	r3, r2
 8007e46:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	22a0      	movs	r2, #160	; 0xa0
 8007e4c:	4393      	bics	r3, r2
 8007e4e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	011b      	lsls	r3, r3, #4
 8007e54:	697a      	ldr	r2, [r7, #20]
 8007e56:	4313      	orrs	r3, r2
 8007e58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	693a      	ldr	r2, [r7, #16]
 8007e5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	697a      	ldr	r2, [r7, #20]
 8007e64:	621a      	str	r2, [r3, #32]
}
 8007e66:	46c0      	nop			; (mov r8, r8)
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	b006      	add	sp, #24
 8007e6c:	bd80      	pop	{r7, pc}
 8007e6e:	46c0      	nop			; (mov r8, r8)
 8007e70:	ffff0fff 	.word	0xffff0fff

08007e74 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b084      	sub	sp, #16
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	4a08      	ldr	r2, [pc, #32]	; (8007ea8 <TIM_ITRx_SetConfig+0x34>)
 8007e88:	4013      	ands	r3, r2
 8007e8a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007e8c:	683a      	ldr	r2, [r7, #0]
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	4313      	orrs	r3, r2
 8007e92:	2207      	movs	r2, #7
 8007e94:	4313      	orrs	r3, r2
 8007e96:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	68fa      	ldr	r2, [r7, #12]
 8007e9c:	609a      	str	r2, [r3, #8]
}
 8007e9e:	46c0      	nop			; (mov r8, r8)
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	b004      	add	sp, #16
 8007ea4:	bd80      	pop	{r7, pc}
 8007ea6:	46c0      	nop			; (mov r8, r8)
 8007ea8:	ffcfff8f 	.word	0xffcfff8f

08007eac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b086      	sub	sp, #24
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	60f8      	str	r0, [r7, #12]
 8007eb4:	60b9      	str	r1, [r7, #8]
 8007eb6:	607a      	str	r2, [r7, #4]
 8007eb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	689b      	ldr	r3, [r3, #8]
 8007ebe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	4a09      	ldr	r2, [pc, #36]	; (8007ee8 <TIM_ETR_SetConfig+0x3c>)
 8007ec4:	4013      	ands	r3, r2
 8007ec6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	021a      	lsls	r2, r3, #8
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	431a      	orrs	r2, r3
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	697a      	ldr	r2, [r7, #20]
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	697a      	ldr	r2, [r7, #20]
 8007ede:	609a      	str	r2, [r3, #8]
}
 8007ee0:	46c0      	nop			; (mov r8, r8)
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	b006      	add	sp, #24
 8007ee6:	bd80      	pop	{r7, pc}
 8007ee8:	ffff00ff 	.word	0xffff00ff

08007eec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b084      	sub	sp, #16
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	223c      	movs	r2, #60	; 0x3c
 8007efa:	5c9b      	ldrb	r3, [r3, r2]
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d101      	bne.n	8007f04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007f00:	2302      	movs	r3, #2
 8007f02:	e04a      	b.n	8007f9a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	223c      	movs	r2, #60	; 0x3c
 8007f08:	2101      	movs	r1, #1
 8007f0a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	223d      	movs	r2, #61	; 0x3d
 8007f10:	2102      	movs	r1, #2
 8007f12:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	689b      	ldr	r3, [r3, #8]
 8007f22:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4a1e      	ldr	r2, [pc, #120]	; (8007fa4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d108      	bne.n	8007f40 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	4a1d      	ldr	r2, [pc, #116]	; (8007fa8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8007f32:	4013      	ands	r3, r2
 8007f34:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	68fa      	ldr	r2, [r7, #12]
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2270      	movs	r2, #112	; 0x70
 8007f44:	4393      	bics	r3, r2
 8007f46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	68fa      	ldr	r2, [r7, #12]
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	68fa      	ldr	r2, [r7, #12]
 8007f58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a11      	ldr	r2, [pc, #68]	; (8007fa4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d004      	beq.n	8007f6e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a10      	ldr	r2, [pc, #64]	; (8007fac <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d10c      	bne.n	8007f88 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	2280      	movs	r2, #128	; 0x80
 8007f72:	4393      	bics	r3, r2
 8007f74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	68ba      	ldr	r2, [r7, #8]
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	68ba      	ldr	r2, [r7, #8]
 8007f86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	223d      	movs	r2, #61	; 0x3d
 8007f8c:	2101      	movs	r1, #1
 8007f8e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	223c      	movs	r2, #60	; 0x3c
 8007f94:	2100      	movs	r1, #0
 8007f96:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007f98:	2300      	movs	r3, #0
}
 8007f9a:	0018      	movs	r0, r3
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	b004      	add	sp, #16
 8007fa0:	bd80      	pop	{r7, pc}
 8007fa2:	46c0      	nop			; (mov r8, r8)
 8007fa4:	40012c00 	.word	0x40012c00
 8007fa8:	ff0fffff 	.word	0xff0fffff
 8007fac:	40000400 	.word	0x40000400

08007fb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b082      	sub	sp, #8
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007fb8:	46c0      	nop			; (mov r8, r8)
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	b002      	add	sp, #8
 8007fbe:	bd80      	pop	{r7, pc}

08007fc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b082      	sub	sp, #8
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007fc8:	46c0      	nop			; (mov r8, r8)
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	b002      	add	sp, #8
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b082      	sub	sp, #8
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007fd8:	46c0      	nop			; (mov r8, r8)
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	b002      	add	sp, #8
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b082      	sub	sp, #8
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d101      	bne.n	8007ff2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007fee:	2301      	movs	r3, #1
 8007ff0:	e046      	b.n	8008080 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2288      	movs	r2, #136	; 0x88
 8007ff6:	589b      	ldr	r3, [r3, r2]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d107      	bne.n	800800c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2284      	movs	r2, #132	; 0x84
 8008000:	2100      	movs	r1, #0
 8008002:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	0018      	movs	r0, r3
 8008008:	f7fc feb2 	bl	8004d70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2288      	movs	r2, #136	; 0x88
 8008010:	2124      	movs	r1, #36	; 0x24
 8008012:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	2101      	movs	r1, #1
 8008020:	438a      	bics	r2, r1
 8008022:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008028:	2b00      	cmp	r3, #0
 800802a:	d003      	beq.n	8008034 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	0018      	movs	r0, r3
 8008030:	f000 f996 	bl	8008360 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	0018      	movs	r0, r3
 8008038:	f000 f828 	bl	800808c <UART_SetConfig>
 800803c:	0003      	movs	r3, r0
 800803e:	2b01      	cmp	r3, #1
 8008040:	d101      	bne.n	8008046 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8008042:	2301      	movs	r3, #1
 8008044:	e01c      	b.n	8008080 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	685a      	ldr	r2, [r3, #4]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	490d      	ldr	r1, [pc, #52]	; (8008088 <HAL_UART_Init+0xa8>)
 8008052:	400a      	ands	r2, r1
 8008054:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	689a      	ldr	r2, [r3, #8]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	212a      	movs	r1, #42	; 0x2a
 8008062:	438a      	bics	r2, r1
 8008064:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	681a      	ldr	r2, [r3, #0]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	2101      	movs	r1, #1
 8008072:	430a      	orrs	r2, r1
 8008074:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	0018      	movs	r0, r3
 800807a:	f000 fa25 	bl	80084c8 <UART_CheckIdleState>
 800807e:	0003      	movs	r3, r0
}
 8008080:	0018      	movs	r0, r3
 8008082:	46bd      	mov	sp, r7
 8008084:	b002      	add	sp, #8
 8008086:	bd80      	pop	{r7, pc}
 8008088:	ffffb7ff 	.word	0xffffb7ff

0800808c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b088      	sub	sp, #32
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008094:	231a      	movs	r3, #26
 8008096:	18fb      	adds	r3, r7, r3
 8008098:	2200      	movs	r2, #0
 800809a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	689a      	ldr	r2, [r3, #8]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	691b      	ldr	r3, [r3, #16]
 80080a4:	431a      	orrs	r2, r3
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	695b      	ldr	r3, [r3, #20]
 80080aa:	431a      	orrs	r2, r3
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	69db      	ldr	r3, [r3, #28]
 80080b0:	4313      	orrs	r3, r2
 80080b2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4aa1      	ldr	r2, [pc, #644]	; (8008340 <UART_SetConfig+0x2b4>)
 80080bc:	4013      	ands	r3, r2
 80080be:	0019      	movs	r1, r3
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	69fa      	ldr	r2, [r7, #28]
 80080c6:	430a      	orrs	r2, r1
 80080c8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	4a9c      	ldr	r2, [pc, #624]	; (8008344 <UART_SetConfig+0x2b8>)
 80080d2:	4013      	ands	r3, r2
 80080d4:	0019      	movs	r1, r3
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	68da      	ldr	r2, [r3, #12]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	430a      	orrs	r2, r1
 80080e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	699b      	ldr	r3, [r3, #24]
 80080e6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6a1b      	ldr	r3, [r3, #32]
 80080ec:	69fa      	ldr	r2, [r7, #28]
 80080ee:	4313      	orrs	r3, r2
 80080f0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	689b      	ldr	r3, [r3, #8]
 80080f8:	4a93      	ldr	r2, [pc, #588]	; (8008348 <UART_SetConfig+0x2bc>)
 80080fa:	4013      	ands	r3, r2
 80080fc:	0019      	movs	r1, r3
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	69fa      	ldr	r2, [r7, #28]
 8008104:	430a      	orrs	r2, r1
 8008106:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800810e:	220f      	movs	r2, #15
 8008110:	4393      	bics	r3, r2
 8008112:	0019      	movs	r1, r3
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	430a      	orrs	r2, r1
 800811e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4a89      	ldr	r2, [pc, #548]	; (800834c <UART_SetConfig+0x2c0>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d127      	bne.n	800817a <UART_SetConfig+0xee>
 800812a:	4b89      	ldr	r3, [pc, #548]	; (8008350 <UART_SetConfig+0x2c4>)
 800812c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800812e:	2203      	movs	r2, #3
 8008130:	4013      	ands	r3, r2
 8008132:	2b03      	cmp	r3, #3
 8008134:	d017      	beq.n	8008166 <UART_SetConfig+0xda>
 8008136:	d81b      	bhi.n	8008170 <UART_SetConfig+0xe4>
 8008138:	2b02      	cmp	r3, #2
 800813a:	d00a      	beq.n	8008152 <UART_SetConfig+0xc6>
 800813c:	d818      	bhi.n	8008170 <UART_SetConfig+0xe4>
 800813e:	2b00      	cmp	r3, #0
 8008140:	d002      	beq.n	8008148 <UART_SetConfig+0xbc>
 8008142:	2b01      	cmp	r3, #1
 8008144:	d00a      	beq.n	800815c <UART_SetConfig+0xd0>
 8008146:	e013      	b.n	8008170 <UART_SetConfig+0xe4>
 8008148:	231b      	movs	r3, #27
 800814a:	18fb      	adds	r3, r7, r3
 800814c:	2200      	movs	r2, #0
 800814e:	701a      	strb	r2, [r3, #0]
 8008150:	e021      	b.n	8008196 <UART_SetConfig+0x10a>
 8008152:	231b      	movs	r3, #27
 8008154:	18fb      	adds	r3, r7, r3
 8008156:	2202      	movs	r2, #2
 8008158:	701a      	strb	r2, [r3, #0]
 800815a:	e01c      	b.n	8008196 <UART_SetConfig+0x10a>
 800815c:	231b      	movs	r3, #27
 800815e:	18fb      	adds	r3, r7, r3
 8008160:	2204      	movs	r2, #4
 8008162:	701a      	strb	r2, [r3, #0]
 8008164:	e017      	b.n	8008196 <UART_SetConfig+0x10a>
 8008166:	231b      	movs	r3, #27
 8008168:	18fb      	adds	r3, r7, r3
 800816a:	2208      	movs	r2, #8
 800816c:	701a      	strb	r2, [r3, #0]
 800816e:	e012      	b.n	8008196 <UART_SetConfig+0x10a>
 8008170:	231b      	movs	r3, #27
 8008172:	18fb      	adds	r3, r7, r3
 8008174:	2210      	movs	r2, #16
 8008176:	701a      	strb	r2, [r3, #0]
 8008178:	e00d      	b.n	8008196 <UART_SetConfig+0x10a>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4a75      	ldr	r2, [pc, #468]	; (8008354 <UART_SetConfig+0x2c8>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d104      	bne.n	800818e <UART_SetConfig+0x102>
 8008184:	231b      	movs	r3, #27
 8008186:	18fb      	adds	r3, r7, r3
 8008188:	2200      	movs	r2, #0
 800818a:	701a      	strb	r2, [r3, #0]
 800818c:	e003      	b.n	8008196 <UART_SetConfig+0x10a>
 800818e:	231b      	movs	r3, #27
 8008190:	18fb      	adds	r3, r7, r3
 8008192:	2210      	movs	r2, #16
 8008194:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	69da      	ldr	r2, [r3, #28]
 800819a:	2380      	movs	r3, #128	; 0x80
 800819c:	021b      	lsls	r3, r3, #8
 800819e:	429a      	cmp	r2, r3
 80081a0:	d000      	beq.n	80081a4 <UART_SetConfig+0x118>
 80081a2:	e065      	b.n	8008270 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 80081a4:	231b      	movs	r3, #27
 80081a6:	18fb      	adds	r3, r7, r3
 80081a8:	781b      	ldrb	r3, [r3, #0]
 80081aa:	2b08      	cmp	r3, #8
 80081ac:	d015      	beq.n	80081da <UART_SetConfig+0x14e>
 80081ae:	dc18      	bgt.n	80081e2 <UART_SetConfig+0x156>
 80081b0:	2b04      	cmp	r3, #4
 80081b2:	d00d      	beq.n	80081d0 <UART_SetConfig+0x144>
 80081b4:	dc15      	bgt.n	80081e2 <UART_SetConfig+0x156>
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d002      	beq.n	80081c0 <UART_SetConfig+0x134>
 80081ba:	2b02      	cmp	r3, #2
 80081bc:	d005      	beq.n	80081ca <UART_SetConfig+0x13e>
 80081be:	e010      	b.n	80081e2 <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081c0:	f7fe fddc 	bl	8006d7c <HAL_RCC_GetPCLK1Freq>
 80081c4:	0003      	movs	r3, r0
 80081c6:	617b      	str	r3, [r7, #20]
        break;
 80081c8:	e012      	b.n	80081f0 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80081ca:	4b63      	ldr	r3, [pc, #396]	; (8008358 <UART_SetConfig+0x2cc>)
 80081cc:	617b      	str	r3, [r7, #20]
        break;
 80081ce:	e00f      	b.n	80081f0 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081d0:	f7fe fd48 	bl	8006c64 <HAL_RCC_GetSysClockFreq>
 80081d4:	0003      	movs	r3, r0
 80081d6:	617b      	str	r3, [r7, #20]
        break;
 80081d8:	e00a      	b.n	80081f0 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081da:	2380      	movs	r3, #128	; 0x80
 80081dc:	021b      	lsls	r3, r3, #8
 80081de:	617b      	str	r3, [r7, #20]
        break;
 80081e0:	e006      	b.n	80081f0 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 80081e2:	2300      	movs	r3, #0
 80081e4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80081e6:	231a      	movs	r3, #26
 80081e8:	18fb      	adds	r3, r7, r3
 80081ea:	2201      	movs	r2, #1
 80081ec:	701a      	strb	r2, [r3, #0]
        break;
 80081ee:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d100      	bne.n	80081f8 <UART_SetConfig+0x16c>
 80081f6:	e08d      	b.n	8008314 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80081fc:	4b57      	ldr	r3, [pc, #348]	; (800835c <UART_SetConfig+0x2d0>)
 80081fe:	0052      	lsls	r2, r2, #1
 8008200:	5ad3      	ldrh	r3, [r2, r3]
 8008202:	0019      	movs	r1, r3
 8008204:	6978      	ldr	r0, [r7, #20]
 8008206:	f7f7 ff7b 	bl	8000100 <__udivsi3>
 800820a:	0003      	movs	r3, r0
 800820c:	005a      	lsls	r2, r3, #1
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	685b      	ldr	r3, [r3, #4]
 8008212:	085b      	lsrs	r3, r3, #1
 8008214:	18d2      	adds	r2, r2, r3
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	685b      	ldr	r3, [r3, #4]
 800821a:	0019      	movs	r1, r3
 800821c:	0010      	movs	r0, r2
 800821e:	f7f7 ff6f 	bl	8000100 <__udivsi3>
 8008222:	0003      	movs	r3, r0
 8008224:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	2b0f      	cmp	r3, #15
 800822a:	d91c      	bls.n	8008266 <UART_SetConfig+0x1da>
 800822c:	693a      	ldr	r2, [r7, #16]
 800822e:	2380      	movs	r3, #128	; 0x80
 8008230:	025b      	lsls	r3, r3, #9
 8008232:	429a      	cmp	r2, r3
 8008234:	d217      	bcs.n	8008266 <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	b29a      	uxth	r2, r3
 800823a:	200e      	movs	r0, #14
 800823c:	183b      	adds	r3, r7, r0
 800823e:	210f      	movs	r1, #15
 8008240:	438a      	bics	r2, r1
 8008242:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	085b      	lsrs	r3, r3, #1
 8008248:	b29b      	uxth	r3, r3
 800824a:	2207      	movs	r2, #7
 800824c:	4013      	ands	r3, r2
 800824e:	b299      	uxth	r1, r3
 8008250:	183b      	adds	r3, r7, r0
 8008252:	183a      	adds	r2, r7, r0
 8008254:	8812      	ldrh	r2, [r2, #0]
 8008256:	430a      	orrs	r2, r1
 8008258:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	183a      	adds	r2, r7, r0
 8008260:	8812      	ldrh	r2, [r2, #0]
 8008262:	60da      	str	r2, [r3, #12]
 8008264:	e056      	b.n	8008314 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8008266:	231a      	movs	r3, #26
 8008268:	18fb      	adds	r3, r7, r3
 800826a:	2201      	movs	r2, #1
 800826c:	701a      	strb	r2, [r3, #0]
 800826e:	e051      	b.n	8008314 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008270:	231b      	movs	r3, #27
 8008272:	18fb      	adds	r3, r7, r3
 8008274:	781b      	ldrb	r3, [r3, #0]
 8008276:	2b08      	cmp	r3, #8
 8008278:	d015      	beq.n	80082a6 <UART_SetConfig+0x21a>
 800827a:	dc18      	bgt.n	80082ae <UART_SetConfig+0x222>
 800827c:	2b04      	cmp	r3, #4
 800827e:	d00d      	beq.n	800829c <UART_SetConfig+0x210>
 8008280:	dc15      	bgt.n	80082ae <UART_SetConfig+0x222>
 8008282:	2b00      	cmp	r3, #0
 8008284:	d002      	beq.n	800828c <UART_SetConfig+0x200>
 8008286:	2b02      	cmp	r3, #2
 8008288:	d005      	beq.n	8008296 <UART_SetConfig+0x20a>
 800828a:	e010      	b.n	80082ae <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800828c:	f7fe fd76 	bl	8006d7c <HAL_RCC_GetPCLK1Freq>
 8008290:	0003      	movs	r3, r0
 8008292:	617b      	str	r3, [r7, #20]
        break;
 8008294:	e012      	b.n	80082bc <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008296:	4b30      	ldr	r3, [pc, #192]	; (8008358 <UART_SetConfig+0x2cc>)
 8008298:	617b      	str	r3, [r7, #20]
        break;
 800829a:	e00f      	b.n	80082bc <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800829c:	f7fe fce2 	bl	8006c64 <HAL_RCC_GetSysClockFreq>
 80082a0:	0003      	movs	r3, r0
 80082a2:	617b      	str	r3, [r7, #20]
        break;
 80082a4:	e00a      	b.n	80082bc <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082a6:	2380      	movs	r3, #128	; 0x80
 80082a8:	021b      	lsls	r3, r3, #8
 80082aa:	617b      	str	r3, [r7, #20]
        break;
 80082ac:	e006      	b.n	80082bc <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 80082ae:	2300      	movs	r3, #0
 80082b0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80082b2:	231a      	movs	r3, #26
 80082b4:	18fb      	adds	r3, r7, r3
 80082b6:	2201      	movs	r2, #1
 80082b8:	701a      	strb	r2, [r3, #0]
        break;
 80082ba:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d028      	beq.n	8008314 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80082c6:	4b25      	ldr	r3, [pc, #148]	; (800835c <UART_SetConfig+0x2d0>)
 80082c8:	0052      	lsls	r2, r2, #1
 80082ca:	5ad3      	ldrh	r3, [r2, r3]
 80082cc:	0019      	movs	r1, r3
 80082ce:	6978      	ldr	r0, [r7, #20]
 80082d0:	f7f7 ff16 	bl	8000100 <__udivsi3>
 80082d4:	0003      	movs	r3, r0
 80082d6:	001a      	movs	r2, r3
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	085b      	lsrs	r3, r3, #1
 80082de:	18d2      	adds	r2, r2, r3
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	0019      	movs	r1, r3
 80082e6:	0010      	movs	r0, r2
 80082e8:	f7f7 ff0a 	bl	8000100 <__udivsi3>
 80082ec:	0003      	movs	r3, r0
 80082ee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082f0:	693b      	ldr	r3, [r7, #16]
 80082f2:	2b0f      	cmp	r3, #15
 80082f4:	d90a      	bls.n	800830c <UART_SetConfig+0x280>
 80082f6:	693a      	ldr	r2, [r7, #16]
 80082f8:	2380      	movs	r3, #128	; 0x80
 80082fa:	025b      	lsls	r3, r3, #9
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d205      	bcs.n	800830c <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008300:	693b      	ldr	r3, [r7, #16]
 8008302:	b29a      	uxth	r2, r3
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	60da      	str	r2, [r3, #12]
 800830a:	e003      	b.n	8008314 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 800830c:	231a      	movs	r3, #26
 800830e:	18fb      	adds	r3, r7, r3
 8008310:	2201      	movs	r2, #1
 8008312:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	226a      	movs	r2, #106	; 0x6a
 8008318:	2101      	movs	r1, #1
 800831a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2268      	movs	r2, #104	; 0x68
 8008320:	2101      	movs	r1, #1
 8008322:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2200      	movs	r2, #0
 8008328:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2200      	movs	r2, #0
 800832e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008330:	231a      	movs	r3, #26
 8008332:	18fb      	adds	r3, r7, r3
 8008334:	781b      	ldrb	r3, [r3, #0]
}
 8008336:	0018      	movs	r0, r3
 8008338:	46bd      	mov	sp, r7
 800833a:	b008      	add	sp, #32
 800833c:	bd80      	pop	{r7, pc}
 800833e:	46c0      	nop			; (mov r8, r8)
 8008340:	cfff69f3 	.word	0xcfff69f3
 8008344:	ffffcfff 	.word	0xffffcfff
 8008348:	11fff4ff 	.word	0x11fff4ff
 800834c:	40013800 	.word	0x40013800
 8008350:	40021000 	.word	0x40021000
 8008354:	40004400 	.word	0x40004400
 8008358:	00f42400 	.word	0x00f42400
 800835c:	080091f8 	.word	0x080091f8

08008360 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b082      	sub	sp, #8
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800836c:	2208      	movs	r2, #8
 800836e:	4013      	ands	r3, r2
 8008370:	d00b      	beq.n	800838a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	4a4a      	ldr	r2, [pc, #296]	; (80084a4 <UART_AdvFeatureConfig+0x144>)
 800837a:	4013      	ands	r3, r2
 800837c:	0019      	movs	r1, r3
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	430a      	orrs	r2, r1
 8008388:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800838e:	2201      	movs	r2, #1
 8008390:	4013      	ands	r3, r2
 8008392:	d00b      	beq.n	80083ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	4a43      	ldr	r2, [pc, #268]	; (80084a8 <UART_AdvFeatureConfig+0x148>)
 800839c:	4013      	ands	r3, r2
 800839e:	0019      	movs	r1, r3
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	430a      	orrs	r2, r1
 80083aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083b0:	2202      	movs	r2, #2
 80083b2:	4013      	ands	r3, r2
 80083b4:	d00b      	beq.n	80083ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	4a3b      	ldr	r2, [pc, #236]	; (80084ac <UART_AdvFeatureConfig+0x14c>)
 80083be:	4013      	ands	r3, r2
 80083c0:	0019      	movs	r1, r3
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	430a      	orrs	r2, r1
 80083cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083d2:	2204      	movs	r2, #4
 80083d4:	4013      	ands	r3, r2
 80083d6:	d00b      	beq.n	80083f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	4a34      	ldr	r2, [pc, #208]	; (80084b0 <UART_AdvFeatureConfig+0x150>)
 80083e0:	4013      	ands	r3, r2
 80083e2:	0019      	movs	r1, r3
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	430a      	orrs	r2, r1
 80083ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083f4:	2210      	movs	r2, #16
 80083f6:	4013      	ands	r3, r2
 80083f8:	d00b      	beq.n	8008412 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	689b      	ldr	r3, [r3, #8]
 8008400:	4a2c      	ldr	r2, [pc, #176]	; (80084b4 <UART_AdvFeatureConfig+0x154>)
 8008402:	4013      	ands	r3, r2
 8008404:	0019      	movs	r1, r3
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	430a      	orrs	r2, r1
 8008410:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008416:	2220      	movs	r2, #32
 8008418:	4013      	ands	r3, r2
 800841a:	d00b      	beq.n	8008434 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	689b      	ldr	r3, [r3, #8]
 8008422:	4a25      	ldr	r2, [pc, #148]	; (80084b8 <UART_AdvFeatureConfig+0x158>)
 8008424:	4013      	ands	r3, r2
 8008426:	0019      	movs	r1, r3
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	430a      	orrs	r2, r1
 8008432:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008438:	2240      	movs	r2, #64	; 0x40
 800843a:	4013      	ands	r3, r2
 800843c:	d01d      	beq.n	800847a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	685b      	ldr	r3, [r3, #4]
 8008444:	4a1d      	ldr	r2, [pc, #116]	; (80084bc <UART_AdvFeatureConfig+0x15c>)
 8008446:	4013      	ands	r3, r2
 8008448:	0019      	movs	r1, r3
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	430a      	orrs	r2, r1
 8008454:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800845a:	2380      	movs	r3, #128	; 0x80
 800845c:	035b      	lsls	r3, r3, #13
 800845e:	429a      	cmp	r2, r3
 8008460:	d10b      	bne.n	800847a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	4a15      	ldr	r2, [pc, #84]	; (80084c0 <UART_AdvFeatureConfig+0x160>)
 800846a:	4013      	ands	r3, r2
 800846c:	0019      	movs	r1, r3
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	430a      	orrs	r2, r1
 8008478:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800847e:	2280      	movs	r2, #128	; 0x80
 8008480:	4013      	ands	r3, r2
 8008482:	d00b      	beq.n	800849c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	4a0e      	ldr	r2, [pc, #56]	; (80084c4 <UART_AdvFeatureConfig+0x164>)
 800848c:	4013      	ands	r3, r2
 800848e:	0019      	movs	r1, r3
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	430a      	orrs	r2, r1
 800849a:	605a      	str	r2, [r3, #4]
  }
}
 800849c:	46c0      	nop			; (mov r8, r8)
 800849e:	46bd      	mov	sp, r7
 80084a0:	b002      	add	sp, #8
 80084a2:	bd80      	pop	{r7, pc}
 80084a4:	ffff7fff 	.word	0xffff7fff
 80084a8:	fffdffff 	.word	0xfffdffff
 80084ac:	fffeffff 	.word	0xfffeffff
 80084b0:	fffbffff 	.word	0xfffbffff
 80084b4:	ffffefff 	.word	0xffffefff
 80084b8:	ffffdfff 	.word	0xffffdfff
 80084bc:	ffefffff 	.word	0xffefffff
 80084c0:	ff9fffff 	.word	0xff9fffff
 80084c4:	fff7ffff 	.word	0xfff7ffff

080084c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b092      	sub	sp, #72	; 0x48
 80084cc:	af02      	add	r7, sp, #8
 80084ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2290      	movs	r2, #144	; 0x90
 80084d4:	2100      	movs	r1, #0
 80084d6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80084d8:	f7fc fd8a 	bl	8004ff0 <HAL_GetTick>
 80084dc:	0003      	movs	r3, r0
 80084de:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	2208      	movs	r2, #8
 80084e8:	4013      	ands	r3, r2
 80084ea:	2b08      	cmp	r3, #8
 80084ec:	d12d      	bne.n	800854a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80084ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084f0:	2280      	movs	r2, #128	; 0x80
 80084f2:	0391      	lsls	r1, r2, #14
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	4a47      	ldr	r2, [pc, #284]	; (8008614 <UART_CheckIdleState+0x14c>)
 80084f8:	9200      	str	r2, [sp, #0]
 80084fa:	2200      	movs	r2, #0
 80084fc:	f000 f88e 	bl	800861c <UART_WaitOnFlagUntilTimeout>
 8008500:	1e03      	subs	r3, r0, #0
 8008502:	d022      	beq.n	800854a <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008504:	f3ef 8310 	mrs	r3, PRIMASK
 8008508:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800850a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800850c:	63bb      	str	r3, [r7, #56]	; 0x38
 800850e:	2301      	movs	r3, #1
 8008510:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008514:	f383 8810 	msr	PRIMASK, r3
}
 8008518:	46c0      	nop			; (mov r8, r8)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	681a      	ldr	r2, [r3, #0]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	2180      	movs	r1, #128	; 0x80
 8008526:	438a      	bics	r2, r1
 8008528:	601a      	str	r2, [r3, #0]
 800852a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800852c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800852e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008530:	f383 8810 	msr	PRIMASK, r3
}
 8008534:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2288      	movs	r2, #136	; 0x88
 800853a:	2120      	movs	r1, #32
 800853c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2284      	movs	r2, #132	; 0x84
 8008542:	2100      	movs	r1, #0
 8008544:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008546:	2303      	movs	r3, #3
 8008548:	e060      	b.n	800860c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	2204      	movs	r2, #4
 8008552:	4013      	ands	r3, r2
 8008554:	2b04      	cmp	r3, #4
 8008556:	d146      	bne.n	80085e6 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800855a:	2280      	movs	r2, #128	; 0x80
 800855c:	03d1      	lsls	r1, r2, #15
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	4a2c      	ldr	r2, [pc, #176]	; (8008614 <UART_CheckIdleState+0x14c>)
 8008562:	9200      	str	r2, [sp, #0]
 8008564:	2200      	movs	r2, #0
 8008566:	f000 f859 	bl	800861c <UART_WaitOnFlagUntilTimeout>
 800856a:	1e03      	subs	r3, r0, #0
 800856c:	d03b      	beq.n	80085e6 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800856e:	f3ef 8310 	mrs	r3, PRIMASK
 8008572:	60fb      	str	r3, [r7, #12]
  return(result);
 8008574:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008576:	637b      	str	r3, [r7, #52]	; 0x34
 8008578:	2301      	movs	r3, #1
 800857a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	f383 8810 	msr	PRIMASK, r3
}
 8008582:	46c0      	nop			; (mov r8, r8)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	681a      	ldr	r2, [r3, #0]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4922      	ldr	r1, [pc, #136]	; (8008618 <UART_CheckIdleState+0x150>)
 8008590:	400a      	ands	r2, r1
 8008592:	601a      	str	r2, [r3, #0]
 8008594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008596:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	f383 8810 	msr	PRIMASK, r3
}
 800859e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085a0:	f3ef 8310 	mrs	r3, PRIMASK
 80085a4:	61bb      	str	r3, [r7, #24]
  return(result);
 80085a6:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085a8:	633b      	str	r3, [r7, #48]	; 0x30
 80085aa:	2301      	movs	r3, #1
 80085ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085ae:	69fb      	ldr	r3, [r7, #28]
 80085b0:	f383 8810 	msr	PRIMASK, r3
}
 80085b4:	46c0      	nop			; (mov r8, r8)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	689a      	ldr	r2, [r3, #8]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	2101      	movs	r1, #1
 80085c2:	438a      	bics	r2, r1
 80085c4:	609a      	str	r2, [r3, #8]
 80085c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085ca:	6a3b      	ldr	r3, [r7, #32]
 80085cc:	f383 8810 	msr	PRIMASK, r3
}
 80085d0:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	228c      	movs	r2, #140	; 0x8c
 80085d6:	2120      	movs	r1, #32
 80085d8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2284      	movs	r2, #132	; 0x84
 80085de:	2100      	movs	r1, #0
 80085e0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085e2:	2303      	movs	r3, #3
 80085e4:	e012      	b.n	800860c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2288      	movs	r2, #136	; 0x88
 80085ea:	2120      	movs	r1, #32
 80085ec:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	228c      	movs	r2, #140	; 0x8c
 80085f2:	2120      	movs	r1, #32
 80085f4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2200      	movs	r2, #0
 80085fa:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2200      	movs	r2, #0
 8008600:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2284      	movs	r2, #132	; 0x84
 8008606:	2100      	movs	r1, #0
 8008608:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800860a:	2300      	movs	r3, #0
}
 800860c:	0018      	movs	r0, r3
 800860e:	46bd      	mov	sp, r7
 8008610:	b010      	add	sp, #64	; 0x40
 8008612:	bd80      	pop	{r7, pc}
 8008614:	01ffffff 	.word	0x01ffffff
 8008618:	fffffedf 	.word	0xfffffedf

0800861c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b084      	sub	sp, #16
 8008620:	af00      	add	r7, sp, #0
 8008622:	60f8      	str	r0, [r7, #12]
 8008624:	60b9      	str	r1, [r7, #8]
 8008626:	603b      	str	r3, [r7, #0]
 8008628:	1dfb      	adds	r3, r7, #7
 800862a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800862c:	e051      	b.n	80086d2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800862e:	69bb      	ldr	r3, [r7, #24]
 8008630:	3301      	adds	r3, #1
 8008632:	d04e      	beq.n	80086d2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008634:	f7fc fcdc 	bl	8004ff0 <HAL_GetTick>
 8008638:	0002      	movs	r2, r0
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	1ad3      	subs	r3, r2, r3
 800863e:	69ba      	ldr	r2, [r7, #24]
 8008640:	429a      	cmp	r2, r3
 8008642:	d302      	bcc.n	800864a <UART_WaitOnFlagUntilTimeout+0x2e>
 8008644:	69bb      	ldr	r3, [r7, #24]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d101      	bne.n	800864e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800864a:	2303      	movs	r3, #3
 800864c:	e051      	b.n	80086f2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	2204      	movs	r2, #4
 8008656:	4013      	ands	r3, r2
 8008658:	d03b      	beq.n	80086d2 <UART_WaitOnFlagUntilTimeout+0xb6>
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	2b80      	cmp	r3, #128	; 0x80
 800865e:	d038      	beq.n	80086d2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	2b40      	cmp	r3, #64	; 0x40
 8008664:	d035      	beq.n	80086d2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	69db      	ldr	r3, [r3, #28]
 800866c:	2208      	movs	r2, #8
 800866e:	4013      	ands	r3, r2
 8008670:	2b08      	cmp	r3, #8
 8008672:	d111      	bne.n	8008698 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	2208      	movs	r2, #8
 800867a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	0018      	movs	r0, r3
 8008680:	f000 f83c 	bl	80086fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	2290      	movs	r2, #144	; 0x90
 8008688:	2108      	movs	r1, #8
 800868a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	2284      	movs	r2, #132	; 0x84
 8008690:	2100      	movs	r1, #0
 8008692:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8008694:	2301      	movs	r3, #1
 8008696:	e02c      	b.n	80086f2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	69da      	ldr	r2, [r3, #28]
 800869e:	2380      	movs	r3, #128	; 0x80
 80086a0:	011b      	lsls	r3, r3, #4
 80086a2:	401a      	ands	r2, r3
 80086a4:	2380      	movs	r3, #128	; 0x80
 80086a6:	011b      	lsls	r3, r3, #4
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d112      	bne.n	80086d2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	2280      	movs	r2, #128	; 0x80
 80086b2:	0112      	lsls	r2, r2, #4
 80086b4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	0018      	movs	r0, r3
 80086ba:	f000 f81f 	bl	80086fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2290      	movs	r2, #144	; 0x90
 80086c2:	2120      	movs	r1, #32
 80086c4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2284      	movs	r2, #132	; 0x84
 80086ca:	2100      	movs	r1, #0
 80086cc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80086ce:	2303      	movs	r3, #3
 80086d0:	e00f      	b.n	80086f2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	69db      	ldr	r3, [r3, #28]
 80086d8:	68ba      	ldr	r2, [r7, #8]
 80086da:	4013      	ands	r3, r2
 80086dc:	68ba      	ldr	r2, [r7, #8]
 80086de:	1ad3      	subs	r3, r2, r3
 80086e0:	425a      	negs	r2, r3
 80086e2:	4153      	adcs	r3, r2
 80086e4:	b2db      	uxtb	r3, r3
 80086e6:	001a      	movs	r2, r3
 80086e8:	1dfb      	adds	r3, r7, #7
 80086ea:	781b      	ldrb	r3, [r3, #0]
 80086ec:	429a      	cmp	r2, r3
 80086ee:	d09e      	beq.n	800862e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80086f0:	2300      	movs	r3, #0
}
 80086f2:	0018      	movs	r0, r3
 80086f4:	46bd      	mov	sp, r7
 80086f6:	b004      	add	sp, #16
 80086f8:	bd80      	pop	{r7, pc}
	...

080086fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b08e      	sub	sp, #56	; 0x38
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008704:	f3ef 8310 	mrs	r3, PRIMASK
 8008708:	617b      	str	r3, [r7, #20]
  return(result);
 800870a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800870c:	637b      	str	r3, [r7, #52]	; 0x34
 800870e:	2301      	movs	r3, #1
 8008710:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008712:	69bb      	ldr	r3, [r7, #24]
 8008714:	f383 8810 	msr	PRIMASK, r3
}
 8008718:	46c0      	nop			; (mov r8, r8)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	681a      	ldr	r2, [r3, #0]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4926      	ldr	r1, [pc, #152]	; (80087c0 <UART_EndRxTransfer+0xc4>)
 8008726:	400a      	ands	r2, r1
 8008728:	601a      	str	r2, [r3, #0]
 800872a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800872c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800872e:	69fb      	ldr	r3, [r7, #28]
 8008730:	f383 8810 	msr	PRIMASK, r3
}
 8008734:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008736:	f3ef 8310 	mrs	r3, PRIMASK
 800873a:	623b      	str	r3, [r7, #32]
  return(result);
 800873c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800873e:	633b      	str	r3, [r7, #48]	; 0x30
 8008740:	2301      	movs	r3, #1
 8008742:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008746:	f383 8810 	msr	PRIMASK, r3
}
 800874a:	46c0      	nop			; (mov r8, r8)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	689a      	ldr	r2, [r3, #8]
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	491b      	ldr	r1, [pc, #108]	; (80087c4 <UART_EndRxTransfer+0xc8>)
 8008758:	400a      	ands	r2, r1
 800875a:	609a      	str	r2, [r3, #8]
 800875c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800875e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008762:	f383 8810 	msr	PRIMASK, r3
}
 8008766:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800876c:	2b01      	cmp	r3, #1
 800876e:	d118      	bne.n	80087a2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008770:	f3ef 8310 	mrs	r3, PRIMASK
 8008774:	60bb      	str	r3, [r7, #8]
  return(result);
 8008776:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008778:	62fb      	str	r3, [r7, #44]	; 0x2c
 800877a:	2301      	movs	r3, #1
 800877c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	f383 8810 	msr	PRIMASK, r3
}
 8008784:	46c0      	nop			; (mov r8, r8)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	681a      	ldr	r2, [r3, #0]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	2110      	movs	r1, #16
 8008792:	438a      	bics	r2, r1
 8008794:	601a      	str	r2, [r3, #0]
 8008796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008798:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	f383 8810 	msr	PRIMASK, r3
}
 80087a0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	228c      	movs	r2, #140	; 0x8c
 80087a6:	2120      	movs	r1, #32
 80087a8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2200      	movs	r2, #0
 80087ae:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2200      	movs	r2, #0
 80087b4:	675a      	str	r2, [r3, #116]	; 0x74
}
 80087b6:	46c0      	nop			; (mov r8, r8)
 80087b8:	46bd      	mov	sp, r7
 80087ba:	b00e      	add	sp, #56	; 0x38
 80087bc:	bd80      	pop	{r7, pc}
 80087be:	46c0      	nop			; (mov r8, r8)
 80087c0:	fffffedf 	.word	0xfffffedf
 80087c4:	effffffe 	.word	0xeffffffe

080087c8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b084      	sub	sp, #16
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2284      	movs	r2, #132	; 0x84
 80087d4:	5c9b      	ldrb	r3, [r3, r2]
 80087d6:	2b01      	cmp	r3, #1
 80087d8:	d101      	bne.n	80087de <HAL_UARTEx_DisableFifoMode+0x16>
 80087da:	2302      	movs	r3, #2
 80087dc:	e027      	b.n	800882e <HAL_UARTEx_DisableFifoMode+0x66>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2284      	movs	r2, #132	; 0x84
 80087e2:	2101      	movs	r1, #1
 80087e4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2288      	movs	r2, #136	; 0x88
 80087ea:	2124      	movs	r1, #36	; 0x24
 80087ec:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	681a      	ldr	r2, [r3, #0]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	2101      	movs	r1, #1
 8008802:	438a      	bics	r2, r1
 8008804:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	4a0b      	ldr	r2, [pc, #44]	; (8008838 <HAL_UARTEx_DisableFifoMode+0x70>)
 800880a:	4013      	ands	r3, r2
 800880c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2200      	movs	r2, #0
 8008812:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	68fa      	ldr	r2, [r7, #12]
 800881a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2288      	movs	r2, #136	; 0x88
 8008820:	2120      	movs	r1, #32
 8008822:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2284      	movs	r2, #132	; 0x84
 8008828:	2100      	movs	r1, #0
 800882a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800882c:	2300      	movs	r3, #0
}
 800882e:	0018      	movs	r0, r3
 8008830:	46bd      	mov	sp, r7
 8008832:	b004      	add	sp, #16
 8008834:	bd80      	pop	{r7, pc}
 8008836:	46c0      	nop			; (mov r8, r8)
 8008838:	dfffffff 	.word	0xdfffffff

0800883c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b084      	sub	sp, #16
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2284      	movs	r2, #132	; 0x84
 800884a:	5c9b      	ldrb	r3, [r3, r2]
 800884c:	2b01      	cmp	r3, #1
 800884e:	d101      	bne.n	8008854 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008850:	2302      	movs	r3, #2
 8008852:	e02e      	b.n	80088b2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2284      	movs	r2, #132	; 0x84
 8008858:	2101      	movs	r1, #1
 800885a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2288      	movs	r2, #136	; 0x88
 8008860:	2124      	movs	r1, #36	; 0x24
 8008862:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	681a      	ldr	r2, [r3, #0]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	2101      	movs	r1, #1
 8008878:	438a      	bics	r2, r1
 800887a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	689b      	ldr	r3, [r3, #8]
 8008882:	00db      	lsls	r3, r3, #3
 8008884:	08d9      	lsrs	r1, r3, #3
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	683a      	ldr	r2, [r7, #0]
 800888c:	430a      	orrs	r2, r1
 800888e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	0018      	movs	r0, r3
 8008894:	f000 f854 	bl	8008940 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	68fa      	ldr	r2, [r7, #12]
 800889e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2288      	movs	r2, #136	; 0x88
 80088a4:	2120      	movs	r1, #32
 80088a6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2284      	movs	r2, #132	; 0x84
 80088ac:	2100      	movs	r1, #0
 80088ae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80088b0:	2300      	movs	r3, #0
}
 80088b2:	0018      	movs	r0, r3
 80088b4:	46bd      	mov	sp, r7
 80088b6:	b004      	add	sp, #16
 80088b8:	bd80      	pop	{r7, pc}
	...

080088bc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b084      	sub	sp, #16
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2284      	movs	r2, #132	; 0x84
 80088ca:	5c9b      	ldrb	r3, [r3, r2]
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	d101      	bne.n	80088d4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80088d0:	2302      	movs	r3, #2
 80088d2:	e02f      	b.n	8008934 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2284      	movs	r2, #132	; 0x84
 80088d8:	2101      	movs	r1, #1
 80088da:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2288      	movs	r2, #136	; 0x88
 80088e0:	2124      	movs	r1, #36	; 0x24
 80088e2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	681a      	ldr	r2, [r3, #0]
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	2101      	movs	r1, #1
 80088f8:	438a      	bics	r2, r1
 80088fa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	689b      	ldr	r3, [r3, #8]
 8008902:	4a0e      	ldr	r2, [pc, #56]	; (800893c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8008904:	4013      	ands	r3, r2
 8008906:	0019      	movs	r1, r3
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	683a      	ldr	r2, [r7, #0]
 800890e:	430a      	orrs	r2, r1
 8008910:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	0018      	movs	r0, r3
 8008916:	f000 f813 	bl	8008940 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	68fa      	ldr	r2, [r7, #12]
 8008920:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2288      	movs	r2, #136	; 0x88
 8008926:	2120      	movs	r1, #32
 8008928:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2284      	movs	r2, #132	; 0x84
 800892e:	2100      	movs	r1, #0
 8008930:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008932:	2300      	movs	r3, #0
}
 8008934:	0018      	movs	r0, r3
 8008936:	46bd      	mov	sp, r7
 8008938:	b004      	add	sp, #16
 800893a:	bd80      	pop	{r7, pc}
 800893c:	f1ffffff 	.word	0xf1ffffff

08008940 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008940:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008942:	b085      	sub	sp, #20
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800894c:	2b00      	cmp	r3, #0
 800894e:	d108      	bne.n	8008962 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	226a      	movs	r2, #106	; 0x6a
 8008954:	2101      	movs	r1, #1
 8008956:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2268      	movs	r2, #104	; 0x68
 800895c:	2101      	movs	r1, #1
 800895e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008960:	e043      	b.n	80089ea <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008962:	260f      	movs	r6, #15
 8008964:	19bb      	adds	r3, r7, r6
 8008966:	2208      	movs	r2, #8
 8008968:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800896a:	200e      	movs	r0, #14
 800896c:	183b      	adds	r3, r7, r0
 800896e:	2208      	movs	r2, #8
 8008970:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	689b      	ldr	r3, [r3, #8]
 8008978:	0e5b      	lsrs	r3, r3, #25
 800897a:	b2da      	uxtb	r2, r3
 800897c:	240d      	movs	r4, #13
 800897e:	193b      	adds	r3, r7, r4
 8008980:	2107      	movs	r1, #7
 8008982:	400a      	ands	r2, r1
 8008984:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	689b      	ldr	r3, [r3, #8]
 800898c:	0f5b      	lsrs	r3, r3, #29
 800898e:	b2da      	uxtb	r2, r3
 8008990:	250c      	movs	r5, #12
 8008992:	197b      	adds	r3, r7, r5
 8008994:	2107      	movs	r1, #7
 8008996:	400a      	ands	r2, r1
 8008998:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800899a:	183b      	adds	r3, r7, r0
 800899c:	781b      	ldrb	r3, [r3, #0]
 800899e:	197a      	adds	r2, r7, r5
 80089a0:	7812      	ldrb	r2, [r2, #0]
 80089a2:	4914      	ldr	r1, [pc, #80]	; (80089f4 <UARTEx_SetNbDataToProcess+0xb4>)
 80089a4:	5c8a      	ldrb	r2, [r1, r2]
 80089a6:	435a      	muls	r2, r3
 80089a8:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80089aa:	197b      	adds	r3, r7, r5
 80089ac:	781b      	ldrb	r3, [r3, #0]
 80089ae:	4a12      	ldr	r2, [pc, #72]	; (80089f8 <UARTEx_SetNbDataToProcess+0xb8>)
 80089b0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80089b2:	0019      	movs	r1, r3
 80089b4:	f7f7 fc2e 	bl	8000214 <__divsi3>
 80089b8:	0003      	movs	r3, r0
 80089ba:	b299      	uxth	r1, r3
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	226a      	movs	r2, #106	; 0x6a
 80089c0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80089c2:	19bb      	adds	r3, r7, r6
 80089c4:	781b      	ldrb	r3, [r3, #0]
 80089c6:	193a      	adds	r2, r7, r4
 80089c8:	7812      	ldrb	r2, [r2, #0]
 80089ca:	490a      	ldr	r1, [pc, #40]	; (80089f4 <UARTEx_SetNbDataToProcess+0xb4>)
 80089cc:	5c8a      	ldrb	r2, [r1, r2]
 80089ce:	435a      	muls	r2, r3
 80089d0:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80089d2:	193b      	adds	r3, r7, r4
 80089d4:	781b      	ldrb	r3, [r3, #0]
 80089d6:	4a08      	ldr	r2, [pc, #32]	; (80089f8 <UARTEx_SetNbDataToProcess+0xb8>)
 80089d8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80089da:	0019      	movs	r1, r3
 80089dc:	f7f7 fc1a 	bl	8000214 <__divsi3>
 80089e0:	0003      	movs	r3, r0
 80089e2:	b299      	uxth	r1, r3
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2268      	movs	r2, #104	; 0x68
 80089e8:	5299      	strh	r1, [r3, r2]
}
 80089ea:	46c0      	nop			; (mov r8, r8)
 80089ec:	46bd      	mov	sp, r7
 80089ee:	b005      	add	sp, #20
 80089f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089f2:	46c0      	nop			; (mov r8, r8)
 80089f4:	08009210 	.word	0x08009210
 80089f8:	08009218 	.word	0x08009218

080089fc <sqrt>:
 80089fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089fe:	0004      	movs	r4, r0
 8008a00:	000d      	movs	r5, r1
 8008a02:	f000 f865 	bl	8008ad0 <__ieee754_sqrt>
 8008a06:	0022      	movs	r2, r4
 8008a08:	0006      	movs	r6, r0
 8008a0a:	000f      	movs	r7, r1
 8008a0c:	002b      	movs	r3, r5
 8008a0e:	0020      	movs	r0, r4
 8008a10:	0029      	movs	r1, r5
 8008a12:	f7fa f9c1 	bl	8002d98 <__aeabi_dcmpun>
 8008a16:	2800      	cmp	r0, #0
 8008a18:	d113      	bne.n	8008a42 <sqrt+0x46>
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	0020      	movs	r0, r4
 8008a20:	0029      	movs	r1, r5
 8008a22:	f7f7 fcf9 	bl	8000418 <__aeabi_dcmplt>
 8008a26:	2800      	cmp	r0, #0
 8008a28:	d00b      	beq.n	8008a42 <sqrt+0x46>
 8008a2a:	f000 fb1f 	bl	800906c <__errno>
 8008a2e:	2321      	movs	r3, #33	; 0x21
 8008a30:	2200      	movs	r2, #0
 8008a32:	6003      	str	r3, [r0, #0]
 8008a34:	2300      	movs	r3, #0
 8008a36:	0010      	movs	r0, r2
 8008a38:	0019      	movs	r1, r3
 8008a3a:	f7f8 ff6f 	bl	800191c <__aeabi_ddiv>
 8008a3e:	0006      	movs	r6, r0
 8008a40:	000f      	movs	r7, r1
 8008a42:	0030      	movs	r0, r6
 8008a44:	0039      	movs	r1, r7
 8008a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008a48 <acosf>:
 8008a48:	b570      	push	{r4, r5, r6, lr}
 8008a4a:	1c05      	adds	r5, r0, #0
 8008a4c:	f000 f9a4 	bl	8008d98 <__ieee754_acosf>
 8008a50:	1c29      	adds	r1, r5, #0
 8008a52:	1c04      	adds	r4, r0, #0
 8008a54:	1c28      	adds	r0, r5, #0
 8008a56:	f7f8 fb99 	bl	800118c <__aeabi_fcmpun>
 8008a5a:	2800      	cmp	r0, #0
 8008a5c:	d110      	bne.n	8008a80 <acosf+0x38>
 8008a5e:	1c28      	adds	r0, r5, #0
 8008a60:	f000 f82e 	bl	8008ac0 <fabsf>
 8008a64:	21fe      	movs	r1, #254	; 0xfe
 8008a66:	0589      	lsls	r1, r1, #22
 8008a68:	f7f7 fd24 	bl	80004b4 <__aeabi_fcmpgt>
 8008a6c:	2800      	cmp	r0, #0
 8008a6e:	d007      	beq.n	8008a80 <acosf+0x38>
 8008a70:	f000 fafc 	bl	800906c <__errno>
 8008a74:	2321      	movs	r3, #33	; 0x21
 8008a76:	6003      	str	r3, [r0, #0]
 8008a78:	4802      	ldr	r0, [pc, #8]	; (8008a84 <acosf+0x3c>)
 8008a7a:	f000 f825 	bl	8008ac8 <nanf>
 8008a7e:	1c04      	adds	r4, r0, #0
 8008a80:	1c20      	adds	r0, r4, #0
 8008a82:	bd70      	pop	{r4, r5, r6, pc}
 8008a84:	08009220 	.word	0x08009220

08008a88 <sqrtf>:
 8008a88:	b570      	push	{r4, r5, r6, lr}
 8008a8a:	1c05      	adds	r5, r0, #0
 8008a8c:	f000 f90c 	bl	8008ca8 <__ieee754_sqrtf>
 8008a90:	1c29      	adds	r1, r5, #0
 8008a92:	1c04      	adds	r4, r0, #0
 8008a94:	1c28      	adds	r0, r5, #0
 8008a96:	f7f8 fb79 	bl	800118c <__aeabi_fcmpun>
 8008a9a:	2800      	cmp	r0, #0
 8008a9c:	d10e      	bne.n	8008abc <sqrtf+0x34>
 8008a9e:	2100      	movs	r1, #0
 8008aa0:	1c28      	adds	r0, r5, #0
 8008aa2:	f7f7 fcf3 	bl	800048c <__aeabi_fcmplt>
 8008aa6:	2800      	cmp	r0, #0
 8008aa8:	d008      	beq.n	8008abc <sqrtf+0x34>
 8008aaa:	f000 fadf 	bl	800906c <__errno>
 8008aae:	2321      	movs	r3, #33	; 0x21
 8008ab0:	2100      	movs	r1, #0
 8008ab2:	6003      	str	r3, [r0, #0]
 8008ab4:	1c08      	adds	r0, r1, #0
 8008ab6:	f7f7 feb1 	bl	800081c <__aeabi_fdiv>
 8008aba:	1c04      	adds	r4, r0, #0
 8008abc:	1c20      	adds	r0, r4, #0
 8008abe:	bd70      	pop	{r4, r5, r6, pc}

08008ac0 <fabsf>:
 8008ac0:	0040      	lsls	r0, r0, #1
 8008ac2:	0840      	lsrs	r0, r0, #1
 8008ac4:	4770      	bx	lr
	...

08008ac8 <nanf>:
 8008ac8:	4800      	ldr	r0, [pc, #0]	; (8008acc <nanf+0x4>)
 8008aca:	4770      	bx	lr
 8008acc:	7fc00000 	.word	0x7fc00000

08008ad0 <__ieee754_sqrt>:
 8008ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ad2:	000a      	movs	r2, r1
 8008ad4:	000c      	movs	r4, r1
 8008ad6:	496f      	ldr	r1, [pc, #444]	; (8008c94 <__ieee754_sqrt+0x1c4>)
 8008ad8:	0005      	movs	r5, r0
 8008ada:	0003      	movs	r3, r0
 8008adc:	0008      	movs	r0, r1
 8008ade:	b087      	sub	sp, #28
 8008ae0:	4020      	ands	r0, r4
 8008ae2:	4288      	cmp	r0, r1
 8008ae4:	d111      	bne.n	8008b0a <__ieee754_sqrt+0x3a>
 8008ae6:	002a      	movs	r2, r5
 8008ae8:	0023      	movs	r3, r4
 8008aea:	0028      	movs	r0, r5
 8008aec:	0021      	movs	r1, r4
 8008aee:	f7f9 fb0f 	bl	8002110 <__aeabi_dmul>
 8008af2:	0002      	movs	r2, r0
 8008af4:	000b      	movs	r3, r1
 8008af6:	0028      	movs	r0, r5
 8008af8:	0021      	movs	r1, r4
 8008afa:	f7f8 fbaf 	bl	800125c <__aeabi_dadd>
 8008afe:	0005      	movs	r5, r0
 8008b00:	000c      	movs	r4, r1
 8008b02:	0028      	movs	r0, r5
 8008b04:	0021      	movs	r1, r4
 8008b06:	b007      	add	sp, #28
 8008b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b0a:	2c00      	cmp	r4, #0
 8008b0c:	dc12      	bgt.n	8008b34 <__ieee754_sqrt+0x64>
 8008b0e:	0061      	lsls	r1, r4, #1
 8008b10:	0849      	lsrs	r1, r1, #1
 8008b12:	4329      	orrs	r1, r5
 8008b14:	d0f5      	beq.n	8008b02 <__ieee754_sqrt+0x32>
 8008b16:	2100      	movs	r1, #0
 8008b18:	428c      	cmp	r4, r1
 8008b1a:	d100      	bne.n	8008b1e <__ieee754_sqrt+0x4e>
 8008b1c:	e09f      	b.n	8008c5e <__ieee754_sqrt+0x18e>
 8008b1e:	002a      	movs	r2, r5
 8008b20:	0023      	movs	r3, r4
 8008b22:	0028      	movs	r0, r5
 8008b24:	0021      	movs	r1, r4
 8008b26:	f7f9 fdb5 	bl	8002694 <__aeabi_dsub>
 8008b2a:	0002      	movs	r2, r0
 8008b2c:	000b      	movs	r3, r1
 8008b2e:	f7f8 fef5 	bl	800191c <__aeabi_ddiv>
 8008b32:	e7e4      	b.n	8008afe <__ieee754_sqrt+0x2e>
 8008b34:	1521      	asrs	r1, r4, #20
 8008b36:	d100      	bne.n	8008b3a <__ieee754_sqrt+0x6a>
 8008b38:	e091      	b.n	8008c5e <__ieee754_sqrt+0x18e>
 8008b3a:	4857      	ldr	r0, [pc, #348]	; (8008c98 <__ieee754_sqrt+0x1c8>)
 8008b3c:	0312      	lsls	r2, r2, #12
 8008b3e:	180c      	adds	r4, r1, r0
 8008b40:	2080      	movs	r0, #128	; 0x80
 8008b42:	0b12      	lsrs	r2, r2, #12
 8008b44:	0340      	lsls	r0, r0, #13
 8008b46:	4310      	orrs	r0, r2
 8008b48:	07c9      	lsls	r1, r1, #31
 8008b4a:	d403      	bmi.n	8008b54 <__ieee754_sqrt+0x84>
 8008b4c:	0fda      	lsrs	r2, r3, #31
 8008b4e:	0040      	lsls	r0, r0, #1
 8008b50:	1810      	adds	r0, r2, r0
 8008b52:	005b      	lsls	r3, r3, #1
 8008b54:	2500      	movs	r5, #0
 8008b56:	1062      	asrs	r2, r4, #1
 8008b58:	0040      	lsls	r0, r0, #1
 8008b5a:	2480      	movs	r4, #128	; 0x80
 8008b5c:	9205      	str	r2, [sp, #20]
 8008b5e:	0fda      	lsrs	r2, r3, #31
 8008b60:	1812      	adds	r2, r2, r0
 8008b62:	0029      	movs	r1, r5
 8008b64:	2016      	movs	r0, #22
 8008b66:	005b      	lsls	r3, r3, #1
 8008b68:	03a4      	lsls	r4, r4, #14
 8008b6a:	190e      	adds	r6, r1, r4
 8008b6c:	4296      	cmp	r6, r2
 8008b6e:	dc02      	bgt.n	8008b76 <__ieee754_sqrt+0xa6>
 8008b70:	1931      	adds	r1, r6, r4
 8008b72:	1b92      	subs	r2, r2, r6
 8008b74:	192d      	adds	r5, r5, r4
 8008b76:	0fde      	lsrs	r6, r3, #31
 8008b78:	0052      	lsls	r2, r2, #1
 8008b7a:	3801      	subs	r0, #1
 8008b7c:	18b2      	adds	r2, r6, r2
 8008b7e:	005b      	lsls	r3, r3, #1
 8008b80:	0864      	lsrs	r4, r4, #1
 8008b82:	2800      	cmp	r0, #0
 8008b84:	d1f1      	bne.n	8008b6a <__ieee754_sqrt+0x9a>
 8008b86:	2620      	movs	r6, #32
 8008b88:	2780      	movs	r7, #128	; 0x80
 8008b8a:	0004      	movs	r4, r0
 8008b8c:	9604      	str	r6, [sp, #16]
 8008b8e:	063f      	lsls	r7, r7, #24
 8008b90:	183e      	adds	r6, r7, r0
 8008b92:	46b4      	mov	ip, r6
 8008b94:	428a      	cmp	r2, r1
 8008b96:	dc02      	bgt.n	8008b9e <__ieee754_sqrt+0xce>
 8008b98:	d114      	bne.n	8008bc4 <__ieee754_sqrt+0xf4>
 8008b9a:	429e      	cmp	r6, r3
 8008b9c:	d812      	bhi.n	8008bc4 <__ieee754_sqrt+0xf4>
 8008b9e:	4660      	mov	r0, ip
 8008ba0:	4666      	mov	r6, ip
 8008ba2:	19c0      	adds	r0, r0, r7
 8008ba4:	9100      	str	r1, [sp, #0]
 8008ba6:	2e00      	cmp	r6, #0
 8008ba8:	da03      	bge.n	8008bb2 <__ieee754_sqrt+0xe2>
 8008baa:	43c6      	mvns	r6, r0
 8008bac:	0ff6      	lsrs	r6, r6, #31
 8008bae:	198e      	adds	r6, r1, r6
 8008bb0:	9600      	str	r6, [sp, #0]
 8008bb2:	1a52      	subs	r2, r2, r1
 8008bb4:	4563      	cmp	r3, ip
 8008bb6:	4189      	sbcs	r1, r1
 8008bb8:	4249      	negs	r1, r1
 8008bba:	1a52      	subs	r2, r2, r1
 8008bbc:	4661      	mov	r1, ip
 8008bbe:	1a5b      	subs	r3, r3, r1
 8008bc0:	9900      	ldr	r1, [sp, #0]
 8008bc2:	19e4      	adds	r4, r4, r7
 8008bc4:	0fde      	lsrs	r6, r3, #31
 8008bc6:	0052      	lsls	r2, r2, #1
 8008bc8:	18b2      	adds	r2, r6, r2
 8008bca:	9e04      	ldr	r6, [sp, #16]
 8008bcc:	005b      	lsls	r3, r3, #1
 8008bce:	3e01      	subs	r6, #1
 8008bd0:	087f      	lsrs	r7, r7, #1
 8008bd2:	9604      	str	r6, [sp, #16]
 8008bd4:	2e00      	cmp	r6, #0
 8008bd6:	d1db      	bne.n	8008b90 <__ieee754_sqrt+0xc0>
 8008bd8:	431a      	orrs	r2, r3
 8008bda:	d01f      	beq.n	8008c1c <__ieee754_sqrt+0x14c>
 8008bdc:	4e2f      	ldr	r6, [pc, #188]	; (8008c9c <__ieee754_sqrt+0x1cc>)
 8008bde:	4f30      	ldr	r7, [pc, #192]	; (8008ca0 <__ieee754_sqrt+0x1d0>)
 8008be0:	6830      	ldr	r0, [r6, #0]
 8008be2:	6871      	ldr	r1, [r6, #4]
 8008be4:	683a      	ldr	r2, [r7, #0]
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	9200      	str	r2, [sp, #0]
 8008bea:	9301      	str	r3, [sp, #4]
 8008bec:	6832      	ldr	r2, [r6, #0]
 8008bee:	6873      	ldr	r3, [r6, #4]
 8008bf0:	9202      	str	r2, [sp, #8]
 8008bf2:	9303      	str	r3, [sp, #12]
 8008bf4:	9a00      	ldr	r2, [sp, #0]
 8008bf6:	9b01      	ldr	r3, [sp, #4]
 8008bf8:	f7f9 fd4c 	bl	8002694 <__aeabi_dsub>
 8008bfc:	0002      	movs	r2, r0
 8008bfe:	000b      	movs	r3, r1
 8008c00:	9802      	ldr	r0, [sp, #8]
 8008c02:	9903      	ldr	r1, [sp, #12]
 8008c04:	f7f7 fc12 	bl	800042c <__aeabi_dcmple>
 8008c08:	2800      	cmp	r0, #0
 8008c0a:	d007      	beq.n	8008c1c <__ieee754_sqrt+0x14c>
 8008c0c:	6830      	ldr	r0, [r6, #0]
 8008c0e:	6871      	ldr	r1, [r6, #4]
 8008c10:	683a      	ldr	r2, [r7, #0]
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	1c67      	adds	r7, r4, #1
 8008c16:	d127      	bne.n	8008c68 <__ieee754_sqrt+0x198>
 8008c18:	9c04      	ldr	r4, [sp, #16]
 8008c1a:	3501      	adds	r5, #1
 8008c1c:	4b21      	ldr	r3, [pc, #132]	; (8008ca4 <__ieee754_sqrt+0x1d4>)
 8008c1e:	1069      	asrs	r1, r5, #1
 8008c20:	18c9      	adds	r1, r1, r3
 8008c22:	0864      	lsrs	r4, r4, #1
 8008c24:	07ed      	lsls	r5, r5, #31
 8008c26:	d502      	bpl.n	8008c2e <__ieee754_sqrt+0x15e>
 8008c28:	2380      	movs	r3, #128	; 0x80
 8008c2a:	061b      	lsls	r3, r3, #24
 8008c2c:	431c      	orrs	r4, r3
 8008c2e:	9b05      	ldr	r3, [sp, #20]
 8008c30:	0025      	movs	r5, r4
 8008c32:	0518      	lsls	r0, r3, #20
 8008c34:	1843      	adds	r3, r0, r1
 8008c36:	001c      	movs	r4, r3
 8008c38:	e763      	b.n	8008b02 <__ieee754_sqrt+0x32>
 8008c3a:	0ada      	lsrs	r2, r3, #11
 8008c3c:	3815      	subs	r0, #21
 8008c3e:	055b      	lsls	r3, r3, #21
 8008c40:	2a00      	cmp	r2, #0
 8008c42:	d0fa      	beq.n	8008c3a <__ieee754_sqrt+0x16a>
 8008c44:	2480      	movs	r4, #128	; 0x80
 8008c46:	0364      	lsls	r4, r4, #13
 8008c48:	4222      	tst	r2, r4
 8008c4a:	d00a      	beq.n	8008c62 <__ieee754_sqrt+0x192>
 8008c4c:	2420      	movs	r4, #32
 8008c4e:	001e      	movs	r6, r3
 8008c50:	1a64      	subs	r4, r4, r1
 8008c52:	40e6      	lsrs	r6, r4
 8008c54:	1e4d      	subs	r5, r1, #1
 8008c56:	408b      	lsls	r3, r1
 8008c58:	4332      	orrs	r2, r6
 8008c5a:	1b41      	subs	r1, r0, r5
 8008c5c:	e76d      	b.n	8008b3a <__ieee754_sqrt+0x6a>
 8008c5e:	2000      	movs	r0, #0
 8008c60:	e7ee      	b.n	8008c40 <__ieee754_sqrt+0x170>
 8008c62:	0052      	lsls	r2, r2, #1
 8008c64:	3101      	adds	r1, #1
 8008c66:	e7ef      	b.n	8008c48 <__ieee754_sqrt+0x178>
 8008c68:	f7f8 faf8 	bl	800125c <__aeabi_dadd>
 8008c6c:	6877      	ldr	r7, [r6, #4]
 8008c6e:	6836      	ldr	r6, [r6, #0]
 8008c70:	0002      	movs	r2, r0
 8008c72:	000b      	movs	r3, r1
 8008c74:	0030      	movs	r0, r6
 8008c76:	0039      	movs	r1, r7
 8008c78:	f7f7 fbce 	bl	8000418 <__aeabi_dcmplt>
 8008c7c:	2800      	cmp	r0, #0
 8008c7e:	d004      	beq.n	8008c8a <__ieee754_sqrt+0x1ba>
 8008c80:	3402      	adds	r4, #2
 8008c82:	4263      	negs	r3, r4
 8008c84:	4163      	adcs	r3, r4
 8008c86:	18ed      	adds	r5, r5, r3
 8008c88:	e7c8      	b.n	8008c1c <__ieee754_sqrt+0x14c>
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	3401      	adds	r4, #1
 8008c8e:	439c      	bics	r4, r3
 8008c90:	e7c4      	b.n	8008c1c <__ieee754_sqrt+0x14c>
 8008c92:	46c0      	nop			; (mov r8, r8)
 8008c94:	7ff00000 	.word	0x7ff00000
 8008c98:	fffffc01 	.word	0xfffffc01
 8008c9c:	20000028 	.word	0x20000028
 8008ca0:	20000030 	.word	0x20000030
 8008ca4:	3fe00000 	.word	0x3fe00000

08008ca8 <__ieee754_sqrtf>:
 8008ca8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008caa:	0003      	movs	r3, r0
 8008cac:	0042      	lsls	r2, r0, #1
 8008cae:	1c04      	adds	r4, r0, #0
 8008cb0:	20ff      	movs	r0, #255	; 0xff
 8008cb2:	0852      	lsrs	r2, r2, #1
 8008cb4:	05c0      	lsls	r0, r0, #23
 8008cb6:	4282      	cmp	r2, r0
 8008cb8:	d30a      	bcc.n	8008cd0 <__ieee754_sqrtf+0x28>
 8008cba:	1c21      	adds	r1, r4, #0
 8008cbc:	1c20      	adds	r0, r4, #0
 8008cbe:	f7f7 ff77 	bl	8000bb0 <__aeabi_fmul>
 8008cc2:	1c01      	adds	r1, r0, #0
 8008cc4:	1c20      	adds	r0, r4, #0
 8008cc6:	f7f7 fc09 	bl	80004dc <__aeabi_fadd>
 8008cca:	1c04      	adds	r4, r0, #0
 8008ccc:	1c20      	adds	r0, r4, #0
 8008cce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008cd0:	2a00      	cmp	r2, #0
 8008cd2:	d0fb      	beq.n	8008ccc <__ieee754_sqrtf+0x24>
 8008cd4:	2c00      	cmp	r4, #0
 8008cd6:	da07      	bge.n	8008ce8 <__ieee754_sqrtf+0x40>
 8008cd8:	1c21      	adds	r1, r4, #0
 8008cda:	1c20      	adds	r0, r4, #0
 8008cdc:	f7f8 f8b6 	bl	8000e4c <__aeabi_fsub>
 8008ce0:	1c01      	adds	r1, r0, #0
 8008ce2:	f7f7 fd9b 	bl	800081c <__aeabi_fdiv>
 8008ce6:	e7f0      	b.n	8008cca <__ieee754_sqrtf+0x22>
 8008ce8:	0022      	movs	r2, r4
 8008cea:	15e1      	asrs	r1, r4, #23
 8008cec:	4002      	ands	r2, r0
 8008cee:	4204      	tst	r4, r0
 8008cf0:	d047      	beq.n	8008d82 <__ieee754_sqrtf+0xda>
 8008cf2:	2280      	movs	r2, #128	; 0x80
 8008cf4:	0008      	movs	r0, r1
 8008cf6:	025b      	lsls	r3, r3, #9
 8008cf8:	0a5b      	lsrs	r3, r3, #9
 8008cfa:	0412      	lsls	r2, r2, #16
 8008cfc:	387f      	subs	r0, #127	; 0x7f
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	07c9      	lsls	r1, r1, #31
 8008d02:	d400      	bmi.n	8008d06 <__ieee754_sqrtf+0x5e>
 8008d04:	005b      	lsls	r3, r3, #1
 8008d06:	2400      	movs	r4, #0
 8008d08:	2180      	movs	r1, #128	; 0x80
 8008d0a:	1042      	asrs	r2, r0, #1
 8008d0c:	0026      	movs	r6, r4
 8008d0e:	2019      	movs	r0, #25
 8008d10:	9201      	str	r2, [sp, #4]
 8008d12:	005b      	lsls	r3, r3, #1
 8008d14:	0449      	lsls	r1, r1, #17
 8008d16:	1875      	adds	r5, r6, r1
 8008d18:	001a      	movs	r2, r3
 8008d1a:	429d      	cmp	r5, r3
 8008d1c:	dc02      	bgt.n	8008d24 <__ieee754_sqrtf+0x7c>
 8008d1e:	186e      	adds	r6, r5, r1
 8008d20:	1b5a      	subs	r2, r3, r5
 8008d22:	1864      	adds	r4, r4, r1
 8008d24:	3801      	subs	r0, #1
 8008d26:	0053      	lsls	r3, r2, #1
 8008d28:	0849      	lsrs	r1, r1, #1
 8008d2a:	2800      	cmp	r0, #0
 8008d2c:	d1f3      	bne.n	8008d16 <__ieee754_sqrtf+0x6e>
 8008d2e:	2a00      	cmp	r2, #0
 8008d30:	d018      	beq.n	8008d64 <__ieee754_sqrtf+0xbc>
 8008d32:	4d17      	ldr	r5, [pc, #92]	; (8008d90 <__ieee754_sqrtf+0xe8>)
 8008d34:	4e17      	ldr	r6, [pc, #92]	; (8008d94 <__ieee754_sqrtf+0xec>)
 8008d36:	6828      	ldr	r0, [r5, #0]
 8008d38:	6831      	ldr	r1, [r6, #0]
 8008d3a:	f7f8 f887 	bl	8000e4c <__aeabi_fsub>
 8008d3e:	682f      	ldr	r7, [r5, #0]
 8008d40:	1c01      	adds	r1, r0, #0
 8008d42:	1c38      	adds	r0, r7, #0
 8008d44:	f7f7 fbac 	bl	80004a0 <__aeabi_fcmple>
 8008d48:	2800      	cmp	r0, #0
 8008d4a:	d00b      	beq.n	8008d64 <__ieee754_sqrtf+0xbc>
 8008d4c:	6828      	ldr	r0, [r5, #0]
 8008d4e:	6831      	ldr	r1, [r6, #0]
 8008d50:	f7f7 fbc4 	bl	80004dc <__aeabi_fadd>
 8008d54:	682d      	ldr	r5, [r5, #0]
 8008d56:	1c01      	adds	r1, r0, #0
 8008d58:	1c28      	adds	r0, r5, #0
 8008d5a:	f7f7 fb97 	bl	800048c <__aeabi_fcmplt>
 8008d5e:	2800      	cmp	r0, #0
 8008d60:	d012      	beq.n	8008d88 <__ieee754_sqrtf+0xe0>
 8008d62:	3402      	adds	r4, #2
 8008d64:	22fc      	movs	r2, #252	; 0xfc
 8008d66:	1063      	asrs	r3, r4, #1
 8008d68:	0592      	lsls	r2, r2, #22
 8008d6a:	189b      	adds	r3, r3, r2
 8008d6c:	9a01      	ldr	r2, [sp, #4]
 8008d6e:	05d4      	lsls	r4, r2, #23
 8008d70:	18e4      	adds	r4, r4, r3
 8008d72:	e7ab      	b.n	8008ccc <__ieee754_sqrtf+0x24>
 8008d74:	005b      	lsls	r3, r3, #1
 8008d76:	3201      	adds	r2, #1
 8008d78:	4203      	tst	r3, r0
 8008d7a:	d0fb      	beq.n	8008d74 <__ieee754_sqrtf+0xcc>
 8008d7c:	3a01      	subs	r2, #1
 8008d7e:	1a89      	subs	r1, r1, r2
 8008d80:	e7b7      	b.n	8008cf2 <__ieee754_sqrtf+0x4a>
 8008d82:	2080      	movs	r0, #128	; 0x80
 8008d84:	0400      	lsls	r0, r0, #16
 8008d86:	e7f7      	b.n	8008d78 <__ieee754_sqrtf+0xd0>
 8008d88:	2301      	movs	r3, #1
 8008d8a:	3401      	adds	r4, #1
 8008d8c:	439c      	bics	r4, r3
 8008d8e:	e7e9      	b.n	8008d64 <__ieee754_sqrtf+0xbc>
 8008d90:	20000038 	.word	0x20000038
 8008d94:	2000003c 	.word	0x2000003c

08008d98 <__ieee754_acosf>:
 8008d98:	21fe      	movs	r1, #254	; 0xfe
 8008d9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d9c:	0043      	lsls	r3, r0, #1
 8008d9e:	1c04      	adds	r4, r0, #0
 8008da0:	085b      	lsrs	r3, r3, #1
 8008da2:	0589      	lsls	r1, r1, #22
 8008da4:	428b      	cmp	r3, r1
 8008da6:	d104      	bne.n	8008db2 <__ieee754_acosf+0x1a>
 8008da8:	2000      	movs	r0, #0
 8008daa:	2c00      	cmp	r4, #0
 8008dac:	dc00      	bgt.n	8008db0 <__ieee754_acosf+0x18>
 8008dae:	489c      	ldr	r0, [pc, #624]	; (8009020 <__ieee754_acosf+0x288>)
 8008db0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008db2:	428b      	cmp	r3, r1
 8008db4:	dd06      	ble.n	8008dc4 <__ieee754_acosf+0x2c>
 8008db6:	1c01      	adds	r1, r0, #0
 8008db8:	f7f8 f848 	bl	8000e4c <__aeabi_fsub>
 8008dbc:	1c01      	adds	r1, r0, #0
 8008dbe:	f7f7 fd2d 	bl	800081c <__aeabi_fdiv>
 8008dc2:	e7f5      	b.n	8008db0 <__ieee754_acosf+0x18>
 8008dc4:	21fc      	movs	r1, #252	; 0xfc
 8008dc6:	0589      	lsls	r1, r1, #22
 8008dc8:	428b      	cmp	r3, r1
 8008dca:	da58      	bge.n	8008e7e <__ieee754_acosf+0xe6>
 8008dcc:	228c      	movs	r2, #140	; 0x8c
 8008dce:	0592      	lsls	r2, r2, #22
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	dc00      	bgt.n	8008dd6 <__ieee754_acosf+0x3e>
 8008dd4:	e121      	b.n	800901a <__ieee754_acosf+0x282>
 8008dd6:	1c01      	adds	r1, r0, #0
 8008dd8:	f7f7 feea 	bl	8000bb0 <__aeabi_fmul>
 8008ddc:	4991      	ldr	r1, [pc, #580]	; (8009024 <__ieee754_acosf+0x28c>)
 8008dde:	1c05      	adds	r5, r0, #0
 8008de0:	f7f7 fee6 	bl	8000bb0 <__aeabi_fmul>
 8008de4:	4990      	ldr	r1, [pc, #576]	; (8009028 <__ieee754_acosf+0x290>)
 8008de6:	f7f7 fb79 	bl	80004dc <__aeabi_fadd>
 8008dea:	1c29      	adds	r1, r5, #0
 8008dec:	f7f7 fee0 	bl	8000bb0 <__aeabi_fmul>
 8008df0:	498e      	ldr	r1, [pc, #568]	; (800902c <__ieee754_acosf+0x294>)
 8008df2:	f7f8 f82b 	bl	8000e4c <__aeabi_fsub>
 8008df6:	1c29      	adds	r1, r5, #0
 8008df8:	f7f7 feda 	bl	8000bb0 <__aeabi_fmul>
 8008dfc:	498c      	ldr	r1, [pc, #560]	; (8009030 <__ieee754_acosf+0x298>)
 8008dfe:	f7f7 fb6d 	bl	80004dc <__aeabi_fadd>
 8008e02:	1c29      	adds	r1, r5, #0
 8008e04:	f7f7 fed4 	bl	8000bb0 <__aeabi_fmul>
 8008e08:	498a      	ldr	r1, [pc, #552]	; (8009034 <__ieee754_acosf+0x29c>)
 8008e0a:	f7f8 f81f 	bl	8000e4c <__aeabi_fsub>
 8008e0e:	1c29      	adds	r1, r5, #0
 8008e10:	f7f7 fece 	bl	8000bb0 <__aeabi_fmul>
 8008e14:	4988      	ldr	r1, [pc, #544]	; (8009038 <__ieee754_acosf+0x2a0>)
 8008e16:	f7f7 fb61 	bl	80004dc <__aeabi_fadd>
 8008e1a:	1c29      	adds	r1, r5, #0
 8008e1c:	f7f7 fec8 	bl	8000bb0 <__aeabi_fmul>
 8008e20:	4986      	ldr	r1, [pc, #536]	; (800903c <__ieee754_acosf+0x2a4>)
 8008e22:	1c06      	adds	r6, r0, #0
 8008e24:	1c28      	adds	r0, r5, #0
 8008e26:	f7f7 fec3 	bl	8000bb0 <__aeabi_fmul>
 8008e2a:	4985      	ldr	r1, [pc, #532]	; (8009040 <__ieee754_acosf+0x2a8>)
 8008e2c:	f7f8 f80e 	bl	8000e4c <__aeabi_fsub>
 8008e30:	1c29      	adds	r1, r5, #0
 8008e32:	f7f7 febd 	bl	8000bb0 <__aeabi_fmul>
 8008e36:	4983      	ldr	r1, [pc, #524]	; (8009044 <__ieee754_acosf+0x2ac>)
 8008e38:	f7f7 fb50 	bl	80004dc <__aeabi_fadd>
 8008e3c:	1c29      	adds	r1, r5, #0
 8008e3e:	f7f7 feb7 	bl	8000bb0 <__aeabi_fmul>
 8008e42:	4981      	ldr	r1, [pc, #516]	; (8009048 <__ieee754_acosf+0x2b0>)
 8008e44:	f7f8 f802 	bl	8000e4c <__aeabi_fsub>
 8008e48:	1c29      	adds	r1, r5, #0
 8008e4a:	f7f7 feb1 	bl	8000bb0 <__aeabi_fmul>
 8008e4e:	21fe      	movs	r1, #254	; 0xfe
 8008e50:	0589      	lsls	r1, r1, #22
 8008e52:	f7f7 fb43 	bl	80004dc <__aeabi_fadd>
 8008e56:	1c01      	adds	r1, r0, #0
 8008e58:	1c30      	adds	r0, r6, #0
 8008e5a:	f7f7 fcdf 	bl	800081c <__aeabi_fdiv>
 8008e5e:	1c21      	adds	r1, r4, #0
 8008e60:	f7f7 fea6 	bl	8000bb0 <__aeabi_fmul>
 8008e64:	1c01      	adds	r1, r0, #0
 8008e66:	4879      	ldr	r0, [pc, #484]	; (800904c <__ieee754_acosf+0x2b4>)
 8008e68:	f7f7 fff0 	bl	8000e4c <__aeabi_fsub>
 8008e6c:	1c01      	adds	r1, r0, #0
 8008e6e:	1c20      	adds	r0, r4, #0
 8008e70:	f7f7 ffec 	bl	8000e4c <__aeabi_fsub>
 8008e74:	1c01      	adds	r1, r0, #0
 8008e76:	4876      	ldr	r0, [pc, #472]	; (8009050 <__ieee754_acosf+0x2b8>)
 8008e78:	f7f7 ffe8 	bl	8000e4c <__aeabi_fsub>
 8008e7c:	e798      	b.n	8008db0 <__ieee754_acosf+0x18>
 8008e7e:	2800      	cmp	r0, #0
 8008e80:	da5b      	bge.n	8008f3a <__ieee754_acosf+0x1a2>
 8008e82:	21fe      	movs	r1, #254	; 0xfe
 8008e84:	0589      	lsls	r1, r1, #22
 8008e86:	f7f7 fb29 	bl	80004dc <__aeabi_fadd>
 8008e8a:	21fc      	movs	r1, #252	; 0xfc
 8008e8c:	0589      	lsls	r1, r1, #22
 8008e8e:	f7f7 fe8f 	bl	8000bb0 <__aeabi_fmul>
 8008e92:	4964      	ldr	r1, [pc, #400]	; (8009024 <__ieee754_acosf+0x28c>)
 8008e94:	1c04      	adds	r4, r0, #0
 8008e96:	f7f7 fe8b 	bl	8000bb0 <__aeabi_fmul>
 8008e9a:	4963      	ldr	r1, [pc, #396]	; (8009028 <__ieee754_acosf+0x290>)
 8008e9c:	f7f7 fb1e 	bl	80004dc <__aeabi_fadd>
 8008ea0:	1c21      	adds	r1, r4, #0
 8008ea2:	f7f7 fe85 	bl	8000bb0 <__aeabi_fmul>
 8008ea6:	4961      	ldr	r1, [pc, #388]	; (800902c <__ieee754_acosf+0x294>)
 8008ea8:	f7f7 ffd0 	bl	8000e4c <__aeabi_fsub>
 8008eac:	1c21      	adds	r1, r4, #0
 8008eae:	f7f7 fe7f 	bl	8000bb0 <__aeabi_fmul>
 8008eb2:	495f      	ldr	r1, [pc, #380]	; (8009030 <__ieee754_acosf+0x298>)
 8008eb4:	f7f7 fb12 	bl	80004dc <__aeabi_fadd>
 8008eb8:	1c21      	adds	r1, r4, #0
 8008eba:	f7f7 fe79 	bl	8000bb0 <__aeabi_fmul>
 8008ebe:	495d      	ldr	r1, [pc, #372]	; (8009034 <__ieee754_acosf+0x29c>)
 8008ec0:	f7f7 ffc4 	bl	8000e4c <__aeabi_fsub>
 8008ec4:	1c21      	adds	r1, r4, #0
 8008ec6:	f7f7 fe73 	bl	8000bb0 <__aeabi_fmul>
 8008eca:	495b      	ldr	r1, [pc, #364]	; (8009038 <__ieee754_acosf+0x2a0>)
 8008ecc:	f7f7 fb06 	bl	80004dc <__aeabi_fadd>
 8008ed0:	1c21      	adds	r1, r4, #0
 8008ed2:	f7f7 fe6d 	bl	8000bb0 <__aeabi_fmul>
 8008ed6:	1c06      	adds	r6, r0, #0
 8008ed8:	1c20      	adds	r0, r4, #0
 8008eda:	f7ff fee5 	bl	8008ca8 <__ieee754_sqrtf>
 8008ede:	4957      	ldr	r1, [pc, #348]	; (800903c <__ieee754_acosf+0x2a4>)
 8008ee0:	1c05      	adds	r5, r0, #0
 8008ee2:	1c20      	adds	r0, r4, #0
 8008ee4:	f7f7 fe64 	bl	8000bb0 <__aeabi_fmul>
 8008ee8:	4955      	ldr	r1, [pc, #340]	; (8009040 <__ieee754_acosf+0x2a8>)
 8008eea:	f7f7 ffaf 	bl	8000e4c <__aeabi_fsub>
 8008eee:	1c21      	adds	r1, r4, #0
 8008ef0:	f7f7 fe5e 	bl	8000bb0 <__aeabi_fmul>
 8008ef4:	4953      	ldr	r1, [pc, #332]	; (8009044 <__ieee754_acosf+0x2ac>)
 8008ef6:	f7f7 faf1 	bl	80004dc <__aeabi_fadd>
 8008efa:	1c21      	adds	r1, r4, #0
 8008efc:	f7f7 fe58 	bl	8000bb0 <__aeabi_fmul>
 8008f00:	4951      	ldr	r1, [pc, #324]	; (8009048 <__ieee754_acosf+0x2b0>)
 8008f02:	f7f7 ffa3 	bl	8000e4c <__aeabi_fsub>
 8008f06:	1c21      	adds	r1, r4, #0
 8008f08:	f7f7 fe52 	bl	8000bb0 <__aeabi_fmul>
 8008f0c:	21fe      	movs	r1, #254	; 0xfe
 8008f0e:	0589      	lsls	r1, r1, #22
 8008f10:	f7f7 fae4 	bl	80004dc <__aeabi_fadd>
 8008f14:	1c01      	adds	r1, r0, #0
 8008f16:	1c30      	adds	r0, r6, #0
 8008f18:	f7f7 fc80 	bl	800081c <__aeabi_fdiv>
 8008f1c:	1c29      	adds	r1, r5, #0
 8008f1e:	f7f7 fe47 	bl	8000bb0 <__aeabi_fmul>
 8008f22:	494a      	ldr	r1, [pc, #296]	; (800904c <__ieee754_acosf+0x2b4>)
 8008f24:	f7f7 ff92 	bl	8000e4c <__aeabi_fsub>
 8008f28:	1c29      	adds	r1, r5, #0
 8008f2a:	f7f7 fad7 	bl	80004dc <__aeabi_fadd>
 8008f2e:	1c01      	adds	r1, r0, #0
 8008f30:	f7f7 fad4 	bl	80004dc <__aeabi_fadd>
 8008f34:	1c01      	adds	r1, r0, #0
 8008f36:	4847      	ldr	r0, [pc, #284]	; (8009054 <__ieee754_acosf+0x2bc>)
 8008f38:	e79e      	b.n	8008e78 <__ieee754_acosf+0xe0>
 8008f3a:	1c01      	adds	r1, r0, #0
 8008f3c:	20fe      	movs	r0, #254	; 0xfe
 8008f3e:	0580      	lsls	r0, r0, #22
 8008f40:	f7f7 ff84 	bl	8000e4c <__aeabi_fsub>
 8008f44:	21fc      	movs	r1, #252	; 0xfc
 8008f46:	0589      	lsls	r1, r1, #22
 8008f48:	f7f7 fe32 	bl	8000bb0 <__aeabi_fmul>
 8008f4c:	1c04      	adds	r4, r0, #0
 8008f4e:	f7ff feab 	bl	8008ca8 <__ieee754_sqrtf>
 8008f52:	4934      	ldr	r1, [pc, #208]	; (8009024 <__ieee754_acosf+0x28c>)
 8008f54:	1c06      	adds	r6, r0, #0
 8008f56:	0b05      	lsrs	r5, r0, #12
 8008f58:	1c20      	adds	r0, r4, #0
 8008f5a:	f7f7 fe29 	bl	8000bb0 <__aeabi_fmul>
 8008f5e:	4932      	ldr	r1, [pc, #200]	; (8009028 <__ieee754_acosf+0x290>)
 8008f60:	f7f7 fabc 	bl	80004dc <__aeabi_fadd>
 8008f64:	1c21      	adds	r1, r4, #0
 8008f66:	f7f7 fe23 	bl	8000bb0 <__aeabi_fmul>
 8008f6a:	4930      	ldr	r1, [pc, #192]	; (800902c <__ieee754_acosf+0x294>)
 8008f6c:	f7f7 ff6e 	bl	8000e4c <__aeabi_fsub>
 8008f70:	1c21      	adds	r1, r4, #0
 8008f72:	f7f7 fe1d 	bl	8000bb0 <__aeabi_fmul>
 8008f76:	492e      	ldr	r1, [pc, #184]	; (8009030 <__ieee754_acosf+0x298>)
 8008f78:	f7f7 fab0 	bl	80004dc <__aeabi_fadd>
 8008f7c:	1c21      	adds	r1, r4, #0
 8008f7e:	f7f7 fe17 	bl	8000bb0 <__aeabi_fmul>
 8008f82:	492c      	ldr	r1, [pc, #176]	; (8009034 <__ieee754_acosf+0x29c>)
 8008f84:	f7f7 ff62 	bl	8000e4c <__aeabi_fsub>
 8008f88:	1c21      	adds	r1, r4, #0
 8008f8a:	f7f7 fe11 	bl	8000bb0 <__aeabi_fmul>
 8008f8e:	492a      	ldr	r1, [pc, #168]	; (8009038 <__ieee754_acosf+0x2a0>)
 8008f90:	f7f7 faa4 	bl	80004dc <__aeabi_fadd>
 8008f94:	1c21      	adds	r1, r4, #0
 8008f96:	f7f7 fe0b 	bl	8000bb0 <__aeabi_fmul>
 8008f9a:	4928      	ldr	r1, [pc, #160]	; (800903c <__ieee754_acosf+0x2a4>)
 8008f9c:	1c07      	adds	r7, r0, #0
 8008f9e:	1c20      	adds	r0, r4, #0
 8008fa0:	f7f7 fe06 	bl	8000bb0 <__aeabi_fmul>
 8008fa4:	4926      	ldr	r1, [pc, #152]	; (8009040 <__ieee754_acosf+0x2a8>)
 8008fa6:	f7f7 ff51 	bl	8000e4c <__aeabi_fsub>
 8008faa:	1c21      	adds	r1, r4, #0
 8008fac:	f7f7 fe00 	bl	8000bb0 <__aeabi_fmul>
 8008fb0:	4924      	ldr	r1, [pc, #144]	; (8009044 <__ieee754_acosf+0x2ac>)
 8008fb2:	f7f7 fa93 	bl	80004dc <__aeabi_fadd>
 8008fb6:	1c21      	adds	r1, r4, #0
 8008fb8:	f7f7 fdfa 	bl	8000bb0 <__aeabi_fmul>
 8008fbc:	4922      	ldr	r1, [pc, #136]	; (8009048 <__ieee754_acosf+0x2b0>)
 8008fbe:	f7f7 ff45 	bl	8000e4c <__aeabi_fsub>
 8008fc2:	1c21      	adds	r1, r4, #0
 8008fc4:	f7f7 fdf4 	bl	8000bb0 <__aeabi_fmul>
 8008fc8:	21fe      	movs	r1, #254	; 0xfe
 8008fca:	0589      	lsls	r1, r1, #22
 8008fcc:	f7f7 fa86 	bl	80004dc <__aeabi_fadd>
 8008fd0:	1c01      	adds	r1, r0, #0
 8008fd2:	1c38      	adds	r0, r7, #0
 8008fd4:	f7f7 fc22 	bl	800081c <__aeabi_fdiv>
 8008fd8:	1c31      	adds	r1, r6, #0
 8008fda:	f7f7 fde9 	bl	8000bb0 <__aeabi_fmul>
 8008fde:	032d      	lsls	r5, r5, #12
 8008fe0:	1c07      	adds	r7, r0, #0
 8008fe2:	1c29      	adds	r1, r5, #0
 8008fe4:	1c28      	adds	r0, r5, #0
 8008fe6:	f7f7 fde3 	bl	8000bb0 <__aeabi_fmul>
 8008fea:	1c01      	adds	r1, r0, #0
 8008fec:	1c20      	adds	r0, r4, #0
 8008fee:	f7f7 ff2d 	bl	8000e4c <__aeabi_fsub>
 8008ff2:	1c29      	adds	r1, r5, #0
 8008ff4:	1c04      	adds	r4, r0, #0
 8008ff6:	1c30      	adds	r0, r6, #0
 8008ff8:	f7f7 fa70 	bl	80004dc <__aeabi_fadd>
 8008ffc:	1c01      	adds	r1, r0, #0
 8008ffe:	1c20      	adds	r0, r4, #0
 8009000:	f7f7 fc0c 	bl	800081c <__aeabi_fdiv>
 8009004:	1c01      	adds	r1, r0, #0
 8009006:	1c38      	adds	r0, r7, #0
 8009008:	f7f7 fa68 	bl	80004dc <__aeabi_fadd>
 800900c:	1c29      	adds	r1, r5, #0
 800900e:	f7f7 fa65 	bl	80004dc <__aeabi_fadd>
 8009012:	1c01      	adds	r1, r0, #0
 8009014:	f7f7 fa62 	bl	80004dc <__aeabi_fadd>
 8009018:	e6ca      	b.n	8008db0 <__ieee754_acosf+0x18>
 800901a:	480f      	ldr	r0, [pc, #60]	; (8009058 <__ieee754_acosf+0x2c0>)
 800901c:	e6c8      	b.n	8008db0 <__ieee754_acosf+0x18>
 800901e:	46c0      	nop			; (mov r8, r8)
 8009020:	40490fdb 	.word	0x40490fdb
 8009024:	3811ef08 	.word	0x3811ef08
 8009028:	3a4f7f04 	.word	0x3a4f7f04
 800902c:	3d241146 	.word	0x3d241146
 8009030:	3e4e0aa8 	.word	0x3e4e0aa8
 8009034:	3ea6b090 	.word	0x3ea6b090
 8009038:	3e2aaaab 	.word	0x3e2aaaab
 800903c:	3d9dc62e 	.word	0x3d9dc62e
 8009040:	3f303361 	.word	0x3f303361
 8009044:	4001572d 	.word	0x4001572d
 8009048:	4019d139 	.word	0x4019d139
 800904c:	33a22168 	.word	0x33a22168
 8009050:	3fc90fda 	.word	0x3fc90fda
 8009054:	40490fda 	.word	0x40490fda
 8009058:	3fc90fdb 	.word	0x3fc90fdb

0800905c <memset>:
 800905c:	0003      	movs	r3, r0
 800905e:	1882      	adds	r2, r0, r2
 8009060:	4293      	cmp	r3, r2
 8009062:	d100      	bne.n	8009066 <memset+0xa>
 8009064:	4770      	bx	lr
 8009066:	7019      	strb	r1, [r3, #0]
 8009068:	3301      	adds	r3, #1
 800906a:	e7f9      	b.n	8009060 <memset+0x4>

0800906c <__errno>:
 800906c:	4b01      	ldr	r3, [pc, #4]	; (8009074 <__errno+0x8>)
 800906e:	6818      	ldr	r0, [r3, #0]
 8009070:	4770      	bx	lr
 8009072:	46c0      	nop			; (mov r8, r8)
 8009074:	2000008c 	.word	0x2000008c

08009078 <__libc_init_array>:
 8009078:	b570      	push	{r4, r5, r6, lr}
 800907a:	2600      	movs	r6, #0
 800907c:	4c0c      	ldr	r4, [pc, #48]	; (80090b0 <__libc_init_array+0x38>)
 800907e:	4d0d      	ldr	r5, [pc, #52]	; (80090b4 <__libc_init_array+0x3c>)
 8009080:	1b64      	subs	r4, r4, r5
 8009082:	10a4      	asrs	r4, r4, #2
 8009084:	42a6      	cmp	r6, r4
 8009086:	d109      	bne.n	800909c <__libc_init_array+0x24>
 8009088:	2600      	movs	r6, #0
 800908a:	f000 f819 	bl	80090c0 <_init>
 800908e:	4c0a      	ldr	r4, [pc, #40]	; (80090b8 <__libc_init_array+0x40>)
 8009090:	4d0a      	ldr	r5, [pc, #40]	; (80090bc <__libc_init_array+0x44>)
 8009092:	1b64      	subs	r4, r4, r5
 8009094:	10a4      	asrs	r4, r4, #2
 8009096:	42a6      	cmp	r6, r4
 8009098:	d105      	bne.n	80090a6 <__libc_init_array+0x2e>
 800909a:	bd70      	pop	{r4, r5, r6, pc}
 800909c:	00b3      	lsls	r3, r6, #2
 800909e:	58eb      	ldr	r3, [r5, r3]
 80090a0:	4798      	blx	r3
 80090a2:	3601      	adds	r6, #1
 80090a4:	e7ee      	b.n	8009084 <__libc_init_array+0xc>
 80090a6:	00b3      	lsls	r3, r6, #2
 80090a8:	58eb      	ldr	r3, [r5, r3]
 80090aa:	4798      	blx	r3
 80090ac:	3601      	adds	r6, #1
 80090ae:	e7f2      	b.n	8009096 <__libc_init_array+0x1e>
 80090b0:	08009224 	.word	0x08009224
 80090b4:	08009224 	.word	0x08009224
 80090b8:	0800922c 	.word	0x0800922c
 80090bc:	08009224 	.word	0x08009224

080090c0 <_init>:
 80090c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090c2:	46c0      	nop			; (mov r8, r8)
 80090c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090c6:	bc08      	pop	{r3}
 80090c8:	469e      	mov	lr, r3
 80090ca:	4770      	bx	lr

080090cc <_fini>:
 80090cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ce:	46c0      	nop			; (mov r8, r8)
 80090d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090d2:	bc08      	pop	{r3}
 80090d4:	469e      	mov	lr, r3
 80090d6:	4770      	bx	lr
